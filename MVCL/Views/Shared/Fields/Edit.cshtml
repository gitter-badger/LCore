@* Generator: MvcView *@

@using LCore;
@using MVCL;
@using MVCL.Models;
@using MVCL.Controllers;
@using MVCL.Context;
@using System.Collections;
@using System.Collections.Generic;
@using System.ComponentModel;
@using System.ComponentModel.Design;
@using System.Web;
@using System.Web.Mvc;
@using System.Linq;
@using System.Linq.Expressions;
@using System.ComponentModel.DataAnnotations;
@using System.ComponentModel.DataAnnotations.Schema;

@{
    System.Web.ModelBinding.ModelMetadata Meta = Model.Meta;

    LambdaExpression Lambda = null;

    Object ValueData = null;

    Boolean ShowLabel = Model.ViewTypes.HasAny(new[] {ControllerHelper.ViewType.Create,
        ControllerHelper.ViewType.Edit,
        ControllerHelper.ViewType.Display});

    if (Model.PropertyName.Contains("."))
        {
        String[] FullProperties = null;

        Lambda = Model.ModelData.TrueModelType().FindSubProperty(out Meta, out FullProperties, Model.PropertyName.Split("."));
        }
    else
        {
        Meta = Model.ModelData.TrueModelType().Meta(Model.PropertyName);
        }

    if (Lambda == null)
        {
        ValueData = Model.ModelData.GetProperty(Meta.PropertyName);
        }
    else
        {
        Delegate d = Lambda.Compile();
        ValueData = d.DynamicInvoke(Model);
        }

    RangeAttribute Attr = null;

    if (Model.Meta.HasAttribute<RangeAttribute>())
        {
        Attr = Model.Meta.GetAttribute<RangeAttribute>();
        }
}

@model IViewField


@if (Model.Meta.PropertyName == ControllerHelper.AutomaticFields.Active)
    {
    return;
    }

<div class="field @Model.ViewTypes.CollectStr((i,t) => { return t.ToString().ToLower() + "-field "; }) field-@Model.ColumnClass"
     data-object-type="@Meta.ModelType"
     data-type-name="@Meta.DataTypeName"
     maximum="@(Attr != null ? Attr.Maximum : null)"
     minimum="@(Attr != null ? Attr.Minimum : null)">

    @if (Model.Meta.HasAttribute<HiddenInputAttribute>())
        {
        @Html.Partial(ControllerHelper.PartialViews.Field_Edit_Hidden, Model)
        }
    else
        {
        @Html.ValidationMessage(Model.Meta.PropertyName)

        if (ShowLabel)
            {
            @Html.Label(Model.Meta.PropertyName, Model.Meta.DisplayName ?? Model.Meta.PropertyName.Humanize())
            }

        if (Model.Meta.IsRequired)
            {
            <span class="required-mark">*</span>
            }

        if (Meta.HasAttribute<ICustomPartial>() &&
            Meta.GetAttribute<ICustomPartial>().IsActive(Html, Model, Model.ViewTypes))
            {
            Meta.GetAttribute<ICustomPartial>().RenderPartial(Html, Model, Model.ViewTypes);
            }
        else if (Html.ViewExists(ControllerHelper.PartialViews.Field_Edit_PropertyName(Model.PropertyName)))
            {
            // Override the Edit view for the property.

            @Html.Partial(ControllerHelper.PartialViews.Field_Edit_PropertyName(Model.PropertyName), Model);
            }
        else if (Model.Meta.HasAttribute<KeyAttribute>())
            {
            @Html.Partial(ControllerHelper.PartialViews.Field_Edit_Key, Model)
            }
        else if (Model.Meta.ModelType == typeof(Boolean) ||
            Model.Meta.ModelType == typeof(Boolean?))
            {
            @Html.Partial(ControllerHelper.PartialViews.Field_Edit_Boolean, Model)
            }
        else if (Model.Meta.DataTypeName == DataType.Currency.ToString())
            {
            @Html.Partial(ControllerHelper.PartialViews.Field_Edit_Currency, Model)
            }
        else if (Model.Meta.ModelType == typeof(int) ||
            Model.Meta.ModelType == typeof(int?))
            {
            if (Attr != null && (int)Attr.Maximum != int.MaxValue &&
                (int)Attr.Minimum != int.MinValue)
                {
                @Html.Partial(ControllerHelper.PartialViews.Field_Edit_IntRange, Model)
                }
            else
                {
                @Html.Partial(ControllerHelper.PartialViews.Field_Edit_Int, Model)
                }
            }
        else if (Model.Meta.ModelType == typeof(long) ||
            Model.Meta.ModelType == typeof(long?))
            {
            @Html.Partial(ControllerHelper.PartialViews.Field_Edit_Long, Model)
            }
        else if (Model.Meta.ModelType == typeof(double) ||
            Model.Meta.ModelType == typeof(double?) ||
            Model.Meta.ModelType == typeof(float) ||
            Model.Meta.ModelType == typeof(float?) ||
            Model.Meta.ModelType == typeof(decimal) ||
            Model.Meta.ModelType == typeof(decimal?))
            {
            @Html.Partial(ControllerHelper.PartialViews.Field_Edit_Decimal, Model)
            }
        else if (Model.Meta.ModelType == typeof(DateTime) ||
            Model.Meta.ModelType == typeof(DateTime?))
            {
            @Html.Partial(ControllerHelper.PartialViews.Field_Edit_DateTime, Model)
            }
        else if (Model.Meta.ModelType.PreferGeneric().IsEnum)
            {
            @Html.Partial(ControllerHelper.PartialViews.Field_Edit_Enum, Model)
            }
        else if (Model.Meta.ModelType.MemberHasAttribute<ComplexTypeAttribute>(true))
            {
            @Html.Partial(ControllerHelper.PartialViews.Field_Edit_ComplexType, Model)
            }
        else if (Model.Meta.ModelType.HasInterface(typeof(IModel), true))
            {
            @Html.Partial(ControllerHelper.PartialViews.Field_Edit_IModel, Model)
            }
        else if (Model.Meta.ModelType == typeof(String))
            {
            if (Model.Meta.DataTypeName == DataType.MultilineText.ToString())
                {
                @Html.Partial(ControllerHelper.PartialViews.Field_Edit_StringMultiLine, Model)
                }
            else
                {
                @Html.Partial(ControllerHelper.PartialViews.Field_Edit_String, Model)
                }
            }
        else if (Html.ViewExists(ControllerHelper.PartialViews.Field_Edit_PropertyType(Model.Meta.ModelType)))
            {
            @Html.Partial(ControllerHelper.PartialViews.Field_Edit_PropertyType(Model.Meta.ModelType), Model)
            }
        else if (Html.ViewExists(ControllerHelper.PartialViews.Field_Edit_DataTypeName(Model.Meta.DataTypeName)))
            {
            @Html.Partial(ControllerHelper.PartialViews.Field_Edit_DataTypeName(Model.Meta.DataTypeName), Model)
            }
        else
            {
            @Html.Partial(ControllerHelper.PartialViews.Field_Edit_Unknown, Model)
            }
        }
</div>
