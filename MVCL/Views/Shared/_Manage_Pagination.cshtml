@* Generator: MvcView *@

@using LCore;
@using MVCL;
@using MVCL.Models;
@using MVCL.Controllers;
@using System.Linq;
@using System.Linq.Expressions;
@using System.Collections;
@using System.Collections.Generic;
@using System.ComponentModel;
@using System.ComponentModel.DataAnnotations;
@using System.ComponentModel.DataAnnotations.Schema;
@using System.ComponentModel.Design;
@using System.Web;
@using System.Web.Mvc;

@model ManageViewModel

@{
    ViewBag.PaginationCount = (ViewBag.PaginationCount == null ? 0 : (int)ViewBag.PaginationCount) + 1;
}

<div class="manage-pagination">
    @if (Model.TotalItems > 0)
        {
        <div class="pagination-visible-items">
            Showing results
            @(((Model.Page * Model.Controller.RowsPerPage) + 1).ToString("N0"))
            -
            @(((Model.Page * Model.Controller.RowsPerPage) + Model.Models.Count).ToString("N0"))
            of
            @Model.TotalItems.ToString("N0")
        </div>
        }

    @if (Model.Page != 0)
        {
        <a href="@Url.Action(Model.Controller.ManageActionName, Model.Controller.Name, Model.Route_Page(1))"
           key-bind-click="@(ViewBag.PaginationCount == 1 ? "Ctrl+Home" : null)"
           key-bind-click-name="@(ViewBag.PaginationCount == 1 ? "First Page" : null)">
            <span class="page-previous">
                @Model.FirstPageText
            </span>
        </a>

    <a href="@Url.Action(Model.Controller.ManageActionName, Model.Controller.Name, Model.Route_Page(Model.Page))"
       key-bind-click="@(ViewBag.PaginationCount == 1 ? "Ctrl+Left" : null)"
       key-bind-click-name="@(ViewBag.PaginationCount == 1 ? "Previous Page" : null)">
        <span class="page-previous">
            @Model.PreviousPageText
        </span>
    </a>
        }
    else if (Model.AlwaysShowPaginationFirstLast)
        {
        <span class="page-previous">
            @Model.FirstPageText
        </span>

        <span class="page-previous">
            @Model.PreviousPageText
        </span>
        }

    <span class="page-numbers">
        @if (Model.TotalItems > 0)
            {
            for (int i = 0; i < Model.TotalPages; i++)
                {
                if (i == Model.Page)
                    {
                    <span class="page-current">
                        @(i + 1)
                    </span>
                    }
                else if (i >= Model.Page - Model.ShowSurroundingPages &&
                    i <= Model.Page + Model.ShowSurroundingPages)
                    {
                    <a href="@Url.Action(Model.Controller.ManageActionName, Model.Controller.Name, Model.Route_Page(i + 1))">
                        <span class="page">
                            @(i + 1)
                        </span>
                    </a>
                    }
                else
                    {
                    // Don't show.
                    }
                }
            }
        else
            {
            <span>No Results</span>
            }
    </span>

    @if (Model.Page + 1 != Model.TotalPages)
    {
    <a href="@Url.Action(Model.Controller.ManageActionName, Model.Controller.Name, Model.Route_Page(Model.Page + 2))"
       key-bind-click="@(ViewBag.PaginationCount == 1 ? "Ctrl+Right" : null)"
       key-bind-click-name="@(ViewBag.PaginationCount == 1 ? "Next Page" : null)">
        <span class="page-next">
            @Model.NextPageText
        </span>
    </a>

    <a href="@Url.Action(Model.Controller.ManageActionName, Model.Controller.Name, Model.Route_Page(Model.TotalPages))"
       key-bind-click="@(ViewBag.PaginationCount == 1 ? "Ctrl+End" : null)"
       key-bind-click-name="@(ViewBag.PaginationCount == 1 ? "Last Page" : null)">
        <span class="page-last">
            @Model.LastPageText
        </span>
    </a>
    }
    else if (Model.AlwaysShowPaginationFirstLast)
        {
        <span class="page-next">
            @Model.NextPageText
        </span>

        <span class="page-last">
            @Model.LastPageText
        </span>
        }
</div>