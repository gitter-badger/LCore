/*
Covering Assembly: L

Cover application using naming conventions.

LUnit has Autogenerated 55 Classes and 1481 Methods:
*/
using LCore.Tools;
using LCore.Threads;
using LCore.Numbers;
using LCore.Extensions;
using LCore.Extensions.Optional;
using System;
using Xunit;
using LCore.LUnit;
using Xunit.Abstractions;
using JetBrains.Annotations;

namespace L_Tests.LCore.Tools
    {
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(CacheData))]
    public partial class CacheDataTester : XUnitOutputTester, IDisposable
        {
        public CacheDataTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(CacheData) + "." + nameof(CacheData.AddTime) + "(Int64)")]
        public void AddTime()
            {
            // TODO: Implement method test LCore.Tools.CacheData.AddTime
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper))]
    public partial class RegistryHelperTester : XUnitOutputTester, IDisposable
        {
        public RegistryHelperTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.RemoveAll) + "()")]
        public void RemoveAll()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.RemoveAll
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.Remove) + "(String[])")]
        public void Remove()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.Remove
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.Save) + "(String, Object)")]
        public void Save_String_Object()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.Save
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.Save) + "(String, String)")]
        public void Save_String_String()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.Save
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.Save) + "(String, IConvertible)")]
        public void Save_String_IConvertible()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.Save
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.Save) + "(String, Byte[])")]
        public void Save_String_Byte()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.Save
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.Save) + "(String, IEnumerable`1<Object>)")]
        public void Save_String_IEnumerable_1_Object()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.Save
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.LoadObject) + "(String) => Object")]
        public void LoadObject()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.LoadObject
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.LoadString) + "(String) => String")]
        public void LoadString()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.LoadString
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.LoadInt) + "(String) => Nullable`1<Int32>")]
        public void LoadInt()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.LoadInt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.LoadLong) + "(String) => Nullable`1<Int64>")]
        public void LoadLong()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.LoadLong
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.LoadFloat) + "(String) => Nullable`1<Single>")]
        public void LoadFloat()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.LoadFloat
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.LoadDouble) + "(String) => Nullable`1<Double>")]
        public void LoadDouble()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.LoadDouble
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.LoadChar) + "(String) => Nullable`1<Char>")]
        public void LoadChar()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.LoadChar
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.LoadBool) + "(String) => Nullable`1<Boolean>")]
        public void LoadBool()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.LoadBool
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.LoadBinary) + "(String) => Byte[]")]
        public void LoadBinary()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.LoadBinary
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.LoadList) + "(String) => List`1<Object>")]
        public void LoadList()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.LoadList
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.LoadAll) + "() => List`1<Set`2<String, Object>>")]
        public void LoadAll()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.LoadAll
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(ExceptionList))]
    public partial class ExceptionListTester : XUnitOutputTester, IDisposable
        {
        public ExceptionListTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.ExceptionList.op_Implicit(ExceptionList) => Exception[]")]
        public void op_Implicit_ExceptionList_Exception()
            {
            // TODO: Implement method test LCore.Tools.ExceptionList.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.ExceptionList.op_Implicit(Exception[]) => ExceptionList")]
        public void op_Implicit_Exception_ExceptionList()
            {
            // TODO: Implement method test LCore.Tools.ExceptionList.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.ExceptionList.op_Implicit(ExceptionList) => List`1<Exception>")]
        public void op_Implicit_ExceptionList_List_1_Exception()
            {
            // TODO: Implement method test LCore.Tools.ExceptionList.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.ExceptionList.op_Implicit(List`1<Exception>) => ExceptionList")]
        public void op_Implicit_List_1_Exception_ExceptionList()
            {
            // TODO: Implement method test LCore.Tools.ExceptionList.op_Implicit
            }

        }
    [Trait(Traits.TargetClass, "LCore.Tools.Lists`2")]
    public partial class Lists_2Tester : XUnitOutputTester, IDisposable
        {
        public Lists_2Tester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Lists`2.Add(T1, T2)")]
        public void Add()
            {
            // TODO: Implement method test LCore.Tools.Lists`2.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Lists`2.Set(Int32, T1, T2)")]
        public void Set()
            {
            // TODO: Implement method test LCore.Tools.Lists`2.Set
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Lists`2.Set1(Int32, T1)")]
        public void Set1()
            {
            // TODO: Implement method test LCore.Tools.Lists`2.Set1
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Lists`2.Set2(Int32, T2)")]
        public void Set2()
            {
            // TODO: Implement method test LCore.Tools.Lists`2.Set2
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Lists`2.GetAt(Int32) => Set`2<T1, T2>")]
        public void GetAt()
            {
            // TODO: Implement method test LCore.Tools.Lists`2.GetAt
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Lists`2.RemoveAt(Int32)")]
        public void RemoveAt()
            {
            // TODO: Implement method test LCore.Tools.Lists`2.RemoveAt
            }

        }
    [Trait(Traits.TargetClass, "LCore.Tools.Set`2")]
    public partial class Set_2Tester : XUnitOutputTester, IDisposable
        {
        public Set_2Tester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Set`2.Equals(Object) => Boolean")]
        public void Equals_Object_Boolean()
            {
            // TODO: Implement method test LCore.Tools.Set`2.Equals
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Set`2.GetHashCode() => Int32")]
        public new void GetHashCode()
            {
            // TODO: Implement method test LCore.Tools.Set`2.GetHashCode
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Set`2.Equals(Set`2) => Boolean")]
        public void Equals_Set_2_Boolean()
            {
            // TODO: Implement method test LCore.Tools.Set`2.Equals
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Set`2.ToString() => String")]
        public new void ToString()
            {
            // TODO: Implement method test LCore.Tools.Set`2.ToString
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(DateTimeConverter))]
    public partial class DateTimeConverterTester : XUnitOutputTester, IDisposable
        {
        public DateTimeConverterTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(DateTimeConverter) + "." + nameof(DateTimeConverter.Parse) + "(String) => DateTime")]
        public void Parse()
            {
            // TODO: Implement method test LCore.Tools.DateTimeConverter.Parse
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(DateTimeConverter) + "." + nameof(DateTimeConverter.ToString) + "(DateTime) => String")]
        public void ToString_DateTime_String()
            {
            // TODO: Implement method test LCore.Tools.DateTimeConverter.ToString
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(DateTimeConverter) + "." + nameof(DateTimeConverter.TryParse) + "(String, DateTime&) => Boolean")]
        public void TryParse()
            {
            // TODO: Implement method test LCore.Tools.DateTimeConverter.TryParse
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(DateTimeConverter) + "." + nameof(DateTimeConverter.Rfc3339DateTimeFormat))]
        public void Rfc3339DateTimeFormat()
            {
            // TODO: Implement method test LCore.Tools.DateTimeConverter.Rfc3339DateTimeFormat
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(DateTimeConverter) + "." + nameof(DateTimeConverter.Rfc3339DateTimePatterns))]
        public void Rfc3339DateTimePatterns()
            {
            // TODO: Implement method test LCore.Tools.DateTimeConverter.Rfc3339DateTimePatterns
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(ProgressUpdater))]
    public partial class ProgressUpdaterTester : XUnitOutputTester, IDisposable
        {
        public ProgressUpdaterTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(ProgressUpdater) + "." + nameof(ProgressUpdater.Status) + "(String)")]
        public void Status()
            {
            // TODO: Implement method test LCore.Tools.ProgressUpdater.Status
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(ProgressUpdater) + "." + nameof(ProgressUpdater.Log) + "(String)")]
        public void Log()
            {
            // TODO: Implement method test LCore.Tools.ProgressUpdater.Log
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(ProgressUpdater) + "." + nameof(ProgressUpdater.Progress) + "(Int32)")]
        public void Progress()
            {
            // TODO: Implement method test LCore.Tools.ProgressUpdater.Progress
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(ProgressUpdater) + "." + nameof(ProgressUpdater.Maximum) + "(Int32)")]
        public void Maximum()
            {
            // TODO: Implement method test LCore.Tools.ProgressUpdater.Maximum
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(ProgressUpdater) + "." + nameof(ProgressUpdater.Clear) + "()")]
        public void Clear()
            {
            // TODO: Implement method test LCore.Tools.ProgressUpdater.Clear
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(Schedule))]
    public partial class ScheduleTester : XUnitOutputTester, IDisposable
        {
        public ScheduleTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(Schedule) + "." + nameof(Schedule.ToString) + "() => String")]
        public new void ToString()
            {
            // TODO: Implement method test LCore.Tools.Schedule.ToString
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(Schedule) + "." + nameof(Schedule.FromString) + "(String) => Schedule")]
        public void FromString()
            {
            // TODO: Implement method test LCore.Tools.Schedule.FromString
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(StatMonitor))]
    public partial class StatMonitorTester : XUnitOutputTester, IDisposable
        {
        public StatMonitorTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(StatMonitor) + "." + nameof(StatMonitor.GetCurrentAverageStat) + "() => Double")]
        public void GetCurrentAverageStat()
            {
            // TODO: Implement method test LCore.Tools.StatMonitor.GetCurrentAverageStat
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(StatMonitor) + "." + nameof(StatMonitor.AddStat) + "(Double)")]
        public void AddStat()
            {
            // TODO: Implement method test LCore.Tools.StatMonitor.AddStat
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(StatMonitor) + "." + nameof(StatMonitor.Clear) + "()")]
        public void Clear()
            {
            // TODO: Implement method test LCore.Tools.StatMonitor.Clear
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(StopWatch))]
    public partial class StopWatchTester : XUnitOutputTester, IDisposable
        {
        public StopWatchTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(StopWatch) + "." + nameof(StopWatch.Start) + "()")]
        public void Start()
            {
            // TODO: Implement method test LCore.Tools.StopWatch.Start
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(StopWatch) + "." + nameof(StopWatch.Stop) + "() => Double")]
        public void Stop()
            {
            // TODO: Implement method test LCore.Tools.StopWatch.Stop
            }

        }
    }

namespace L_Tests.LCore.Threads
    {
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool))]
    public partial class FakeThreadPoolTester : XUnitOutputTester, IDisposable
        {
        public FakeThreadPoolTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool) + "." + nameof(FakeThreadPool.GetCurrentTime) + "() => DateTime")]
        public void GetCurrentTime()
            {
            // TODO: Implement method test LCore.Threads.FakeThreadPool.GetCurrentTime
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool) + "." + nameof(FakeThreadPool.AwaitAllThreadsResumed) + "() => Task")]
        public void AwaitAllThreadsResumed()
            {
            // TODO: Implement method test LCore.Threads.FakeThreadPool.AwaitAllThreadsResumed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool) + "." + nameof(FakeThreadPool.AwaitThreadAdded) + "() => Task")]
        public void AwaitThreadAdded()
            {
            // TODO: Implement method test LCore.Threads.FakeThreadPool.AwaitThreadAdded
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool) + "." + nameof(FakeThreadPool.Delay) + "(Int32) => Task")]
        public void Delay_Int32_Task()
            {
            // TODO: Implement method test LCore.Threads.FakeThreadPool.Delay
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool) + "." + nameof(FakeThreadPool.Delay) + "(UInt32) => Task")]
        public void Delay_UInt32_Task()
            {
            // TODO: Implement method test LCore.Threads.FakeThreadPool.Delay
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool) + "." + nameof(FakeThreadPool.Delay) + "(TimeSpan) => Task")]
        public void Delay_TimeSpan_Task()
            {
            // TODO: Implement method test LCore.Threads.FakeThreadPool.Delay
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool) + "." + nameof(FakeThreadPool.GetThreadHistory) + "() => List`1<ThreadSpinner>")]
        public void GetThreadHistory()
            {
            // TODO: Implement method test LCore.Threads.FakeThreadPool.GetThreadHistory
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool) + "." + nameof(FakeThreadPool.GetThreadsWaiting) + "() => List`1<ThreadSpinner>")]
        public void GetThreadsWaiting()
            {
            // TODO: Implement method test LCore.Threads.FakeThreadPool.GetThreadsWaiting
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(ThreadSpinner))]
    public partial class ThreadSpinnerTester : XUnitOutputTester, IDisposable
        {
        public ThreadSpinnerTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(ThreadSpinner) + "." + nameof(ThreadSpinner.Wait) + "() => Task")]
        public void Wait()
            {
            // TODO: Implement method test LCore.Threads.ThreadSpinner.Wait
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(ThreadSpinner) + "." + nameof(ThreadSpinner.StopWaiting) + "()")]
        public void StopWaiting()
            {
            // TODO: Implement method test LCore.Threads.ThreadSpinner.StopWaiting
            }

        }
    }

namespace L_Tests.LCore.Numbers
    {
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber))]
    public partial class DecimalNumberTester : XUnitOutputTester, IDisposable
        {
        public DecimalNumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.DecimalNumber.op_Implicit(Decimal) => DecimalNumber")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber) + "." + nameof(DecimalNumber.GetValuePrecision) + "() => Number")]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber) + "." + nameof(DecimalNumber.Add) + "(Decimal, Decimal) => Decimal")]
        public void Add_Decimal_Decimal_Decimal()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber) + "." + nameof(DecimalNumber.Subtract) + "(Decimal, Decimal) => Decimal")]
        public void Subtract_Decimal_Decimal_Decimal()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber) + "." + nameof(DecimalNumber.Multiply) + "(Decimal, Decimal) => Decimal")]
        public void Multiply_Decimal_Decimal_Decimal()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber) + "." + nameof(DecimalNumber.Divide) + "(Decimal, Decimal) => Object")]
        public void Divide_Decimal_Decimal_Object()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber) + "." + nameof(DecimalNumber.New) + "(Decimal) => Number`1<Decimal>")]
        public void New_Decimal_Number_1_Decimal()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber) + "." + nameof(DecimalNumber.ToString) + "() => String")]
        public new void ToString()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.ToString
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber))]
    public partial class DoubleNumberTester : XUnitOutputTester, IDisposable
        {
        public DoubleNumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.DoubleNumber.op_Implicit(Double) => DoubleNumber")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber) + "." + nameof(DoubleNumber.GetValuePrecision) + "() => Number")]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber) + "." + nameof(DoubleNumber.Add) + "(Double, Double) => Double")]
        public void Add_Double_Double_Double()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber) + "." + nameof(DoubleNumber.Subtract) + "(Double, Double) => Double")]
        public void Subtract_Double_Double_Double()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber) + "." + nameof(DoubleNumber.Multiply) + "(Double, Double) => Double")]
        public void Multiply_Double_Double_Double()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber) + "." + nameof(DoubleNumber.Divide) + "(Double, Double) => Object")]
        public void Divide_Double_Double_Object()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber) + "." + nameof(DoubleNumber.New) + "(Double) => Number`1<Double>")]
        public void New_Double_Number_1_Double()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber) + "." + nameof(DoubleNumber.ToString) + "() => String")]
        public new void ToString()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.ToString
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber))]
    public partial class FloatNumberTester : XUnitOutputTester, IDisposable
        {
        public FloatNumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.FloatNumber.op_Implicit(Single) => FloatNumber")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber) + "." + nameof(FloatNumber.GetValuePrecision) + "() => Number")]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber) + "." + nameof(FloatNumber.Add) + "(Single, Single) => Single")]
        public void Add_Single_Single_Single()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber) + "." + nameof(FloatNumber.Subtract) + "(Single, Single) => Single")]
        public void Subtract_Single_Single_Single()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber) + "." + nameof(FloatNumber.Multiply) + "(Single, Single) => Single")]
        public void Multiply_Single_Single_Single()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber) + "." + nameof(FloatNumber.Divide) + "(Single, Single) => Object")]
        public void Divide_Single_Single_Object()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber) + "." + nameof(FloatNumber.New) + "(Single) => Number`1<Single>")]
        public void New_Single_Number_1_Single()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber) + "." + nameof(FloatNumber.ToString) + "() => String")]
        public new void ToString()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.ToString
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(LongNumber))]
    public partial class LongNumberTester : XUnitOutputTester, IDisposable
        {
        public LongNumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.LongNumber.op_Implicit(Int64) => LongNumber")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.LongNumber.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(LongNumber) + "." + nameof(LongNumber.GetValuePrecision) + "() => Number")]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.LongNumber.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(LongNumber) + "." + nameof(LongNumber.Add) + "(Int64, Int64) => Int64")]
        public void Add_Int64_Int64_Int64()
            {
            // TODO: Implement method test LCore.Numbers.LongNumber.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(LongNumber) + "." + nameof(LongNumber.Subtract) + "(Int64, Int64) => Int64")]
        public void Subtract_Int64_Int64_Int64()
            {
            // TODO: Implement method test LCore.Numbers.LongNumber.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(LongNumber) + "." + nameof(LongNumber.Multiply) + "(Int64, Int64) => Int64")]
        public void Multiply_Int64_Int64_Int64()
            {
            // TODO: Implement method test LCore.Numbers.LongNumber.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(LongNumber) + "." + nameof(LongNumber.Divide) + "(Int64, Int64) => Object")]
        public void Divide_Int64_Int64_Object()
            {
            // TODO: Implement method test LCore.Numbers.LongNumber.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(LongNumber) + "." + nameof(LongNumber.New) + "(Int64) => Number`1<Int64>")]
        public void New_Int64_Number_1_Int64()
            {
            // TODO: Implement method test LCore.Numbers.LongNumber.New
            }

        }
    [Trait(Traits.TargetClass, "LCore.Numbers.Number`2")]
    public partial class Number_2Tester : XUnitOutputTester, IDisposable
        {
        public Number_2Tester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`2.op_Implicit(Number`2) => T")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.Number`2.op_Implicit
            }

        }
    [Trait(Traits.TargetClass, "LCore.Numbers.Number`1")]
    public partial class Number_1Tester : XUnitOutputTester, IDisposable
        {
        public Number_1Tester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.op_Division(Number`1, T) => Number")]
        public void op_Division()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.op_Division
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.op_Multiply(Number`1, T) => Number")]
        public void op_Multiply()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.op_Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.op_Subtraction(Number`1, T) => Number")]
        public void op_Subtraction()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.op_Subtraction
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.op_Addition(Number`1, T) => Number")]
        public void op_Addition()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.op_Addition
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Add(Number) => Number")]
        public void Add_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Subtract(Number) => Number")]
        public void Subtract_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Multiply(Number) => Number")]
        public void Multiply_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Divide(Number) => Number")]
        public void Divide_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.New(T) => Number`1")]
        public void New_T_Number_1()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.New
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.New(Object) => Number")]
        public void New_Object_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.New
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.GetValue() => Object")]
        public void GetValue()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.GetValue
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Add(IConvertible) => Number")]
        public void Add_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Subtract(IConvertible) => Number")]
        public void Subtract_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Multiply(IConvertible) => Number")]
        public void Multiply_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Divide(IConvertible) => Number")]
        public void Divide_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Add(T, T) => T")]
        public void Add_T_T_T()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Subtract(T, T) => T")]
        public void Subtract_T_T_T()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Multiply(T, T) => T")]
        public void Multiply_T_T_T()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Divide(T, T) => Object")]
        public void Divide_T_T_Object()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.New() => Number")]
        public void New_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.New
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.CompareTo(Object) => Int32")]
        public void CompareTo()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.CompareTo
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number))]
    public partial class NumberTester : XUnitOutputTester, IDisposable
        {
        public NumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.Equals) + "(Object) => Boolean")]
        public void Equals()
            {
            // TODO: Implement method test LCore.Numbers.Number.Equals
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.ToString) + "() => String")]
        public new void ToString()
            {
            // TODO: Implement method test LCore.Numbers.Number.ToString
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_GreaterThan(Number, IComparable) => Boolean")]
        public void op_GreaterThan()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_GreaterThan
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_LessThan(Number, IComparable) => Boolean")]
        public void op_LessThan()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_LessThan
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_GreaterThanOrEqual(Number, IComparable) => Boolean")]
        public void op_GreaterThanOrEqual()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_GreaterThanOrEqual
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_LessThanOrEqual(Number, IComparable) => Boolean")]
        public void op_LessThanOrEqual()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_LessThanOrEqual
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_Equality(Number, IComparable) => Boolean")]
        public void op_Equality()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_Equality
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_Inequality(Number, IComparable) => Boolean")]
        public void op_Inequality()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_Inequality
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.GetHashCode) + "() => Int32")]
        public new void GetHashCode()
            {
            // TODO: Implement method test LCore.Numbers.Number.GetHashCode
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_Division(Number, IConvertible) => Number")]
        public void op_Division_Number_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_Division
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_Division(Number, Number) => Number")]
        public void op_Division_Number_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_Division
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_Multiply(Number, IConvertible) => Number")]
        public void op_Multiply_Number_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_Multiply(Number, Number) => Number")]
        public void op_Multiply_Number_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_Subtraction(Number, IConvertible) => Number")]
        public void op_Subtraction_Number_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_Subtraction
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_Subtraction(Number, Number) => Number")]
        public void op_Subtraction_Number_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_Subtraction
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_Addition(Number, IConvertible) => Number")]
        public void op_Addition_Number_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_Addition
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_Addition(Number, Number) => Number")]
        public void op_Addition_Number_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_Addition
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.CompareTo) + "(Object) => Int32")]
        public void CompareTo()
            {
            // TODO: Implement method test LCore.Numbers.Number.CompareTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.New) + "(Object) => Number")]
        public void New()
            {
            // TODO: Implement method test LCore.Numbers.Number.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.Divide) + "(Number) => Number")]
        public void Divide_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.Multiply) + "(Number) => Number")]
        public void Multiply_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.Subtract) + "(Number) => Number")]
        public void Subtract_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.Add) + "(Number) => Number")]
        public void Add_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.Divide) + "(IConvertible) => Number")]
        public void Divide_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.Multiply) + "(IConvertible) => Number")]
        public void Multiply_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.Subtract) + "(IConvertible) => Number")]
        public void Subtract_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.Add) + "(IConvertible) => Number")]
        public void Add_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.GetValuePrecision) + "() => Number")]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.Number.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.GetValue) + "() => Object")]
        public void GetValue()
            {
            // TODO: Implement method test LCore.Numbers.Number.GetValue
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ByteNumber))]
    public partial class ByteNumberTester : XUnitOutputTester, IDisposable
        {
        public ByteNumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.ByteNumber.op_Implicit(Byte) => ByteNumber")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.ByteNumber.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ByteNumber) + "." + nameof(ByteNumber.GetValuePrecision) + "() => Number")]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.ByteNumber.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ByteNumber) + "." + nameof(ByteNumber.Add) + "(Byte, Byte) => Byte")]
        public void Add_Byte_Byte_Byte()
            {
            // TODO: Implement method test LCore.Numbers.ByteNumber.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ByteNumber) + "." + nameof(ByteNumber.Subtract) + "(Byte, Byte) => Byte")]
        public void Subtract_Byte_Byte_Byte()
            {
            // TODO: Implement method test LCore.Numbers.ByteNumber.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ByteNumber) + "." + nameof(ByteNumber.Multiply) + "(Byte, Byte) => Byte")]
        public void Multiply_Byte_Byte_Byte()
            {
            // TODO: Implement method test LCore.Numbers.ByteNumber.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ByteNumber) + "." + nameof(ByteNumber.Divide) + "(Byte, Byte) => Object")]
        public void Divide_Byte_Byte_Object()
            {
            // TODO: Implement method test LCore.Numbers.ByteNumber.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ByteNumber) + "." + nameof(ByteNumber.New) + "(Byte) => Number`1<Byte>")]
        public void New_Byte_Number_1_Byte()
            {
            // TODO: Implement method test LCore.Numbers.ByteNumber.New
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(IntNumber))]
    public partial class IntNumberTester : XUnitOutputTester, IDisposable
        {
        public IntNumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.IntNumber.op_Implicit(Int32) => IntNumber")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.IntNumber.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(IntNumber) + "." + nameof(IntNumber.GetValuePrecision) + "() => Number")]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.IntNumber.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(IntNumber) + "." + nameof(IntNumber.Add) + "(Int32, Int32) => Int32")]
        public void Add_Int32_Int32_Int32()
            {
            // TODO: Implement method test LCore.Numbers.IntNumber.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(IntNumber) + "." + nameof(IntNumber.Subtract) + "(Int32, Int32) => Int32")]
        public void Subtract_Int32_Int32_Int32()
            {
            // TODO: Implement method test LCore.Numbers.IntNumber.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(IntNumber) + "." + nameof(IntNumber.Multiply) + "(Int32, Int32) => Int32")]
        public void Multiply_Int32_Int32_Int32()
            {
            // TODO: Implement method test LCore.Numbers.IntNumber.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(IntNumber) + "." + nameof(IntNumber.Divide) + "(Int32, Int32) => Object")]
        public void Divide_Int32_Int32_Object()
            {
            // TODO: Implement method test LCore.Numbers.IntNumber.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(IntNumber) + "." + nameof(IntNumber.New) + "(Int32) => Number`1<Int32>")]
        public void New_Int32_Number_1_Int32()
            {
            // TODO: Implement method test LCore.Numbers.IntNumber.New
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(SByteNumber))]
    public partial class SByteNumberTester : XUnitOutputTester, IDisposable
        {
        public SByteNumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.SByteNumber.op_Implicit(SByte) => SByteNumber")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.SByteNumber.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(SByteNumber) + "." + nameof(SByteNumber.GetValuePrecision) + "() => Number")]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.SByteNumber.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(SByteNumber) + "." + nameof(SByteNumber.Add) + "(SByte, SByte) => SByte")]
        public void Add_SByte_SByte_SByte()
            {
            // TODO: Implement method test LCore.Numbers.SByteNumber.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(SByteNumber) + "." + nameof(SByteNumber.Subtract) + "(SByte, SByte) => SByte")]
        public void Subtract_SByte_SByte_SByte()
            {
            // TODO: Implement method test LCore.Numbers.SByteNumber.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(SByteNumber) + "." + nameof(SByteNumber.Multiply) + "(SByte, SByte) => SByte")]
        public void Multiply_SByte_SByte_SByte()
            {
            // TODO: Implement method test LCore.Numbers.SByteNumber.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(SByteNumber) + "." + nameof(SByteNumber.Divide) + "(SByte, SByte) => Object")]
        public void Divide_SByte_SByte_Object()
            {
            // TODO: Implement method test LCore.Numbers.SByteNumber.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(SByteNumber) + "." + nameof(SByteNumber.New) + "(SByte) => Number`1<SByte>")]
        public void New_SByte_Number_1_SByte()
            {
            // TODO: Implement method test LCore.Numbers.SByteNumber.New
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ShortNumber))]
    public partial class ShortNumberTester : XUnitOutputTester, IDisposable
        {
        public ShortNumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.ShortNumber.op_Implicit(Int16) => ShortNumber")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.ShortNumber.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ShortNumber) + "." + nameof(ShortNumber.GetValuePrecision) + "() => Number")]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.ShortNumber.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ShortNumber) + "." + nameof(ShortNumber.Add) + "(Int16, Int16) => Int16")]
        public void Add_Int16_Int16_Int16()
            {
            // TODO: Implement method test LCore.Numbers.ShortNumber.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ShortNumber) + "." + nameof(ShortNumber.Subtract) + "(Int16, Int16) => Int16")]
        public void Subtract_Int16_Int16_Int16()
            {
            // TODO: Implement method test LCore.Numbers.ShortNumber.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ShortNumber) + "." + nameof(ShortNumber.Multiply) + "(Int16, Int16) => Int16")]
        public void Multiply_Int16_Int16_Int16()
            {
            // TODO: Implement method test LCore.Numbers.ShortNumber.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ShortNumber) + "." + nameof(ShortNumber.Divide) + "(Int16, Int16) => Object")]
        public void Divide_Int16_Int16_Object()
            {
            // TODO: Implement method test LCore.Numbers.ShortNumber.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ShortNumber) + "." + nameof(ShortNumber.New) + "(Int16) => Number`1<Int16>")]
        public void New_Int16_Number_1_Int16()
            {
            // TODO: Implement method test LCore.Numbers.ShortNumber.New
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UIntNumber))]
    public partial class UIntNumberTester : XUnitOutputTester, IDisposable
        {
        public UIntNumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.UIntNumber.op_Implicit(UInt32) => UIntNumber")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.UIntNumber.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UIntNumber) + "." + nameof(UIntNumber.GetValuePrecision) + "() => Number")]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.UIntNumber.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UIntNumber) + "." + nameof(UIntNumber.Add) + "(UInt32, UInt32) => UInt32")]
        public void Add_UInt32_UInt32_UInt32()
            {
            // TODO: Implement method test LCore.Numbers.UIntNumber.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UIntNumber) + "." + nameof(UIntNumber.Subtract) + "(UInt32, UInt32) => UInt32")]
        public void Subtract_UInt32_UInt32_UInt32()
            {
            // TODO: Implement method test LCore.Numbers.UIntNumber.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UIntNumber) + "." + nameof(UIntNumber.Multiply) + "(UInt32, UInt32) => UInt32")]
        public void Multiply_UInt32_UInt32_UInt32()
            {
            // TODO: Implement method test LCore.Numbers.UIntNumber.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UIntNumber) + "." + nameof(UIntNumber.Divide) + "(UInt32, UInt32) => Object")]
        public void Divide_UInt32_UInt32_Object()
            {
            // TODO: Implement method test LCore.Numbers.UIntNumber.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UIntNumber) + "." + nameof(UIntNumber.New) + "(UInt32) => Number`1<UInt32>")]
        public void New_UInt32_Number_1_UInt32()
            {
            // TODO: Implement method test LCore.Numbers.UIntNumber.New
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ULongNumber))]
    public partial class ULongNumberTester : XUnitOutputTester, IDisposable
        {
        public ULongNumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.ULongNumber.op_Implicit(UInt64) => ULongNumber")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.ULongNumber.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ULongNumber) + "." + nameof(ULongNumber.GetValuePrecision) + "() => Number")]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.ULongNumber.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ULongNumber) + "." + nameof(ULongNumber.Add) + "(UInt64, UInt64) => UInt64")]
        public void Add_UInt64_UInt64_UInt64()
            {
            // TODO: Implement method test LCore.Numbers.ULongNumber.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ULongNumber) + "." + nameof(ULongNumber.Subtract) + "(UInt64, UInt64) => UInt64")]
        public void Subtract_UInt64_UInt64_UInt64()
            {
            // TODO: Implement method test LCore.Numbers.ULongNumber.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ULongNumber) + "." + nameof(ULongNumber.Multiply) + "(UInt64, UInt64) => UInt64")]
        public void Multiply_UInt64_UInt64_UInt64()
            {
            // TODO: Implement method test LCore.Numbers.ULongNumber.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ULongNumber) + "." + nameof(ULongNumber.Divide) + "(UInt64, UInt64) => Object")]
        public void Divide_UInt64_UInt64_Object()
            {
            // TODO: Implement method test LCore.Numbers.ULongNumber.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ULongNumber) + "." + nameof(ULongNumber.New) + "(UInt64) => Number`1<UInt64>")]
        public void New_UInt64_Number_1_UInt64()
            {
            // TODO: Implement method test LCore.Numbers.ULongNumber.New
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UShortNumber))]
    public partial class UShortNumberTester : XUnitOutputTester, IDisposable
        {
        public UShortNumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.UShortNumber.op_Implicit(UInt16) => UShortNumber")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.UShortNumber.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UShortNumber) + "." + nameof(UShortNumber.GetValuePrecision) + "() => Number")]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.UShortNumber.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UShortNumber) + "." + nameof(UShortNumber.Add) + "(UInt16, UInt16) => UInt16")]
        public void Add_UInt16_UInt16_UInt16()
            {
            // TODO: Implement method test LCore.Numbers.UShortNumber.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UShortNumber) + "." + nameof(UShortNumber.Subtract) + "(UInt16, UInt16) => UInt16")]
        public void Subtract_UInt16_UInt16_UInt16()
            {
            // TODO: Implement method test LCore.Numbers.UShortNumber.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UShortNumber) + "." + nameof(UShortNumber.Multiply) + "(UInt16, UInt16) => UInt16")]
        public void Multiply_UInt16_UInt16_UInt16()
            {
            // TODO: Implement method test LCore.Numbers.UShortNumber.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UShortNumber) + "." + nameof(UShortNumber.Divide) + "(UInt16, UInt16) => Object")]
        public void Divide_UInt16_UInt16_Object()
            {
            // TODO: Implement method test LCore.Numbers.UShortNumber.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UShortNumber) + "." + nameof(UShortNumber.New) + "(UInt16) => Number`1<UInt16>")]
        public void New_UInt16_Number_1_UInt16()
            {
            // TODO: Implement method test LCore.Numbers.UShortNumber.New
            }

        }
    }

namespace L_Tests.LCore.Extensions
    {
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class LTester : XUnitOutputTester, IDisposable
        {
        public LTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "(Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, U>) => Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, U>")]
        public void F_Func_15_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_U_Func_15_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "(Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, U>) => Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, U>")]
        public void F_Func_16_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_U_Func_16_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "(Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, U>) => Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, U>")]
        public void F_Func_17_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_T16_U_Func_17_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_T16_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "() => Action")]
        public void A_Action()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "() => Action`1<T1>")]
        public void A_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "() => Action`2<T1, T2>")]
        public void A_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "() => Action`3<T1, T2, T3>")]
        public void A_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "() => Action`4<T1, T2, T3, T4>")]
        public void A_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "() => Action`5<T1, T2, T3, T4, T5>")]
        public void A_Action_5_T1_T2_T3_T4_T5()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "() => Action`6<T1, T2, T3, T4, T5, T6>")]
        public void A_Action_6_T1_T2_T3_T4_T5_T6()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "() => Action`7<T1, T2, T3, T4, T5, T6, T7>")]
        public void A_Action_7_T1_T2_T3_T4_T5_T6_T7()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "() => Action`8<T1, T2, T3, T4, T5, T6, T7, T8>")]
        public void A_Action_8_T1_T2_T3_T4_T5_T6_T7_T8()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "() => Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>")]
        public void A_Action_9_T1_T2_T3_T4_T5_T6_T7_T8_T9()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "() => Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>")]
        public void A_Action_10_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "() => Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>")]
        public void A_Action_11_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "() => Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>")]
        public void A_Action_12_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "() => Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>")]
        public void A_Action_13_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "() => Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>")]
        public void A_Action_14_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "() => Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>")]
        public void A_Action_15_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "() => Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>")]
        public void A_Action_16_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_T16()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "() => Func`1<U>")]
        public void F_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "() => Func`2<T1, U>")]
        public void F_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "() => Func`3<T1, T2, U>")]
        public void F_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "() => Func`4<T1, T2, T3, U>")]
        public void F_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "() => Func`5<T1, T2, T3, T4, U>")]
        public void F_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "() => Func`6<T1, T2, T3, T4, T5, U>")]
        public void F_Func_6_T1_T2_T3_T4_T5_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "() => Func`7<T1, T2, T3, T4, T5, T6, U>")]
        public void F_Func_7_T1_T2_T3_T4_T5_T6_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "() => Func`8<T1, T2, T3, T4, T5, T6, T7, U>")]
        public void F_Func_8_T1_T2_T3_T4_T5_T6_T7_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "() => Func`9<T1, T2, T3, T4, T5, T6, T7, T8, U>")]
        public void F_Func_9_T1_T2_T3_T4_T5_T6_T7_T8_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "() => Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, U>")]
        public void F_Func_10_T1_T2_T3_T4_T5_T6_T7_T8_T9_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "() => Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, U>")]
        public void F_Func_11_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "() => Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, U>")]
        public void F_Func_12_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "() => Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, U>")]
        public void F_Func_13_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "() => Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, U>")]
        public void F_Func_14_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "() => Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, U>")]
        public void F_Func_15_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "() => Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, U>")]
        public void F_Func_16_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "() => Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, U>")]
        public void F_Func_17_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_T16_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "(Action) => Action")]
        public void A_Action_Action()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "(Action`1<T1>) => Action`1<T1>")]
        public void A_Action_1_T1_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "(Action`2<T1, T2>) => Action`2<T1, T2>")]
        public void A_Action_2_T1_T2_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "(Action`3<T1, T2, T3>) => Action`3<T1, T2, T3>")]
        public void A_Action_3_T1_T2_T3_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "(Action`4<T1, T2, T3, T4>) => Action`4<T1, T2, T3, T4>")]
        public void A_Action_4_T1_T2_T3_T4_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "(Action`5<T1, T2, T3, T4, T5>) => Action`5<T1, T2, T3, T4, T5>")]
        public void A_Action_5_T1_T2_T3_T4_T5_Action_5_T1_T2_T3_T4_T5()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "(Action`6<T1, T2, T3, T4, T5, T6>) => Action`6<T1, T2, T3, T4, T5, T6>")]
        public void A_Action_6_T1_T2_T3_T4_T5_T6_Action_6_T1_T2_T3_T4_T5_T6()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "(Action`7<T1, T2, T3, T4, T5, T6, T7>) => Action`7<T1, T2, T3, T4, T5, T6, T7>")]
        public void A_Action_7_T1_T2_T3_T4_T5_T6_T7_Action_7_T1_T2_T3_T4_T5_T6_T7()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "(Action`8<T1, T2, T3, T4, T5, T6, T7, T8>) => Action`8<T1, T2, T3, T4, T5, T6, T7, T8>")]
        public void A_Action_8_T1_T2_T3_T4_T5_T6_T7_T8_Action_8_T1_T2_T3_T4_T5_T6_T7_T8()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "(Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>) => Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>")]
        public void A_Action_9_T1_T2_T3_T4_T5_T6_T7_T8_T9_Action_9_T1_T2_T3_T4_T5_T6_T7_T8_T9()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "(Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>) => Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>")]
        public void A_Action_10_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_Action_10_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "(Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>) => Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>")]
        public void A_Action_11_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_Action_11_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "(Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>) => Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>")]
        public void A_Action_12_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_Action_12_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "(Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>) => Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>")]
        public void A_Action_13_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_Action_13_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "(Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>) => Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>")]
        public void A_Action_14_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_Action_14_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "(Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>) => Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>")]
        public void A_Action_15_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_Action_15_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A) + "(Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>) => Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>")]
        public void A_Action_16_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_T16_Action_16_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_T16()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "(Func`1<U>) => Func`1<U>")]
        public void F_Func_1_U_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "(Func`2<T1, U>) => Func`2<T1, U>")]
        public void F_Func_2_T1_U_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "(Func`3<T1, T2, U>) => Func`3<T1, T2, U>")]
        public void F_Func_3_T1_T2_U_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "(Func`4<T1, T2, T3, U>) => Func`4<T1, T2, T3, U>")]
        public void F_Func_4_T1_T2_T3_U_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "(Func`5<T1, T2, T3, T4, U>) => Func`5<T1, T2, T3, T4, U>")]
        public void F_Func_5_T1_T2_T3_T4_U_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "(Func`6<T1, T2, T3, T4, T5, U>) => Func`6<T1, T2, T3, T4, T5, U>")]
        public void F_Func_6_T1_T2_T3_T4_T5_U_Func_6_T1_T2_T3_T4_T5_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "(Func`7<T1, T2, T3, T4, T5, T6, U>) => Func`7<T1, T2, T3, T4, T5, T6, U>")]
        public void F_Func_7_T1_T2_T3_T4_T5_T6_U_Func_7_T1_T2_T3_T4_T5_T6_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "(Func`8<T1, T2, T3, T4, T5, T6, T7, U>) => Func`8<T1, T2, T3, T4, T5, T6, T7, U>")]
        public void F_Func_8_T1_T2_T3_T4_T5_T6_T7_U_Func_8_T1_T2_T3_T4_T5_T6_T7_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "(Func`9<T1, T2, T3, T4, T5, T6, T7, T8, U>) => Func`9<T1, T2, T3, T4, T5, T6, T7, T8, U>")]
        public void F_Func_9_T1_T2_T3_T4_T5_T6_T7_T8_U_Func_9_T1_T2_T3_T4_T5_T6_T7_T8_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "(Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, U>) => Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, U>")]
        public void F_Func_10_T1_T2_T3_T4_T5_T6_T7_T8_T9_U_Func_10_T1_T2_T3_T4_T5_T6_T7_T8_T9_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "(Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, U>) => Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, U>")]
        public void F_Func_11_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_U_Func_11_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "(Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, U>) => Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, U>")]
        public void F_Func_12_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_U_Func_12_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "(Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, U>) => Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, U>")]
        public void F_Func_13_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_U_Func_13_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F) + "(Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, U>) => Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, U>")]
        public void F_Func_14_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_U_Func_14_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_U()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class L_RefTester : XUnitOutputTester, IDisposable
        {
        public L_RefTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ref) + "." + nameof(L.Ref.Constant) + "(String) => MemberInfo")]
        public void Constant()
            {
            // TODO: Implement method test LCore.Extensions.L.Ref.Constant
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ref) + "." + nameof(L.Ref.Constructor) + "(Expression`1<Func`1<T>>) => ConstructorInfo")]
        public void Constructor()
            {
            // TODO: Implement method test LCore.Extensions.L.Ref.Constructor
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ref) + "." + nameof(L.Ref.FindType) + "(String, Assembly[]) => Type")]
        public void FindType()
            {
            // TODO: Implement method test LCore.Extensions.L.Ref.FindType
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ref) + "." + nameof(L.Ref.FindMember) + "(String, Assembly[]) => MemberInfo[]")]
        public void FindMember()
            {
            // TODO: Implement method test LCore.Extensions.L.Ref.FindMember
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ref) + "." + nameof(L.Ref.GetNamespaceTypes) + "(String, Type[]) => Type[]")]
        public void GetNamespaceTypes_String_Type_Type()
            {
            // TODO: Implement method test LCore.Extensions.L.Ref.GetNamespaceTypes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ref) + "." + nameof(L.Ref.GetNamespaceTypes) + "(Type, String, Type[]) => Type[]")]
        public void GetNamespaceTypes_Type_String_Type_Type()
            {
            // TODO: Implement method test LCore.Extensions.L.Ref.GetNamespaceTypes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ref) + "." + nameof(L.Ref.GetNamespaceTypes) + "(Assembly, String, Type[]) => Type[]")]
        public void GetNamespaceTypes_Assembly_String_Type_Type()
            {
            // TODO: Implement method test LCore.Extensions.L.Ref.GetNamespaceTypes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ref) + "." + nameof(L.Ref.Member) + "(Expression`1<Func`2<T, Object>>) => MemberInfo")]
        public void Member()
            {
            // TODO: Implement method test LCore.Extensions.L.Ref.Member
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ref) + "." + nameof(L.Ref.Method) + "(Expression`1<Action`1<T>>) => MethodInfo")]
        public void Method()
            {
            // TODO: Implement method test LCore.Extensions.L.Ref.Method
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ref) + "." + nameof(L.Ref.StaticMethod) + "(Expression`1<Action>) => MethodInfo")]
        public void StaticMethod()
            {
            // TODO: Implement method test LCore.Extensions.L.Ref.StaticMethod
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ref) + "." + nameof(L.Ref.Event) + "(String) => EventInfo")]
        public void Event()
            {
            // TODO: Implement method test LCore.Extensions.L.Ref.Event
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class L_NumTester : XUnitOutputTester, IDisposable
        {
        public L_NumTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Num) + "." + nameof(L.Num.ScientificNotationToNumber) + "(String) => String")]
        public void ScientificNotationToNumber()
            {
            // TODO: Implement method test LCore.Extensions.L.Num.ScientificNotationToNumber
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Num) + "." + nameof(L.Num.NumberTypes))]
        public void NumberTypes()
            {
            // TODO: Implement method test LCore.Extensions.L.Num.NumberTypes
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class L_LoopTester : XUnitOutputTester, IDisposable
        {
        public L_LoopTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.While_T) + "() => Func`3<Action`1<T1>, Func`2<T1, Boolean>, Action`1<T1>>")]
        public void While_T_Func_3_Action_1_T1_Func_2_T1_Boolean_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.While_T
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.While_T) + "() => Func`3<Action`2<T1, T2>, Func`3<T1, T2, Boolean>, Action`2<T1, T2>>")]
        public void While_T_Func_3_Action_2_T1_T2_Func_3_T1_T2_Boolean_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.While_T
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.While_T) + "() => Func`3<Action`3<T1, T2, T3>, Func`4<T1, T2, T3, Boolean>, Action`3<T1, T2, T3>>")]
        public void While_T_Func_3_Action_3_T1_T2_T3_Func_4_T1_T2_T3_Boolean_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.While_T
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.While_T) + "() => Func`3<Action`4<T1, T2, T3, T4>, Func`5<T1, T2, T3, T4, Boolean>, Action`4<T1, T2, T3, T4>>")]
        public void While_T_Func_3_Action_4_T1_T2_T3_T4_Func_5_T1_T2_T3_T4_Boolean_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.While_T
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_DoWhile) + "() => Func`3<Action, Func`1<Boolean>, Action>")]
        public void L_DoWhile()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_DoWhile
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_Until) + "() => Func`3<Func`1<U>, Func`1<Boolean>, Func`1<U>>")]
        public void L_Until()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Until
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_DoUntil) + "() => Func`3<Func`1<U>, Func`1<Boolean>, Func`1<U>>")]
        public void L_DoUntil()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_DoUntil
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_Repeat_uint) + "() => Func`3<Action, UInt32, Action>")]
        public void L_Repeat_uint()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Repeat_uint
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_Repeat_int) + "() => Func`3<Action, Int32, Action>")]
        public void L_Repeat_int()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Repeat_int
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.WhileI_T) + "() => Func`3<Action`2<Int32, T1>, Func`3<Int32, T1, Boolean>, Action`1<T1>>")]
        public void WhileI_T_Func_3_Action_2_Int32_T1_Func_3_Int32_T1_Boolean_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.WhileI_T
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.WhileI_T) + "() => Func`3<Action`3<Int32, T1, T2>, Func`4<Int32, T1, T2, Boolean>, Action`2<T1, T2>>")]
        public void WhileI_T_Func_3_Action_3_Int32_T1_T2_Func_4_Int32_T1_T2_Boolean_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.WhileI_T
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.WhileI_T) + "() => Func`3<Action`4<Int32, T1, T2, T3>, Func`5<Int32, T1, T2, T3, Boolean>, Action`3<T1, T2, T3>>")]
        public void WhileI_T_Func_3_Action_4_Int32_T1_T2_T3_Func_5_Int32_T1_T2_T3_Boolean_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.WhileI_T
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.Until) + "() => Func`3<Func`2<Int32, U>, Func`2<Int32, Boolean>, Func`1<U>>")]
        public void Until_Func_3_Func_2_Int32_U_Func_2_Int32_Boolean_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.Until
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.Until) + "() => Func`3<Func`3<Int32, T1, U>, Func`3<Int32, T1, Boolean>, Func`2<T1, U>>")]
        public void Until_Func_3_Func_3_Int32_T1_U_Func_3_Int32_T1_Boolean_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.Until
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.Until) + "() => Func`3<Func`4<Int32, T1, T2, U>, Func`4<Int32, T1, T2, Boolean>, Func`3<T1, T2, U>>")]
        public void Until_Func_3_Func_4_Int32_T1_T2_U_Func_4_Int32_T1_T2_Boolean_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.Until
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.Until) + "() => Func`3<Func`5<Int32, T1, T2, T3, U>, Func`5<Int32, T1, T2, T3, Boolean>, Func`4<T1, T2, T3, U>>")]
        public void Until_Func_3_Func_5_Int32_T1_T2_T3_U_Func_5_Int32_T1_T2_T3_Boolean_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.Until
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.DoWhile) + "() => Func`3<Action`1<Int32>, Func`2<Int32, Boolean>, Action>")]
        public void DoWhile_Func_3_Action_1_Int32_Func_2_Int32_Boolean_Action()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoWhile
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.DoWhile) + "() => Func`3<Action`2<Int32, T1>, Func`3<Int32, T1, Boolean>, Action`1<T1>>")]
        public void DoWhile_Func_3_Action_2_Int32_T1_Func_3_Int32_T1_Boolean_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoWhile
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.DoWhile) + "() => Func`3<Action`3<Int32, T1, T2>, Func`4<Int32, T1, T2, Boolean>, Action`2<T1, T2>>")]
        public void DoWhile_Func_3_Action_3_Int32_T1_T2_Func_4_Int32_T1_T2_Boolean_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoWhile
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.DoWhile) + "() => Func`3<Action`4<Int32, T1, T2, T3>, Func`5<Int32, T1, T2, T3, Boolean>, Action`3<T1, T2, T3>>")]
        public void DoWhile_Func_3_Action_4_Int32_T1_T2_T3_Func_5_Int32_T1_T2_T3_Boolean_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoWhile
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.DoUntil) + "() => Func`3<Func`2<Int32, U>, Func`2<Int32, Boolean>, Func`1<U>>")]
        public void DoUntil_Func_3_Func_2_Int32_U_Func_2_Int32_Boolean_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoUntil
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.DoUntil) + "() => Func`3<Func`3<Int32, T1, U>, Func`3<Int32, T1, Boolean>, Func`2<T1, U>>")]
        public void DoUntil_Func_3_Func_3_Int32_T1_U_Func_3_Int32_T1_Boolean_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoUntil
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.DoUntil) + "() => Func`3<Func`4<Int32, T1, T2, U>, Func`4<Int32, T1, T2, Boolean>, Func`3<T1, T2, U>>")]
        public void DoUntil_Func_3_Func_4_Int32_T1_T2_U_Func_4_Int32_T1_T2_Boolean_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoUntil
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.DoUntil) + "() => Func`3<Func`5<Int32, T1, T2, T3, U>, Func`5<Int32, T1, T2, T3, Boolean>, Func`4<T1, T2, T3, U>>")]
        public void DoUntil_Func_3_Func_5_Int32_T1_T2_T3_U_Func_5_Int32_T1_T2_T3_Boolean_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoUntil
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_Collect) + "() => Func`3<Func`1<U>, UInt32, Func`1<List`1<U>>>")]
        public void L_Collect_Func_3_Func_1_U_UInt32_Func_1_List_1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Collect
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_Collect) + "() => Func`3<Func`2<T1, U>, UInt32, Func`2<T1, List`1<U>>>")]
        public void L_Collect_Func_3_Func_2_T1_U_UInt32_Func_2_T1_List_1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Collect
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_Collect) + "() => Func`3<Func`3<T1, T2, U>, UInt32, Func`3<T1, T2, List`1<U>>>")]
        public void L_Collect_Func_3_Func_3_T1_T2_U_UInt32_Func_3_T1_T2_List_1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Collect
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_Collect) + "() => Func`3<Func`4<T1, T2, T3, U>, UInt32, Func`4<T1, T2, T3, List`1<U>>>")]
        public void L_Collect_Func_3_Func_4_T1_T2_T3_U_UInt32_Func_4_T1_T2_T3_List_1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Collect
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_Collect) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, UInt32, Func`5<T1, T2, T3, T4, List`1<U>>>")]
        public void L_Collect_Func_3_Func_5_T1_T2_T3_T4_U_UInt32_Func_5_T1_T2_T3_T4_List_1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Collect
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_MergeLoop) + "() => Func`2<Action, Func`2<Int32, Boolean>>")]
        public void L_MergeLoop_Func_2_Action_Func_2_Int32_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_MergeLoop
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_MergeLoop) + "() => Func`2<Action`1<T1>, Func`3<Int32, T1, Boolean>>")]
        public void L_MergeLoop_Func_2_Action_1_T1_Func_3_Int32_T1_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_MergeLoop
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_MergeLoop) + "() => Func`2<Action`2<T1, T2>, Func`4<Int32, T1, T2, Boolean>>")]
        public void L_MergeLoop_Func_2_Action_2_T1_T2_Func_4_Int32_T1_T2_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_MergeLoop
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_MergeLoop) + "() => Func`2<Action`3<T1, T2, T3>, Func`5<Int32, T1, T2, T3, Boolean>>")]
        public void L_MergeLoop_Func_2_Action_3_T1_T2_T3_Func_5_Int32_T1_T2_T3_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_MergeLoop
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_To) + "() => Func`4<Int32, Int32, Action, Action>")]
        public void L_To()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_To
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_ToI) + "() => Func`4<Int32, Int32, Action`1<Int32>, Action>")]
        public void L_ToI()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_ToI
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_For) + "() => Func`4<Int32, Int32, Func`2<Int32, Boolean>, Action>")]
        public void L_For()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_For
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class L_ThreadTester : XUnitOutputTester, IDisposable
        {
        public L_ThreadTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Thread) + "." + nameof(L.Thread.MethodProfileData_Get) + "(String) => MethodProfileData")]
        public void MethodProfileData_Get()
            {
            // TODO: Implement method test LCore.Extensions.L.Thread.MethodProfileData_Get
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Thread) + "." + nameof(L.Thread.MethodProfileData_Remove) + "(String)")]
        public void MethodProfileData_Remove()
            {
            // TODO: Implement method test LCore.Extensions.L.Thread.MethodProfileData_Remove
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Thread) + "." + nameof(L.Thread.MethodProfileData_Add) + "(String, MethodProfileData)")]
        public void MethodProfileData_Add()
            {
            // TODO: Implement method test LCore.Extensions.L.Thread.MethodProfileData_Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Thread) + "." + nameof(L.Thread.MethodProfileData_Has) + "(String) => Boolean")]
        public void MethodProfileData_Has()
            {
            // TODO: Implement method test LCore.Extensions.L.Thread.MethodProfileData_Has
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class L_ObjTester : XUnitOutputTester, IDisposable
        {
        public L_ObjTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Obj) + "." + nameof(L.Obj.As) + "() => Func`2<Object, T>")]
        public void As()
            {
            // TODO: Implement method test LCore.Extensions.L.Obj.As
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Obj) + "." + nameof(L.Obj.Swap) + "(T&, T&)")]
        public void Swap()
            {
            // TODO: Implement method test LCore.Extensions.L.Obj.Swap
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Obj) + "." + nameof(L.Obj.SafeEquals) + "(Object, Object) => Boolean")]
        public void SafeEquals()
            {
            // TODO: Implement method test LCore.Extensions.L.Obj.SafeEquals
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Obj) + "." + nameof(L.Obj.New) + "(Object[]) => T")]
        public void New()
            {
            // TODO: Implement method test LCore.Extensions.L.Obj.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Obj) + "." + nameof(L.Obj.NewRandom) + "(Nullable`1<T>, Nullable`1<T>) => T")]
        public void NewRandom_Nullable_1_T_Nullable_1_T_T()
            {
            // TODO: Implement method test LCore.Extensions.L.Obj.NewRandom
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Obj) + "." + nameof(L.Obj.NewRandom) + "(Type, Object, Object) => Object")]
        public void NewRandom_Type_Object_Object_Object()
            {
            // TODO: Implement method test LCore.Extensions.L.Obj.NewRandom
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Obj) + "." + nameof(L.Obj.IsNull) + "() => Func`2<T, Boolean>")]
        public void IsNull()
            {
            // TODO: Implement method test LCore.Extensions.L.Obj.IsNull
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Obj) + "." + nameof(L.Obj.IsA) + "() => Func`2<Object, Boolean>")]
        public void IsA()
            {
            // TODO: Implement method test LCore.Extensions.L.Obj.IsA
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Obj) + "." + nameof(L.Obj.HasProperty) + "() => Func`3<Object, String, Boolean>")]
        public void HasProperty()
            {
            // TODO: Implement method test LCore.Extensions.L.Obj.HasProperty
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Obj) + "." + nameof(L.Obj.GetProperty) + "() => Func`3<Object, String, Object>")]
        public void GetProperty()
            {
            // TODO: Implement method test LCore.Extensions.L.Obj.GetProperty
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Obj) + "." + nameof(L.Obj.SetProperty) + "() => Action`3<Object, String, Object>")]
        public void SetProperty()
            {
            // TODO: Implement method test LCore.Extensions.L.Obj.SetProperty
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class L_BoolTester : XUnitOutputTester, IDisposable
        {
        public L_BoolTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Bool) + "." + nameof(L.Bool.L_If_A) + "() => Func`3<Func`1<Boolean>, Action, Func`1<Boolean>>")]
        public void L_If_A_Func_3_Func_1_Boolean_Action_Func_1_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Bool) + "." + nameof(L.Bool.L_If_A) + "() => Func`3<Func`2<T1, Boolean>, Action`1<T1>, Func`2<T1, Boolean>>")]
        public void L_If_A_Func_3_Func_2_T1_Boolean_Action_1_T1_Func_2_T1_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Bool) + "." + nameof(L.Bool.L_If_A) + "() => Func`3<Func`3<T1, T2, Boolean>, Action`2<T1, T2>, Func`3<T1, T2, Boolean>>")]
        public void L_If_A_Func_3_Func_3_T1_T2_Boolean_Action_2_T1_T2_Func_3_T1_T2_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Bool) + "." + nameof(L.Bool.L_If_A) + "() => Func`3<Func`4<T1, T2, T3, Boolean>, Action`3<T1, T2, T3>, Func`4<T1, T2, T3, Boolean>>")]
        public void L_If_A_Func_3_Func_4_T1_T2_T3_Boolean_Action_3_T1_T2_T3_Func_4_T1_T2_T3_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Bool) + "." + nameof(L.Bool.L_If_A) + "() => Func`3<Func`5<T1, T2, T3, T4, Boolean>, Action`4<T1, T2, T3, T4>, Func`5<T1, T2, T3, T4, Boolean>>")]
        public void L_If_A_Func_3_Func_5_T1_T2_T3_T4_Boolean_Action_4_T1_T2_T3_T4_Func_5_T1_T2_T3_T4_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Bool) + "." + nameof(L.Bool.L_If_F) + "() => Func`3<Func`1<Boolean>, Func`1<U>, Func`1<U>>")]
        public void L_If_F_Func_3_Func_1_Boolean_Func_1_U_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Bool) + "." + nameof(L.Bool.L_If_F) + "() => Func`3<Func`2<T1, Boolean>, Func`2<T1, U>, Func`2<T1, U>>")]
        public void L_If_F_Func_3_Func_2_T1_Boolean_Func_2_T1_U_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Bool) + "." + nameof(L.Bool.L_If_F) + "() => Func`3<Func`3<T1, T2, Boolean>, Func`3<T1, T2, U>, Func`3<T1, T2, U>>")]
        public void L_If_F_Func_3_Func_3_T1_T2_Boolean_Func_3_T1_T2_U_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Bool) + "." + nameof(L.Bool.L_If_F) + "() => Func`3<Func`4<T1, T2, T3, Boolean>, Func`4<T1, T2, T3, U>, Func`4<T1, T2, T3, U>>")]
        public void L_If_F_Func_3_Func_4_T1_T2_T3_Boolean_Func_4_T1_T2_T3_U_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Bool) + "." + nameof(L.Bool.L_If_F) + "() => Func`3<Func`5<T1, T2, T3, T4, Boolean>, Func`5<T1, T2, T3, T4, U>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_If_F_Func_3_Func_5_T1_T2_T3_T4_Boolean_Func_5_T1_T2_T3_T4_U_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Bool) + "." + nameof(L.Bool.L_IfElse) + "() => Func`4<Func`1<Boolean>, Action, Action, Action>")]
        public void L_IfElse_Func_4_Func_1_Boolean_Action_Action_Action()
            {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_IfElse
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Bool) + "." + nameof(L.Bool.L_IfElse) + "() => Func`4<Func`2<T1, Boolean>, Action`1<T1>, Action`1<T1>, Action`1<T1>>")]
        public void L_IfElse_Func_4_Func_2_T1_Boolean_Action_1_T1_Action_1_T1_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_IfElse
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Bool) + "." + nameof(L.Bool.L_IfElse) + "() => Func`4<Func`3<T1, T2, Boolean>, Action`2<T1, T2>, Action`2<T1, T2>, Action`2<T1, T2>>")]
        public void L_IfElse_Func_4_Func_3_T1_T2_Boolean_Action_2_T1_T2_Action_2_T1_T2_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_IfElse
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Bool) + "." + nameof(L.Bool.L_IfElse) + "() => Func`4<Func`4<T1, T2, T3, Boolean>, Action`3<T1, T2, T3>, Action`3<T1, T2, T3>, Action`3<T1, T2, T3>>")]
        public void L_IfElse_Func_4_Func_4_T1_T2_T3_Boolean_Action_3_T1_T2_T3_Action_3_T1_T2_T3_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_IfElse
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Bool) + "." + nameof(L.Bool.L_IfElse) + "() => Func`4<Func`5<T1, T2, T3, T4, Boolean>, Action`4<T1, T2, T3, T4>, Action`4<T1, T2, T3, T4>, Action`4<T1, T2, T3, T4>>")]
        public void L_IfElse_Func_4_Func_5_T1_T2_T3_T4_Boolean_Action_4_T1_T2_T3_T4_Action_4_T1_T2_T3_T4_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_IfElse
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class L_DateTester : XUnitOutputTester, IDisposable
        {
        public L_DateTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Date) + "." + nameof(L.Date.MonthNumberGetName) + "(Int32) => String")]
        public void MonthNumberGetName()
            {
            // TODO: Implement method test LCore.Extensions.L.Date.MonthNumberGetName
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class L_FileTester : XUnitOutputTester, IDisposable
        {
        public L_FileTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.File) + "." + nameof(L.File.BufferedMove) + "(String, String, Boolean, Int32)")]
        public void BufferedMove()
            {
            // TODO: Implement method test LCore.Extensions.L.File.BufferedMove
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.File) + "." + nameof(L.File.CombinePaths) + "(String[]) => String")]
        public void CombinePaths_String_String()
            {
            // TODO: Implement method test LCore.Extensions.L.File.CombinePaths
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.File) + "." + nameof(L.File.CombinePaths) + "(Char, String[]) => String")]
        public void CombinePaths_Char_String_String()
            {
            // TODO: Implement method test LCore.Extensions.L.File.CombinePaths
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.File) + "." + nameof(L.File.GetFileContents) + "(String) => Byte[]")]
        public void GetFileContents()
            {
            // TODO: Implement method test LCore.Extensions.L.File.GetFileContents
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.File) + "." + nameof(L.File.SafeCopyFile) + "(String, String, Int32, Boolean) => Boolean")]
        public void SafeCopyFile()
            {
            // TODO: Implement method test LCore.Extensions.L.File.SafeCopyFile
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.File) + "." + nameof(L.File.SafeMoveFile) + "(String, String, Int32, Boolean, Boolean) => Boolean")]
        public void SafeMoveFile()
            {
            // TODO: Implement method test LCore.Extensions.L.File.SafeMoveFile
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.File) + "." + nameof(L.File.BufferedMoveProgress))]
        public void BufferedMoveProgress()
            {
            // TODO: Implement method test LCore.Extensions.L.File.BufferedMoveProgress
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class L_StrTester : XUnitOutputTester, IDisposable
        {
        public L_StrTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Str) + "." + nameof(L.Str.Char) + "(String, Int32) => Char")]
        public void Char()
            {
            // TODO: Implement method test LCore.Extensions.L.Str.Char
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Str) + "." + nameof(L.Str.JoinLines) + "(IEnumerable`1<String>, String) => String")]
        public void JoinLines()
            {
            // TODO: Implement method test LCore.Extensions.L.Str.JoinLines
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Str) + "." + nameof(L.Str.CompareNumberString) + "(String, String) => Int32")]
        public void CompareNumberString()
            {
            // TODO: Implement method test LCore.Extensions.L.Str.CompareNumberString
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Str) + "." + nameof(L.Str.NumericalCompare) + "(String, String) => Int32")]
        public void NumericalCompare()
            {
            // TODO: Implement method test LCore.Extensions.L.Str.NumericalCompare
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Str) + "." + nameof(L.Str.Pluralize) + "(String, Int32) => String")]
        public void Pluralize_String_Int32_String()
            {
            // TODO: Implement method test LCore.Extensions.L.Str.Pluralize
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Str) + "." + nameof(L.Str.Pluralize) + "(String, UInt32) => String")]
        public void Pluralize_String_UInt32_String()
            {
            // TODO: Implement method test LCore.Extensions.L.Str.Pluralize
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Str) + "." + nameof(L.Str.RemoveChars) + "(String, Char[]) => String")]
        public void RemoveChars()
            {
            // TODO: Implement method test LCore.Extensions.L.Str.RemoveChars
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Str) + "." + nameof(L.Str.ReplaceDouble) + "(String, Char) => String")]
        public void ReplaceDouble()
            {
            // TODO: Implement method test LCore.Extensions.L.Str.ReplaceDouble
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Str) + "." + nameof(L.Str.Singularize) + "(String) => String")]
        public void Singularize()
            {
            // TODO: Implement method test LCore.Extensions.L.Str.Singularize
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Str) + "." + nameof(L.Str.Surround) + "(String, String, String) => String")]
        public void Surround()
            {
            // TODO: Implement method test LCore.Extensions.L.Str.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Str) + "." + nameof(L.Str.ToS) + "(Object) => String")]
        public void ToS()
            {
            // TODO: Implement method test LCore.Extensions.L.Str.ToS
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class L_LogicTester : XUnitOutputTester, IDisposable
        {
        public L_LogicTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.New) + "() => Func`3<T1, T2, U>")]
        public void New_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.New) + "() => Func`4<T1, T2, T3, U>")]
        public void New_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.New) + "() => Func`5<T1, T2, T3, T4, U>")]
        public void New_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "() => Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>")]
        public void Action_Action_10_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "() => Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>")]
        public void Action_Action_11_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "() => Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>")]
        public void Action_Action_12_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "() => Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>")]
        public void Action_Action_13_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "() => Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>")]
        public void Action_Action_14_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "() => Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>")]
        public void Action_Action_15_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "() => Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>")]
        public void Action_Action_16_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_T16()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do) + "() => Func`1<U>")]
        public void Do_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do) + "() => Func`2<T1, U>")]
        public void Do_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do) + "() => Func`3<T1, T2, U>")]
        public void Do_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do) + "() => Func`4<T1, T2, T3, U>")]
        public void Do_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do) + "() => Func`5<T1, T2, T3, T4, U>")]
        public void Do_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do) + "() => Func`6<T1, T2, T3, T4, T5, U>")]
        public void Do_Func_6_T1_T2_T3_T4_T5_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do) + "() => Func`7<T1, T2, T3, T4, T5, T6, U>")]
        public void Do_Func_7_T1_T2_T3_T4_T5_T6_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do) + "() => Func`8<T1, T2, T3, T4, T5, T6, T7, U>")]
        public void Do_Func_8_T1_T2_T3_T4_T5_T6_T7_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do) + "() => Func`9<T1, T2, T3, T4, T5, T6, T7, T8, U>")]
        public void Do_Func_9_T1_T2_T3_T4_T5_T6_T7_T8_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do) + "() => Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, U>")]
        public void Do_Func_10_T1_T2_T3_T4_T5_T6_T7_T8_T9_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do) + "() => Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, U>")]
        public void Do_Func_11_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do) + "() => Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, U>")]
        public void Do_Func_12_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do) + "() => Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, U>")]
        public void Do_Func_13_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do) + "() => Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, U>")]
        public void Do_Func_14_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do) + "() => Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, U>")]
        public void Do_Func_15_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do) + "() => Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, U>")]
        public void Do_Func_16_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do) + "() => Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, U>")]
        public void Do_Func_17_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_T16_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "(Action) => Action")]
        public void Action_Action_Action()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "(Action`1<T1>) => Action`1<T1>")]
        public void Action_Action_1_T1_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "(Action`2<T1, T2>) => Action`2<T1, T2>")]
        public void Action_Action_2_T1_T2_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "(Action`3<T1, T2, T3>) => Action`3<T1, T2, T3>")]
        public void Action_Action_3_T1_T2_T3_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "(Action`4<T1, T2, T3, T4>) => Action`4<T1, T2, T3, T4>")]
        public void Action_Action_4_T1_T2_T3_T4_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "(Action`5<T1, T2, T3, T4, T5>) => Action`5<T1, T2, T3, T4, T5>")]
        public void Action_Action_5_T1_T2_T3_T4_T5_Action_5_T1_T2_T3_T4_T5()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "(Action`6<T1, T2, T3, T4, T5, T6>) => Action`6<T1, T2, T3, T4, T5, T6>")]
        public void Action_Action_6_T1_T2_T3_T4_T5_T6_Action_6_T1_T2_T3_T4_T5_T6()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "(Action`7<T1, T2, T3, T4, T5, T6, T7>) => Action`7<T1, T2, T3, T4, T5, T6, T7>")]
        public void Action_Action_7_T1_T2_T3_T4_T5_T6_T7_Action_7_T1_T2_T3_T4_T5_T6_T7()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "(Action`8<T1, T2, T3, T4, T5, T6, T7, T8>) => Action`8<T1, T2, T3, T4, T5, T6, T7, T8>")]
        public void Action_Action_8_T1_T2_T3_T4_T5_T6_T7_T8_Action_8_T1_T2_T3_T4_T5_T6_T7_T8()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "(Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>) => Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>")]
        public void Action_Action_9_T1_T2_T3_T4_T5_T6_T7_T8_T9_Action_9_T1_T2_T3_T4_T5_T6_T7_T8_T9()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "(Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>) => Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>")]
        public void Action_Action_10_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_Action_10_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "(Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>) => Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>")]
        public void Action_Action_11_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_Action_11_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "(Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>) => Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>")]
        public void Action_Action_12_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_Action_12_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "(Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>) => Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>")]
        public void Action_Action_13_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_Action_13_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "(Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>) => Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>")]
        public void Action_Action_14_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_Action_14_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "(Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>) => Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>")]
        public void Action_Action_15_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_Action_15_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "(Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>) => Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>")]
        public void Action_Action_16_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_T16_Action_16_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_T16()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function) + "(Func`1<U>) => Func`1<U>")]
        public void Function_Func_1_U_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function) + "(Func`2<T1, U>) => Func`2<T1, U>")]
        public void Function_Func_2_T1_U_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function) + "(Func`3<T1, T2, U>) => Func`3<T1, T2, U>")]
        public void Function_Func_3_T1_T2_U_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function) + "(Func`4<T1, T2, T3, U>) => Func`4<T1, T2, T3, U>")]
        public void Function_Func_4_T1_T2_T3_U_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function) + "(Func`5<T1, T2, T3, T4, U>) => Func`5<T1, T2, T3, T4, U>")]
        public void Function_Func_5_T1_T2_T3_T4_U_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function) + "(Func`6<T1, T2, T3, T4, T5, U>) => Func`6<T1, T2, T3, T4, T5, U>")]
        public void Function_Func_6_T1_T2_T3_T4_T5_U_Func_6_T1_T2_T3_T4_T5_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function) + "(Func`7<T1, T2, T3, T4, T5, T6, U>) => Func`7<T1, T2, T3, T4, T5, T6, U>")]
        public void Function_Func_7_T1_T2_T3_T4_T5_T6_U_Func_7_T1_T2_T3_T4_T5_T6_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function) + "(Func`8<T1, T2, T3, T4, T5, T6, T7, U>) => Func`8<T1, T2, T3, T4, T5, T6, T7, U>")]
        public void Function_Func_8_T1_T2_T3_T4_T5_T6_T7_U_Func_8_T1_T2_T3_T4_T5_T6_T7_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function) + "(Func`9<T1, T2, T3, T4, T5, T6, T7, T8, U>) => Func`9<T1, T2, T3, T4, T5, T6, T7, T8, U>")]
        public void Function_Func_9_T1_T2_T3_T4_T5_T6_T7_T8_U_Func_9_T1_T2_T3_T4_T5_T6_T7_T8_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function) + "(Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, U>) => Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, U>")]
        public void Function_Func_10_T1_T2_T3_T4_T5_T6_T7_T8_T9_U_Func_10_T1_T2_T3_T4_T5_T6_T7_T8_T9_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function) + "(Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, U>) => Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, U>")]
        public void Function_Func_11_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_U_Func_11_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function) + "(Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, U>) => Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, U>")]
        public void Function_Func_12_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_U_Func_12_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function) + "(Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, U>) => Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, U>")]
        public void Function_Func_13_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_U_Func_13_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function) + "(Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, U>) => Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, U>")]
        public void Function_Func_14_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_U_Func_14_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function) + "(Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, U>) => Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, U>")]
        public void Function_Func_15_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_U_Func_15_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function) + "(Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, U>) => Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, U>")]
        public void Function_Func_16_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_U_Func_16_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function) + "(Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, U>) => Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, U>")]
        public void Function_Func_17_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_T16_U_Func_17_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_T16_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Return) + "() => Func`1<U>")]
        public void Return_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Return
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Return) + "(U) => Func`1<U>")]
        public void Return_U_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Return
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Pass) + "() => Func`2<T1, T1>")]
        public void Pass()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Pass
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.New) + "(Object[]) => Func`1<U>")]
        public void New_Object_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.New) + "() => Func`1<U>")]
        public void New_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.New) + "() => Func`2<T1, U>")]
        public void New_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_F2) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Func`3[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_F2_Func_3_Func_5_T1_T2_T3_T4_U_Func_3_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_F3) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Func`2[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_F3_Func_3_Func_5_T1_T2_T3_T4_U_Func_2_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_F4) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Func`1[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_F4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge) + "() => Func`3<Action, Action, Action>")]
        public void L_Merge()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_A_F) + "() => Func`3<Action, Func`1<U>, Func`1<U>>")]
        public void L_Merge_A_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_A_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F_A) + "() => Func`3<Func`1<U>, Action, Func`1<U>>")]
        public void L_Merge_F_A()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F_A1) + "() => Func`3<Func`1<U>, Action`1<T1>, Func`2<T1, U>>")]
        public void L_Merge_F_A1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A1
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F_A2) + "() => Func`3<Func`1<U>, Action`2<T1, T2>, Func`3<T1, T2, U>>")]
        public void L_Merge_F_A2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F_A3) + "() => Func`3<Func`1<U>, Action`3<T1, T2, T3>, Func`4<T1, T2, T3, U>>")]
        public void L_Merge_F_A3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F_A4) + "() => Func`3<Func`1<U>, Action`4<T1, T2, T3, T4>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Merge_F_A4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F1_A) + "() => Func`3<Func`2<T1, U>, Action, Func`2<T1, U>>")]
        public void L_Merge_F1_A()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F1_A1) + "() => Func`3<Func`2<T1, U>, Action`1<T2>, Func`3<T1, T2, U>>")]
        public void L_Merge_F1_A1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_A1
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F1_A2) + "() => Func`3<Func`2<T1, U>, Action`2<T2, T3>, Func`4<T1, T2, T3, U>>")]
        public void L_Merge_F1_A2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_A2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F1_A3) + "() => Func`3<Func`2<T1, U>, Action`3<T2, T3, T4>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Merge_F1_A3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_A3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F2_A) + "() => Func`3<Func`3<T1, T2, U>, Action, Func`3<T1, T2, U>>")]
        public void L_Merge_F2_A()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F2_A1) + "() => Func`3<Func`3<T1, T2, U>, Action`1<T3>, Func`4<T1, T2, T3, U>>")]
        public void L_Merge_F2_A1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_A1
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F2_A2) + "() => Func`3<Func`3<T1, T2, U>, Action`2<T3, T4>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Merge_F2_A2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_A2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F3_A) + "() => Func`3<Func`4<T1, T2, T3, U>, Action, Func`4<T1, T2, T3, U>>")]
        public void L_Merge_F3_A_Func_3_Func_4_T1_T2_T3_U_Action_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F3_A1) + "() => Func`3<Func`4<T1, T2, T3, U>, Action`1<T4>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Merge_F3_A1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_A1
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F3_A) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Action, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Merge_F3_A_Func_3_Func_5_T1_T2_T3_T4_U_Action_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F_F) + "() => Func`3<Func`1<U>, Func`1<U>, Func`1<U>>")]
        public void L_Merge_F_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F_F1) + "() => Func`3<Func`1<U>, Func`2<T1, U>, Func`2<T1, U>>")]
        public void L_Merge_F_F1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F1
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F_F2) + "() => Func`3<Func`1<U>, Func`3<T1, T2, U>, Func`3<T1, T2, U>>")]
        public void L_Merge_F_F2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F_F3) + "() => Func`3<Func`1<U>, Func`4<T1, T2, T3, U>, Func`4<T1, T2, T3, U>>")]
        public void L_Merge_F_F3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F_F4) + "() => Func`3<Func`1<U>, Func`5<T1, T2, T3, T4, U>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Merge_F_F4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F1_F) + "() => Func`3<Func`2<T1, U>, Func`1<U>, Func`2<T1, U>>")]
        public void L_Merge_F1_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F1_F1) + "() => Func`3<Func`2<T1, U>, Func`2<T3, U>, Func`3<T1, T3, U>>")]
        public void L_Merge_F1_F1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_F1
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F1_F2) + "() => Func`3<Func`2<T1, U>, Func`3<T3, T4, U>, Func`4<T1, T3, T4, U>>")]
        public void L_Merge_F1_F2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_F2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F1_F3) + "() => Func`3<Func`2<T1, U>, Func`4<T2, T3, T4, U>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Merge_F1_F3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_F3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F2_F) + "() => Func`3<Func`3<T1, T2, U>, Func`1<U>, Func`3<T1, T2, U>>")]
        public void L_Merge_F2_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F2_F1) + "() => Func`3<Func`3<T1, T2, U>, Func`2<T4, U>, Func`4<T1, T2, T4, U>>")]
        public void L_Merge_F2_F1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_F1
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F2_F2) + "() => Func`3<Func`3<T1, T2, U>, Func`3<T3, T4, U>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Merge_F2_F2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_F2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F3_F) + "() => Func`3<Func`4<T1, T2, T3, U>, Func`1<U>, Func`4<T1, T2, T3, U>>")]
        public void L_Merge_F3_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F3_F1) + "() => Func`3<Func`4<T1, T2, T3, U>, Func`2<T4, U>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Merge_F3_F1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_F1
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F4_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Func`1<U>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Merge_F4_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F4_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_A) + "() => Func`3<Action`1<T1>, T1, Action>")]
        public void L_Supply_A_Func_3_Action_1_T1_T1_Action()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_A) + "() => Func`3<Action`2<T1, T2>, T1, Action`1<T2>>")]
        public void L_Supply_A_Func_3_Action_2_T1_T2_T1_Action_1_T2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_A2) + "() => Func`3<Action`2<T1, T2>, T2, Action`1<T1>>")]
        public void L_Supply_A2_Func_3_Action_2_T1_T2_T2_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_A) + "() => Func`3<Action`3<T1, T2, T3>, T1, Action`2<T2, T3>>")]
        public void L_Supply_A_Func_3_Action_3_T1_T2_T3_T1_Action_2_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_A2) + "() => Func`3<Action`3<T1, T2, T3>, T2, Action`2<T1, T3>>")]
        public void L_Supply_A2_Func_3_Action_3_T1_T2_T3_T2_Action_2_T1_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_A3) + "() => Func`3<Action`3<T1, T2, T3>, T3, Action`2<T1, T2>>")]
        public void L_Supply_A3_Func_3_Action_3_T1_T2_T3_T3_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, T1, Action`3<T2, T3, T4>>")]
        public void L_Supply_A_Func_3_Action_4_T1_T2_T3_T4_T1_Action_3_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_A2) + "() => Func`3<Action`4<T1, T2, T3, T4>, T2, Action`3<T1, T3, T4>>")]
        public void L_Supply_A2_Func_3_Action_4_T1_T2_T3_T4_T2_Action_3_T1_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_A3) + "() => Func`3<Action`4<T1, T2, T3, T4>, T3, Action`3<T1, T2, T4>>")]
        public void L_Supply_A3_Func_3_Action_4_T1_T2_T3_T4_T3_Action_3_T1_T2_T4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_A4) + "() => Func`3<Action`4<T1, T2, T3, T4>, T4, Action`3<T1, T2, T3>>")]
        public void L_Supply_A4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_F) + "() => Func`3<Func`2<T1, U>, T1, Func`1<U>>")]
        public void L_Supply_F_Func_3_Func_2_T1_U_T1_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_F) + "() => Func`3<Func`3<T1, T2, U>, T1, Func`2<T2, U>>")]
        public void L_Supply_F_Func_3_Func_3_T1_T2_U_T1_Func_2_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_F2) + "() => Func`3<Func`3<T1, T2, U>, T2, Func`2<T1, U>>")]
        public void L_Supply_F2_Func_3_Func_3_T1_T2_U_T2_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_F) + "() => Func`3<Func`4<T1, T2, T3, U>, T1, Func`3<T2, T3, U>>")]
        public void L_Supply_F_Func_3_Func_4_T1_T2_T3_U_T1_Func_3_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_F2) + "() => Func`3<Func`4<T1, T2, T3, U>, T2, Func`3<T1, T3, U>>")]
        public void L_Supply_F2_Func_3_Func_4_T1_T2_T3_U_T2_Func_3_T1_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_F3) + "() => Func`3<Func`4<T1, T2, T3, U>, T3, Func`3<T1, T2, U>>")]
        public void L_Supply_F3_Func_3_Func_4_T1_T2_T3_U_T3_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, T1, Func`4<T2, T3, T4, U>>")]
        public void L_Supply_F_Func_3_Func_5_T1_T2_T3_T4_U_T1_Func_4_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_F2) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, T2, Func`4<T1, T3, T4, U>>")]
        public void L_Supply_F2_Func_3_Func_5_T1_T2_T3_T4_U_T2_Func_4_T1_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_F3) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, T3, Func`4<T1, T2, T4, U>>")]
        public void L_Supply_F3_Func_3_Func_5_T1_T2_T3_T4_U_T3_Func_4_T1_T2_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_F4) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, T4, Func`4<T1, T2, T3, U>>")]
        public void L_Supply_F4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "() => Action`1<T1>")]
        public void Action_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "() => Action`2<T1, T2>")]
        public void Action_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "() => Action`3<T1, T2, T3>")]
        public void Action_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "() => Action`4<T1, T2, T3, T4>")]
        public void Action_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "() => Action`5<T1, T2, T3, T4, T5>")]
        public void Action_Action_5_T1_T2_T3_T4_T5()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "() => Action`6<T1, T2, T3, T4, T5, T6>")]
        public void Action_Action_6_T1_T2_T3_T4_T5_T6()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "() => Action`7<T1, T2, T3, T4, T5, T6, T7>")]
        public void Action_Action_7_T1_T2_T3_T4_T5_T6_T7()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "() => Action`8<T1, T2, T3, T4, T5, T6, T7, T8>")]
        public void Action_Action_8_T1_T2_T3_T4_T5_T6_T7_T8()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action) + "() => Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>")]
        public void Action_Action_9_T1_T2_T3_T4_T5_T6_T7_T8_T9()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Cast_A) + "() => Func`2<Action`3<T1, T2, T3>, Action`3<U1, U2, U3>>")]
        public void L_Cast_A_Func_2_Action_3_T1_T2_T3_Action_3_U1_U2_U3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Cast_A) + "() => Func`2<Action`4<T1, T2, T3, T4>, Action`4<U1, U2, U3, U4>>")]
        public void L_Cast_A_Func_2_Action_4_T1_T2_T3_T4_Action_4_U1_U2_U3_U4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Cast_F) + "() => Func`2<Func`1<U1>, Func`1<U2>>")]
        public void L_Cast_F_Func_2_Func_1_U1_Func_1_U2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Cast_F) + "() => Func`2<Func`2<T1, U1>, Func`2<T2, U2>>")]
        public void L_Cast_F_Func_2_Func_2_T1_U1_Func_2_T2_U2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Cast_F) + "() => Func`2<Func`3<T1, T2, U1>, Func`3<T3, T4, U2>>")]
        public void L_Cast_F_Func_2_Func_3_T1_T2_U1_Func_3_T3_T4_U2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Cast_F) + "() => Func`2<Func`4<T1, T2, T3, U1>, Func`4<T4, T5, T6, U2>>")]
        public void L_Cast_F_Func_2_Func_4_T1_T2_T3_U1_Func_4_T4_T5_T6_U2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Cast_F) + "() => Func`2<Func`5<T1, T2, T3, T4, U1>, Func`5<T5, T6, T7, T8, U2>>")]
        public void L_Cast_F_Func_2_Func_5_T1_T2_T3_T4_U1_Func_5_T5_T6_T7_T8_U2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Then_A) + "() => Func`3<Action, Action[], Action>")]
        public void Then_A_Func_3_Action_Action_Action()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Then_A) + "() => Func`3<Action`1<T1>, Action`1[], Action`1<T1>>")]
        public void Then_A_Func_3_Action_1_T1_Action_1_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Then_A) + "() => Func`3<Action`2<T1, T2>, Action`2[], Action`2<T1, T2>>")]
        public void Then_A_Func_3_Action_2_T1_T2_Action_2_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Then_A) + "() => Func`3<Action`3<T1, T2, T3>, Action`3[], Action`3<T1, T2, T3>>")]
        public void Then_A_Func_3_Action_3_T1_T2_T3_Action_3_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Then_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, Action`4[], Action`4<T1, T2, T3, T4>>")]
        public void Then_A_Func_3_Action_4_T1_T2_T3_T4_Action_4_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Then_A_F) + "() => Func`3<Action, Func`1[], Func`1<U>>")]
        public void Then_A_F_Func_3_Action_Func_1_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Then_A_F) + "() => Func`3<Action`1<T1>, Func`2[], Func`2<T1, U>>")]
        public void Then_A_F_Func_3_Action_1_T1_Func_2_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Then_A_F) + "() => Func`3<Action`2<T1, T2>, Func`3[], Func`3<T1, T2, U>>")]
        public void Then_A_F_Func_3_Action_2_T1_T2_Func_3_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Then_A_F) + "() => Func`3<Action`3<T1, T2, T3>, Func`4[], Func`4<T1, T2, T3, U>>")]
        public void Then_A_F_Func_3_Action_3_T1_T2_T3_Func_4_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Then_A_F) + "() => Func`3<Action`4<T1, T2, T3, T4>, Func`5[], Func`5<T1, T2, T3, T4, U>>")]
        public void Then_A_F_Func_3_Action_4_T1_T2_T3_T4_Func_5_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Then_F) + "() => Func`3<Func`1<U>, Action[], Func`1<U>>")]
        public void Then_F_Func_3_Func_1_U_Action_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Then_F) + "() => Func`3<Func`2<T1, U>, Action`1[], Func`2<T1, U>>")]
        public void Then_F_Func_3_Func_2_T1_U_Action_1_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Then_F) + "() => Func`3<Func`3<T1, T2, U>, Action`2[], Func`3<T1, T2, U>>")]
        public void Then_F_Func_3_Func_3_T1_T2_U_Action_2_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Then_F) + "() => Func`3<Func`4<T1, T2, T3, U>, Action`3[], Func`4<T1, T2, T3, U>>")]
        public void Then_F_Func_3_Func_4_T1_T2_T3_U_Action_3_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Then_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Action`4[], Func`5<T1, T2, T3, T4, U>>")]
        public void Then_F_Func_3_Func_5_T1_T2_T3_T4_U_Action_4_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Then_F_F) + "() => Func`3<Func`1<U>, Func`1[], Func`1<U>>")]
        public void L_Then_F_F_Func_3_Func_1_U_Func_1_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Then_F_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Then_F_F) + "() => Func`3<Func`2<T1, U>, Func`2[], Func`2<T1, U>>")]
        public void L_Then_F_F_Func_3_Func_2_T1_U_Func_2_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Then_F_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Then_F_F) + "() => Func`3<Func`3<T1, T2, U>, Func`3[], Func`3<T1, T2, U>>")]
        public void L_Then_F_F_Func_3_Func_3_T1_T2_U_Func_3_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Then_F_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Then_F_F) + "() => Func`3<Func`4<T1, T2, T3, U>, Func`4[], Func`4<T1, T2, T3, U>>")]
        public void L_Then_F_F_Func_3_Func_4_T1_T2_T3_U_Func_4_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Then_F_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Then_F_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Func`5[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_Then_F_F_Func_3_Func_5_T1_T2_T3_T4_U_Func_5_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Then_F_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A) + "() => Func`3<Action`1<T1>, Action[], Action`1<T1>>")]
        public void L_ThenMissing_A_Func_3_Action_1_T1_Action_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A) + "() => Func`3<Action`2<T1, T2>, Action`1[], Action`2<T1, T2>>")]
        public void L_ThenMissing_A_Func_3_Action_2_T1_T2_Action_1_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A2) + "() => Func`3<Action`2<T1, T2>, Action[], Action`2<T1, T2>>")]
        public void L_ThenMissing_A2_Func_3_Action_2_T1_T2_Action_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A) + "() => Func`3<Action`3<T1, T2, T3>, Action`2[], Action`3<T1, T2, T3>>")]
        public void L_ThenMissing_A_Func_3_Action_3_T1_T2_T3_Action_2_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A2) + "() => Func`3<Action`3<T1, T2, T3>, Action`1[], Action`3<T1, T2, T3>>")]
        public void L_ThenMissing_A2_Func_3_Action_3_T1_T2_T3_Action_1_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A3) + "() => Func`3<Action`3<T1, T2, T3>, Action[], Action`3<T1, T2, T3>>")]
        public void L_ThenMissing_A3_Func_3_Action_3_T1_T2_T3_Action_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, Action`3[], Action`4<T1, T2, T3, T4>>")]
        public void L_ThenMissing_A_Func_3_Action_4_T1_T2_T3_T4_Action_3_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A2) + "() => Func`3<Action`4<T1, T2, T3, T4>, Action`2[], Action`4<T1, T2, T3, T4>>")]
        public void L_ThenMissing_A2_Func_3_Action_4_T1_T2_T3_T4_Action_2_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A3) + "() => Func`3<Action`4<T1, T2, T3, T4>, Action`1[], Action`4<T1, T2, T3, T4>>")]
        public void L_ThenMissing_A3_Func_3_Action_4_T1_T2_T3_T4_Action_1_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A4) + "() => Func`3<Action`4<T1, T2, T3, T4>, Action[], Action`4<T1, T2, T3, T4>>")]
        public void L_ThenMissing_A4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A_F) + "() => Func`3<Action`1<T1>, Func`1[], Func`2<T1, U>>")]
        public void L_ThenMissing_A_F_Func_3_Action_1_T1_Func_1_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A_F) + "() => Func`3<Action`2<T1, T2>, Func`2[], Func`3<T1, T2, U>>")]
        public void L_ThenMissing_A_F_Func_3_Action_2_T1_T2_Func_2_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A_F) + "() => Func`3<Action`3<T1, T2, T3>, Func`3[], Func`4<T1, T2, T3, U>>")]
        public void L_ThenMissing_A_F_Func_3_Action_3_T1_T2_T3_Func_3_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A_F2) + "() => Func`3<Action`2<T1, T2>, Func`1[], Func`3<T1, T2, U>>")]
        public void L_ThenMissing_A_F2_Func_3_Action_2_T1_T2_Func_1_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A_F3) + "() => Func`3<Action`3<T1, T2, T3>, Func`1[], Func`4<T1, T2, T3, U>>")]
        public void L_ThenMissing_A_F3_Func_3_Action_3_T1_T2_T3_Func_1_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A_F2) + "() => Func`3<Action`3<T1, T2, T3>, Func`2[], Func`4<T1, T2, T3, U>>")]
        public void L_ThenMissing_A_F2_Func_3_Action_3_T1_T2_T3_Func_2_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A_F) + "() => Func`3<Action`4<T1, T2, T3, T4>, Func`4[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_A_F_Func_3_Action_4_T1_T2_T3_T4_Func_4_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A_F2) + "() => Func`3<Action`4<T1, T2, T3, T4>, Func`3[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_A_F2_Func_3_Action_4_T1_T2_T3_T4_Func_3_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A_F3) + "() => Func`3<Action`4<T1, T2, T3, T4>, Func`2[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_A_F3_Func_3_Action_4_T1_T2_T3_T4_Func_2_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A_F4) + "() => Func`3<Action`4<T1, T2, T3, T4>, Func`1[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_A_F4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_A) + "() => Func`3<Func`2<T1, U>, Action[], Func`2<T1, U>>")]
        public void L_ThenMissing_F_A_Func_3_Func_2_T1_U_Action_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_A) + "() => Func`3<Func`3<T1, T2, U>, Action`1[], Func`3<T1, T2, U>>")]
        public void L_ThenMissing_F_A_Func_3_Func_3_T1_T2_U_Action_1_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_A2) + "() => Func`3<Func`3<T1, T2, U>, Action[], Func`3<T1, T2, U>>")]
        public void L_ThenMissing_F_A2_Func_3_Func_3_T1_T2_U_Action_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_A) + "() => Func`3<Func`4<T1, T2, T3, U>, Action`2[], Func`4<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_A_Func_3_Func_4_T1_T2_T3_U_Action_2_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_A2) + "() => Func`3<Func`4<T1, T2, T3, U>, Action`1[], Func`4<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_A2_Func_3_Func_4_T1_T2_T3_U_Action_1_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_A3) + "() => Func`3<Func`4<T1, T2, T3, U>, Action[], Func`4<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_A3_Func_3_Func_4_T1_T2_T3_U_Action_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_A) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Action`3[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_A_Func_3_Func_5_T1_T2_T3_T4_U_Action_3_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_A2) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Action`2[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_A2_Func_3_Func_5_T1_T2_T3_T4_U_Action_2_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_A3) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Action`1[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_A3_Func_3_Func_5_T1_T2_T3_T4_U_Action_1_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_A4) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Action[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_A4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_F) + "() => Func`3<Func`2<T1, U>, Func`1[], Func`2<T1, U>>")]
        public void L_ThenMissing_F_F_Func_3_Func_2_T1_U_Func_1_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_F) + "() => Func`3<Func`3<T1, T2, U>, Func`2[], Func`3<T1, T2, U>>")]
        public void L_ThenMissing_F_F_Func_3_Func_3_T1_T2_U_Func_2_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_F2) + "() => Func`3<Func`3<T1, T2, U>, Func`1[], Func`3<T1, T2, U>>")]
        public void L_ThenMissing_F_F2_Func_3_Func_3_T1_T2_U_Func_1_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_F2) + "() => Func`3<Func`4<T1, T2, T3, U>, Func`2[], Func`4<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_F2_Func_3_Func_4_T1_T2_T3_U_Func_2_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_F3) + "() => Func`3<Func`4<T1, T2, T3, U>, Func`1[], Func`4<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_F3_Func_3_Func_4_T1_T2_T3_U_Func_1_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_F) + "() => Func`3<Func`4<T1, T2, T3, U>, Func`3[], Func`4<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_F_Func_3_Func_4_T1_T2_T3_U_Func_3_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Func`4[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_F_Func_3_Func_5_T1_T2_T3_T4_U_Func_4_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Defaults_A) + "() => Func`4<Action`2<T1, T2>, T1, T2, Action`2<T1, T2>>")]
        public void L_Defaults_A_Func_4_Action_2_T1_T2_T1_T2_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Defaults_A) + "() => Func`5<Action`3<T1, T2, T3>, T1, T2, T3, Action`3<T1, T2, T3>>")]
        public void L_Defaults_A_Func_5_Action_3_T1_T2_T3_T1_T2_T3_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Defaults_A) + "() => Func`6<Action`4<T1, T2, T3, T4>, T1, T2, T3, T4, Action`4<T1, T2, T3, T4>>")]
        public void L_Defaults_A_Func_6_Action_4_T1_T2_T3_T4_T1_T2_T3_T4_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Defaults_F) + "() => Func`4<Func`3<T1, T2, U>, T1, T2, Func`3<T1, T2, U>>")]
        public void L_Defaults_F_Func_4_Func_3_T1_T2_U_T1_T2_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Defaults_F) + "() => Func`5<Func`4<T1, T2, T3, U>, T1, T2, T3, Func`4<T1, T2, T3, U>>")]
        public void L_Defaults_F_Func_5_Func_4_T1_T2_T3_U_T1_T2_T3_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Defaults_F) + "() => Func`6<Func`5<T1, T2, T3, T4, U>, T1, T2, T3, T4, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Defaults_F_Func_6_Func_5_T1_T2_T3_T4_U_T1_T2_T3_T4_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require_A) + "() => Func`3<Action`1<T1>, String, Action`1<T1>>")]
        public void L_Require_A_Func_3_Action_1_T1_String_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require_A) + "() => Func`3<Action`2<T1, T2>, String, Action`2<T1, T2>>")]
        public void L_Require_A_Func_3_Action_2_T1_T2_String_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require2_A) + "() => Func`3<Action`2<T1, T2>, String, Action`2<T1, T2>>")]
        public void L_Require2_A_Func_3_Action_2_T1_T2_String_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require_A) + "() => Func`3<Action`3<T1, T2, T3>, String, Action`3<T1, T2, T3>>")]
        public void L_Require_A_Func_3_Action_3_T1_T2_T3_String_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require2_A) + "() => Func`3<Action`3<T1, T2, T3>, String, Action`3<T1, T2, T3>>")]
        public void L_Require2_A_Func_3_Action_3_T1_T2_T3_String_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require3_A) + "() => Func`3<Action`3<T1, T2, T3>, String, Action`3<T1, T2, T3>>")]
        public void L_Require3_A_Func_3_Action_3_T1_T2_T3_String_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require3_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, String, Action`4<T1, T2, T3, T4>>")]
        public void L_Require_A_Func_3_Action_4_T1_T2_T3_T4_String_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require2_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, String, Action`4<T1, T2, T3, T4>>")]
        public void L_Require2_A_Func_3_Action_4_T1_T2_T3_T4_String_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require3_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, String, Action`4<T1, T2, T3, T4>>")]
        public void L_Require3_A_Func_3_Action_4_T1_T2_T3_T4_String_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require3_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require4_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, String, Action`4<T1, T2, T3, T4>>")]
        public void L_Require4_A()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require4_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require_F) + "() => Func`3<Func`2<T1, U>, String, Func`2<T1, U>>")]
        public void L_Require_F_Func_3_Func_2_T1_U_String_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require_F) + "() => Func`3<Func`3<T1, T2, U>, String, Func`3<T1, T2, U>>")]
        public void L_Require_F_Func_3_Func_3_T1_T2_U_String_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require2_F) + "() => Func`3<Func`3<T1, T2, U>, String, Func`3<T1, T2, U>>")]
        public void L_Require2_F_Func_3_Func_3_T1_T2_U_String_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require_F) + "() => Func`3<Func`4<T1, T2, T3, U>, String, Func`4<T1, T2, T3, U>>")]
        public void L_Require_F_Func_3_Func_4_T1_T2_T3_U_String_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require2_F) + "() => Func`3<Func`4<T1, T2, T3, U>, String, Func`4<T1, T2, T3, U>>")]
        public void L_Require2_F_Func_3_Func_4_T1_T2_T3_U_String_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require3_F) + "() => Func`3<Func`4<T1, T2, T3, U>, String, Func`4<T1, T2, T3, U>>")]
        public void L_Require3_F_Func_3_Func_4_T1_T2_T3_U_String_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require3_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, String, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Require_F_Func_3_Func_5_T1_T2_T3_T4_U_String_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require2_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, String, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Require2_F_Func_3_Func_5_T1_T2_T3_T4_U_String_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require3_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, String, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Require3_F_Func_3_Func_5_T1_T2_T3_T4_U_String_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require3_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require4_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, String, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Require4_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require4_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_RequireAll_A) + "() => Func`4<Action`2<T1, T2>, String, String, Action`2<T1, T2>>")]
        public void L_RequireAll_A_Func_4_Action_2_T1_T2_String_String_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_RequireAll_A) + "() => Func`5<Action`3<T1, T2, T3>, String, String, String, Action`3<T1, T2, T3>>")]
        public void L_RequireAll_A_Func_5_Action_3_T1_T2_T3_String_String_String_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_RequireAll_A) + "() => Func`6<Action`4<T1, T2, T3, T4>, String, String, String, String, Action`4<T1, T2, T3, T4>>")]
        public void L_RequireAll_A_Func_6_Action_4_T1_T2_T3_T4_String_String_String_String_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_RequireAll_F) + "() => Func`4<Func`3<T1, T2, U>, String, String, Func`3<T1, T2, U>>")]
        public void L_RequireAll_F_Func_4_Func_3_T1_T2_U_String_String_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_RequireAll_F) + "() => Func`5<Func`4<T1, T2, T3, U>, String, String, String, Func`4<T1, T2, T3, U>>")]
        public void L_RequireAll_F_Func_5_Func_4_T1_T2_T3_U_String_String_String_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_RequireAll_F) + "() => Func`6<Func`5<T1, T2, T3, T4, U>, String, String, String, String, Func`5<T1, T2, T3, T4, U>>")]
        public void L_RequireAll_F_Func_6_Func_5_T1_T2_T3_T4_U_String_String_String_String_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield_A) + "() => Func`2<Action`1<U>, Func`2<U, U>>")]
        public void L_Yield_A_Func_2_Action_1_U_Func_2_U_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield_A) + "() => Func`2<Action`2<U, T1>, Func`3<U, T1, U>>")]
        public void L_Yield_A_Func_2_Action_2_U_T1_Func_3_U_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield2_A) + "() => Func`2<Action`2<T1, U>, Func`3<T1, U, U>>")]
        public void L_Yield2_A_Func_2_Action_2_T1_U_Func_3_T1_U_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield_A) + "() => Func`2<Action`3<U, T1, T2>, Func`4<U, T1, T2, U>>")]
        public void L_Yield_A_Func_2_Action_3_U_T1_T2_Func_4_U_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield2_A) + "() => Func`2<Action`3<T1, U, T2>, Func`4<T1, U, T2, U>>")]
        public void L_Yield2_A_Func_2_Action_3_T1_U_T2_Func_4_T1_U_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield3_A) + "() => Func`2<Action`3<T1, T2, U>, Func`4<T1, T2, U, U>>")]
        public void L_Yield3_A_Func_2_Action_3_T1_T2_U_Func_4_T1_T2_U_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield3_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield_A) + "() => Func`2<Action`4<U, T1, T2, T3>, Func`5<U, T1, T2, T3, U>>")]
        public void L_Yield_A_Func_2_Action_4_U_T1_T2_T3_Func_5_U_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield2_A) + "() => Func`2<Action`4<T1, U, T2, T3>, Func`5<T1, U, T2, T3, U>>")]
        public void L_Yield2_A_Func_2_Action_4_T1_U_T2_T3_Func_5_T1_U_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield3_A) + "() => Func`2<Action`4<T1, T2, U, T3>, Func`5<T1, T2, U, T3, U>>")]
        public void L_Yield3_A_Func_2_Action_4_T1_T2_U_T3_Func_5_T1_T2_U_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield3_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield4_A) + "() => Func`2<Action`4<T1, T2, T3, U>, Func`5<T1, T2, T3, U, U>>")]
        public void L_Yield4_A()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield4_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield_F) + "() => Func`2<Func`2<U, U>, Func`2<U, U>>")]
        public void L_Yield_F_Func_2_Func_2_U_U_Func_2_U_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield_F) + "() => Func`2<Func`3<U, T1, U>, Func`3<U, T1, U>>")]
        public void L_Yield_F_Func_2_Func_3_U_T1_U_Func_3_U_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield2_F) + "() => Func`2<Func`3<T1, U, U>, Func`3<T1, U, U>>")]
        public void L_Yield2_F_Func_2_Func_3_T1_U_U_Func_3_T1_U_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield_F) + "() => Func`2<Func`4<U, T1, T2, U>, Func`4<U, T1, T2, U>>")]
        public void L_Yield_F_Func_2_Func_4_U_T1_T2_U_Func_4_U_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield2_F) + "() => Func`2<Func`4<T1, U, T2, U>, Func`4<T1, U, T2, U>>")]
        public void L_Yield2_F_Func_2_Func_4_T1_U_T2_U_Func_4_T1_U_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield3_F) + "() => Func`2<Func`4<T1, T2, U, U>, Func`4<T1, T2, U, U>>")]
        public void L_Yield3_F_Func_2_Func_4_T1_T2_U_U_Func_4_T1_T2_U_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield3_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield_F) + "() => Func`2<Func`5<U, T1, T2, T3, U>, Func`5<U, T1, T2, T3, U>>")]
        public void L_Yield_F_Func_2_Func_5_U_T1_T2_T3_U_Func_5_U_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield2_F) + "() => Func`2<Func`5<T1, U, T2, T3, U>, Func`5<T1, U, T2, T3, U>>")]
        public void L_Yield2_F_Func_2_Func_5_T1_U_T2_T3_U_Func_5_T1_U_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield3_F) + "() => Func`2<Func`5<T1, T2, U, T3, U>, Func`5<T1, T2, U, T3, U>>")]
        public void L_Yield3_F_Func_2_Func_5_T1_T2_U_T3_U_Func_5_T1_T2_U_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield3_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield4_F) + "() => Func`2<Func`5<T1, T2, T3, U, U>, Func`5<T1, T2, T3, U, U>>")]
        public void L_Yield4_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield4_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Execute_A) + "() => Func`2<Func`1<Action>, Action>")]
        public void L_Execute_A_Func_2_Func_1_Action_Action()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Execute_A) + "() => Func`2<Func`1<Action`1<T1>>, Action`1<T1>>")]
        public void L_Execute_A_Func_2_Func_1_Action_1_T1_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Execute_A) + "() => Func`2<Func`1<Action`2<T1, T2>>, Action`2<T1, T2>>")]
        public void L_Execute_A_Func_2_Func_1_Action_2_T1_T2_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Execute_A) + "() => Func`2<Func`1<Action`3<T1, T2, T3>>, Action`3<T1, T2, T3>>")]
        public void L_Execute_A_Func_2_Func_1_Action_3_T1_T2_T3_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Execute_A) + "() => Func`2<Func`1<Action`4<T1, T2, T3, T4>>, Action`4<T1, T2, T3, T4>>")]
        public void L_Execute_A_Func_2_Func_1_Action_4_T1_T2_T3_T4_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Execute_F) + "() => Func`2<Func`1<Func`1<U>>, Func`1<U>>")]
        public void L_Execute_F_Func_2_Func_1_Func_1_U_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Execute_F) + "() => Func`2<Func`1<Func`2<T1, U>>, Func`2<T1, U>>")]
        public void L_Execute_F_Func_2_Func_1_Func_2_T1_U_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Execute_F) + "() => Func`2<Func`1<Func`3<T1, T2, U>>, Func`3<T1, T2, U>>")]
        public void L_Execute_F_Func_2_Func_1_Func_3_T1_T2_U_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Execute_F) + "() => Func`2<Func`1<Func`4<T1, T2, T3, U>>, Func`4<T1, T2, T3, U>>")]
        public void L_Execute_F_Func_2_Func_1_Func_4_T1_T2_T3_U_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Execute_F) + "() => Func`2<Func`1<Func`5<T1, T2, T3, T4, U>>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Execute_F_Func_2_Func_1_Func_5_T1_T2_T3_T4_U_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Cast_A) + "() => Func`2<Action`1<T1>, Action`1<U1>>")]
        public void L_Cast_A_Func_2_Action_1_T1_Action_1_U1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Cast_A) + "() => Func`2<Action`2<T1, T2>, Action`2<U1, U2>>")]
        public void L_Cast_A_Func_2_Action_2_T1_T2_Action_2_U1_U2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Do) + "() => Func`2<Func`1<U>, Action>")]
        public void L_Do()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Cache) + "() => Func`3<Func`1<U>, String, Func`1<U>>")]
        public void L_Cache()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cache
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Cache) + "(Object&, Func`1<T>) => T")]
        public void Cache_Object_Func_1_T_T()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Cache
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Cache) + "(T&, Func`1<T>) => T")]
        public void Cache_T_Func_1_T_T()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Cache
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.GetCacheData) + "(String) => Dictionary`2<String, CacheData>")]
        public void GetCacheData()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.GetCacheData
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.ClearCache) + "(String)")]
        public void ClearCache()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.ClearCache
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_SetFunc_A) + "() => Func`3<Action`1<T1>, Func`1<T1>, Action`1<T1>>")]
        public void L_SetFunc_A()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_SetFunc_F) + "() => Func`3<Func`2<T1, U>, Func`1<T1>, Func`2<T1, U>>")]
        public void L_SetFunc_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_SetFunc_A2) + "() => Func`3<Action`2<T1, T2>, Func`1<T2>, Action`2<T1, T2>>")]
        public void L_SetFunc_A2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_A2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_SetFunc_F2) + "() => Func`3<Func`3<T1, T2, U>, Func`1<T2>, Func`3<T1, T2, U>>")]
        public void L_SetFunc_F2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_F2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_SetFunc_A3) + "() => Func`3<Action`3<T1, T2, T3>, Func`1<T3>, Action`3<T1, T2, T3>>")]
        public void L_SetFunc_A3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_A3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_SetFunc_F3) + "() => Func`3<Func`4<T1, T2, T3, U>, Func`1<T3>, Func`4<T1, T2, T3, U>>")]
        public void L_SetFunc_F3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_F3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_SetFunc_A4) + "() => Func`3<Action`4<T1, T2, T3, T4>, Func`1<T4>, Action`4<T1, T2, T3, T4>>")]
        public void L_SetFunc_A4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_A4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_SetFunc_F4) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Func`1<T4>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_SetFunc_F4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_F4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Set_A) + "() => Func`3<Action`1<T1>, T1, Action`1<T1>>")]
        public void L_Set_A()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Set_F) + "() => Func`3<Func`2<T1, U>, T1, Func`2<T1, U>>")]
        public void L_Set_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Set2_A) + "() => Func`3<Action`2<T1, T2>, T2, Action`2<T1, T2>>")]
        public void L_Set2_A()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set2_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Set2_F) + "() => Func`3<Func`3<T1, T2, U>, T2, Func`3<T1, T2, U>>")]
        public void L_Set2_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set2_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Set3_A) + "() => Func`3<Action`3<T1, T2, T3>, T3, Action`3<T1, T2, T3>>")]
        public void L_Set3_A()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set3_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Set3_F) + "() => Func`3<Func`4<T1, T2, T3, U>, T3, Func`4<T1, T2, T3, U>>")]
        public void L_Set3_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set3_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Set4_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, T4, Action`4<T1, T2, T3, T4>>")]
        public void L_Set4_A()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set4_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Set4_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, T4, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Set4_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set4_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Return_A) + "() => Func`3<Action, U, Func`1<U>>")]
        public void L_Return_A_Func_3_Action_U_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Return_A) + "() => Func`3<Action`1<T1>, U, Func`2<T1, U>>")]
        public void L_Return_A_Func_3_Action_1_T1_U_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Return_A) + "() => Func`3<Action`2<T1, T2>, U, Func`3<T1, T2, U>>")]
        public void L_Return_A_Func_3_Action_2_T1_T2_U_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Return_A) + "() => Func`3<Action`3<T1, T2, T3>, U, Func`4<T1, T2, T3, U>>")]
        public void L_Return_A_Func_3_Action_3_T1_T2_T3_U_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Return_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, U, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Return_A_Func_3_Action_4_T1_T2_T3_T4_U_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Return_F) + "() => Func`3<Func`1<U>, U, Func`1<U>>")]
        public void L_Return_F_Func_3_Func_1_U_U_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Return_F) + "() => Func`3<Func`2<T1, U>, U, Func`2<T1, U>>")]
        public void L_Return_F_Func_3_Func_2_T1_U_U_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Return_F) + "() => Func`3<Func`3<T1, T2, U>, U, Func`3<T1, T2, U>>")]
        public void L_Return_F_Func_3_Func_3_T1_T2_U_U_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Return_F) + "() => Func`3<Func`4<T1, T2, T3, U>, U, Func`4<T1, T2, T3, U>>")]
        public void L_Return_F_Func_3_Func_4_T1_T2_T3_U_U_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Return_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, U, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Return_F_Func_3_Func_5_T1_T2_T3_T4_U_U_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Rotate_A) + "() => Func`2<Action`2<T1, T2>, Action`2<T2, T1>>")]
        public void L_Rotate_A_Func_2_Action_2_T1_T2_Action_2_T2_T1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Rotate_A) + "() => Func`2<Action`3<T1, T2, T3>, Action`3<T3, T1, T2>>")]
        public void L_Rotate_A_Func_2_Action_3_T1_T2_T3_Action_3_T3_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Rotate_A) + "() => Func`2<Action`4<T1, T2, T3, T4>, Action`4<T4, T1, T2, T3>>")]
        public void L_Rotate_A_Func_2_Action_4_T1_T2_T3_T4_Action_4_T4_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Rotate_F) + "() => Func`2<Func`3<T1, T2, U>, Func`3<T2, T1, U>>")]
        public void L_Rotate_F_Func_2_Func_3_T1_T2_U_Func_3_T2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Rotate_F) + "() => Func`2<Func`4<T1, T2, T3, U>, Func`4<T3, T1, T2, U>>")]
        public void L_Rotate_F_Func_2_Func_4_T1_T2_T3_U_Func_4_T3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Rotate_F) + "() => Func`2<Func`5<T1, T2, T3, T4, U>, Func`5<T4, T1, T2, T3, U>>")]
        public void L_Rotate_F_Func_2_Func_5_T1_T2_T3_T4_U_Func_5_T4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_RotateBack_A) + "() => Func`2<Action`2<T1, T2>, Action`2<T2, T1>>")]
        public void L_RotateBack_A_Func_2_Action_2_T1_T2_Action_2_T2_T1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_RotateBack_A) + "() => Func`2<Action`3<T1, T2, T3>, Action`3<T2, T3, T1>>")]
        public void L_RotateBack_A_Func_2_Action_3_T1_T2_T3_Action_3_T2_T3_T1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_RotateBack_A) + "() => Func`2<Action`4<T1, T2, T3, T4>, Action`4<T2, T3, T4, T1>>")]
        public void L_RotateBack_A_Func_2_Action_4_T1_T2_T3_T4_Action_4_T2_T3_T4_T1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_RotateBack_F) + "() => Func`2<Func`3<T1, T2, U>, Func`3<T2, T1, U>>")]
        public void L_RotateBack_F_Func_2_Func_3_T1_T2_U_Func_3_T2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_RotateBack_F) + "() => Func`2<Func`4<T1, T2, T3, U>, Func`4<T2, T3, T1, U>>")]
        public void L_RotateBack_F_Func_2_Func_4_T1_T2_T3_U_Func_4_T2_T3_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_RotateBack_F) + "() => Func`2<Func`5<T1, T2, T3, T4, U>, Func`5<T2, T3, T4, T1, U>>")]
        public void L_RotateBack_F_Func_2_Func_5_T1_T2_T3_T4_U_Func_5_T2_T3_T4_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default_A) + "() => Func`3<Action`1<T1>, T1, Action`1<T1>>")]
        public void L_Default_A_Func_3_Action_1_T1_T1_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default_A) + "() => Func`3<Action`2<T1, T2>, T1, Action`2<T1, T2>>")]
        public void L_Default_A_Func_3_Action_2_T1_T2_T1_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default2_A) + "() => Func`3<Action`2<T1, T2>, T2, Action`2<T1, T2>>")]
        public void L_Default2_A_Func_3_Action_2_T1_T2_T2_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default_A) + "() => Func`3<Action`3<T1, T2, T3>, T1, Action`3<T1, T2, T3>>")]
        public void L_Default_A_Func_3_Action_3_T1_T2_T3_T1_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default2_A) + "() => Func`3<Action`3<T1, T2, T3>, T2, Action`3<T1, T2, T3>>")]
        public void L_Default2_A_Func_3_Action_3_T1_T2_T3_T2_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default3_A) + "() => Func`3<Action`3<T1, T2, T3>, T3, Action`3<T1, T2, T3>>")]
        public void L_Default3_A_Func_3_Action_3_T1_T2_T3_T3_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default3_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, T1, Action`4<T1, T2, T3, T4>>")]
        public void L_Default_A_Func_3_Action_4_T1_T2_T3_T4_T1_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default2_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, T2, Action`4<T1, T2, T3, T4>>")]
        public void L_Default2_A_Func_3_Action_4_T1_T2_T3_T4_T2_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default3_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, T3, Action`4<T1, T2, T3, T4>>")]
        public void L_Default3_A_Func_3_Action_4_T1_T2_T3_T4_T3_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default3_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default4_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, T4, Action`4<T1, T2, T3, T4>>")]
        public void L_Default4_A()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default4_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default_F) + "() => Func`3<Func`2<T1, U>, T1, Func`2<T1, U>>")]
        public void L_Default_F_Func_3_Func_2_T1_U_T1_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default_F) + "() => Func`3<Func`3<T1, T2, U>, T1, Func`3<T1, T2, U>>")]
        public void L_Default_F_Func_3_Func_3_T1_T2_U_T1_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default2_F) + "() => Func`3<Func`3<T1, T2, U>, T2, Func`3<T1, T2, U>>")]
        public void L_Default2_F_Func_3_Func_3_T1_T2_U_T2_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default_F) + "() => Func`3<Func`4<T1, T2, T3, U>, T1, Func`4<T1, T2, T3, U>>")]
        public void L_Default_F_Func_3_Func_4_T1_T2_T3_U_T1_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default2_F) + "() => Func`3<Func`4<T1, T2, T3, U>, T2, Func`4<T1, T2, T3, U>>")]
        public void L_Default2_F_Func_3_Func_4_T1_T2_T3_U_T2_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default3_F) + "() => Func`3<Func`4<T1, T2, T3, U>, T3, Func`4<T1, T2, T3, U>>")]
        public void L_Default3_F_Func_3_Func_4_T1_T2_T3_U_T3_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default3_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, T1, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Default_F_Func_3_Func_5_T1_T2_T3_T4_U_T1_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default2_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, T2, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Default2_F_Func_3_Func_5_T1_T2_T3_T4_U_T2_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default3_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, T3, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Default3_F_Func_3_Func_5_T1_T2_T3_T4_U_T3_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default3_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default4_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, T4, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Default4_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default4_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.DataCaches))]
        public void DataCaches()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.DataCaches
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class L_AryTester : XUnitOutputTester, IDisposable
        {
        public L_AryTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ary) + "." + nameof(L.Ary.Array) + "() => Func`1<T[]>")]
        public void Array_Func_1_T()
            {
            // TODO: Implement method test LCore.Extensions.L.Ary.Array
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ary) + "." + nameof(L.Ary.Array) + "(T[]) => Func`1<T[]>")]
        public void Array_T_Func_1_T()
            {
            // TODO: Implement method test LCore.Extensions.L.Ary.Array
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class L_ListTester : XUnitOutputTester, IDisposable
        {
        public L_ListTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.List) + "." + nameof(L.List.NewList) + "() => T")]
        public void NewList()
            {
            // TODO: Implement method test LCore.Extensions.L.List.NewList
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.List) + "." + nameof(L.List.ToList) + "() => Func`1<List`1<T>>")]
        public void ToList_Func_1_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.L.List.ToList
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.List) + "." + nameof(L.List.ToList) + "(T[]) => Func`1<List`1<T>>")]
        public void ToList_T_Func_1_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.L.List.ToList
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ComparableExt))]
    public partial class ComparableExtTester : XUnitOutputTester, IDisposable
        {
        public ComparableExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ComparableExt) + "." + nameof(ComparableExt.IsEqualTo) + "(IComparable, IComparable) => Boolean")]
        public void IsEqualTo()
            {
            // TODO: Implement method test LCore.Extensions.ComparableExt.IsEqualTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ComparableExt) + "." + nameof(ComparableExt.IsNotEqualTo) + "(IComparable, IComparable) => Boolean")]
        public void IsNotEqualTo()
            {
            // TODO: Implement method test LCore.Extensions.ComparableExt.IsNotEqualTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ComparableExt) + "." + nameof(ComparableExt.IsLessThan) + "(IComparable, IComparable) => Boolean")]
        public void IsLessThan()
            {
            // TODO: Implement method test LCore.Extensions.ComparableExt.IsLessThan
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ComparableExt) + "." + nameof(ComparableExt.IsLessThanOrEqual) + "(IComparable, IComparable) => Boolean")]
        public void IsLessThanOrEqual()
            {
            // TODO: Implement method test LCore.Extensions.ComparableExt.IsLessThanOrEqual
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ComparableExt) + "." + nameof(ComparableExt.IsGreaterThan) + "(IComparable, IComparable) => Boolean")]
        public void IsGreaterThan()
            {
            // TODO: Implement method test LCore.Extensions.ComparableExt.IsGreaterThan
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ComparableExt) + "." + nameof(ComparableExt.IsGreaterThanOrEqual) + "(IComparable, IComparable) => Boolean")]
        public void IsGreaterThanOrEqual()
            {
            // TODO: Implement method test LCore.Extensions.ComparableExt.IsGreaterThanOrEqual
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ComparableExt) + "." + nameof(ComparableExt.Max) + "(T, T[]) => T")]
        public void Max_T_T_T()
            {
            // TODO: Implement method test LCore.Extensions.ComparableExt.Max
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ComparableExt) + "." + nameof(ComparableExt.Max) + "(IEnumerable`1<T>, Func`2<T, IComparable>) => T")]
        public void Max_IEnumerable_1_T_Func_2_T_IComparable_T()
            {
            // TODO: Implement method test LCore.Extensions.ComparableExt.Max
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ComparableExt) + "." + nameof(ComparableExt.Min) + "(T, T[]) => T")]
        public void Min_T_T_T()
            {
            // TODO: Implement method test LCore.Extensions.ComparableExt.Min
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ComparableExt) + "." + nameof(ComparableExt.Min) + "(IEnumerable`1<T>, Func`2<T, IComparable>) => T")]
        public void Min_IEnumerable_1_T_Func_2_T_IComparable_T()
            {
            // TODO: Implement method test LCore.Extensions.ComparableExt.Min
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt))]
    public partial class ReflectionExtTester : XUnitOutputTester, IDisposable
        {
        public ReflectionExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.AlsoBaseTypes) + "(Type) => List`1<Type>")]
        public void AlsoBaseTypes()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.AlsoBaseTypes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.BaseTypes) + "(Type) => List`1<Type>")]
        public void BaseTypes()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.BaseTypes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.CanBeNull) + "(ParameterInfo) => Boolean")]
        public void CanBeNull()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.CanBeNull
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.FindMethod) + "(Type, String, Type[]) => MethodInfo")]
        public void FindMethod_Type_String_Type_MethodInfo()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.FindMethod
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.FindMethod) + "(Type, String) => MethodInfo")]
        public void FindMethod_Type_String_MethodInfo()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.FindMethod
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.FullyQualifiedName) + "(MemberInfo) => String")]
        public void FullyQualifiedName_MemberInfo_String()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.FullyQualifiedName
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.FullyQualifiedName) + "(ParameterInfo) => String")]
        public void FullyQualifiedName_ParameterInfo_String()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.FullyQualifiedName
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetAssembly) + "(MemberInfo) => Assembly")]
        public void GetAssembly()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetAssembly
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetAttribute) + "(ICustomAttributeProvider) => T")]
        public void GetAttribute_ICustomAttributeProvider_T()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetAttribute) + "(ICustomAttributeProvider, Boolean) => T")]
        public void GetAttribute_ICustomAttributeProvider_Boolean_T()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetAttributes) + "(ICustomAttributeProvider, Boolean) => List`1<T>")]
        public void GetAttributes()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetAttributes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetAttributeTypeName) + "(ICustomAttributeProvider) => String")]
        public void GetAttributeTypeName()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetAttributeTypeName
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetClassHierarchy) + "(Type) => String")]
        public void GetClassHierarchy()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetClassHierarchy
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetComparer) + "(MemberInfo) => IComparer")]
        public void GetComparer_MemberInfo_IComparer()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetComparer
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetComparer) + "(MemberInfo) => IComparer`1<T>")]
        public void GetComparer_MemberInfo_IComparer_1_T()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetComparer
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetExtensionMethods) + "(Type) => MethodInfo[]")]
        public void GetExtensionMethods()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetExtensionMethods
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetMemberType) + "(MemberInfo) => Type")]
        public void GetMemberType()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetMemberType
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetNamespace) + "(MemberInfo) => String")]
        public void GetNamespace()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetNamespace
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetNestedNames) + "(Type) => String")]
        public void GetNestedNames()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetNestedNames
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetSubClass) + "(Type, String) => Type")]
        public void GetSubClass()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetSubClass
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetSubClasses) + "(Type) => List`1<Type>")]
        public void GetSubClasses()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetSubClasses
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetFriendlyTypeName) + "(Type) => String")]
        public void GetFriendlyTypeName()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetFriendlyTypeName
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetValue) + "(MemberInfo, Object) => Object")]
        public void GetValue()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetValues) + "(Type, Object, Boolean) => List`1<T>")]
        public void GetValues_Type_Object_Boolean_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetValues
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetValues) + "(IEnumerable`1<MemberInfo>, Object, Boolean) => List`1<T>")]
        public void GetValues_IEnumerable_1_MemberInfo_Object_Boolean_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetValues
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetTypes) + "(IEnumerable`1<T>) => List`1<Type>")]
        public void GetTypes_IEnumerable_1_T_List_1_Type()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetTypes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetTypes) + "(T[]) => Type[]")]
        public void GetTypes_T_Type()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetTypes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.HasAttribute) + "(ICustomAttributeProvider) => Boolean")]
        public void HasAttribute_ICustomAttributeProvider_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.HasAttribute) + "(ICustomAttributeProvider, Boolean) => Boolean")]
        public void HasAttribute_ICustomAttributeProvider_Boolean_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.HasAttribute) + "(ICustomAttributeProvider, Type, Boolean) => Boolean")]
        public void HasAttribute_ICustomAttributeProvider_Type_Boolean_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.HasInterface) + "(Type, Type) => Boolean")]
        public void HasInterface_Type_Type_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasInterface
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.HasInterface) + "(Type) => Boolean")]
        public void HasInterface_Type_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasInterface
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.HasIndexGetter) + "(Type) => Boolean")]
        public void HasIndexGetter_Type_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasIndexGetter
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.HasIndexSetter) + "(Type) => Boolean")]
        public void HasIndexSetter_Type_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasIndexSetter
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.HasSetter) + "(MemberInfo) => Boolean")]
        public void HasSetter()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasSetter
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.IndexGetter) + "(Type) => PropertyInfo")]
        public void IndexGetter_Type_PropertyInfo()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IndexGetter
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.IndexSetter) + "(Type) => PropertyInfo")]
        public void IndexSetter_Type_PropertyInfo()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IndexSetter
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.InstantiateValues) + "(Type, Object, Boolean) => List`1<T>")]
        public void InstantiateValues_Type_Object_Boolean_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.InstantiateValues
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.InstantiateValues) + "(IEnumerable`1<MemberInfo>, Object) => List`1<T>")]
        public void InstantiateValues_IEnumerable_1_MemberInfo_Object_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.InstantiateValues
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.IsExtensionMethod) + "(MethodInfo) => Boolean")]
        public void IsExtensionMethod()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsExtensionMethod
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.IsNullable) + "(Type) => Boolean")]
        public void IsNullable()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsNullable
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.IsOperator) + "(MethodInfo) => Boolean")]
        public void IsOperator()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsOperator
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.IsType) + "(Object) => Boolean")]
        public void IsType_Object_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsType
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.IsType) + "(Object, Type) => Boolean")]
        public void IsType_Object_Type_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsType
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.IsType) + "(Type, Type) => Boolean")]
        public void IsType_Type_Type_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsType
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.IsType) + "(Type) => Boolean")]
        public void IsType_Type_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsType
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.IsStatic) + "(Type) => Boolean")]
        public void IsStatic()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsStatic
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.MembersOfType) + "(Type, Type, Boolean) => List`1<MemberInfo>")]
        public void MembersOfType()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.MembersOfType
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.MemberType) + "(MemberInfo) => Type")]
        public void MemberType()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.MemberType
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.New) + "(Type, Object[]) => T")]
        public void New_Type_Object_T()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.New) + "(Type, Object[], Type) => Object")]
        public void New_Type_Object_Type_Object()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.NewRandom) + "(Type, Object, Object) => Object")]
        public void NewRandom()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.NewRandom
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.SetValue) + "(MemberInfo, Object, Object)")]
        public void SetValue()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.SetValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.ToInvocationSignature) + "(MethodInfo, Boolean) => String")]
        public void ToInvocationSignature()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.ToInvocationSignature
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.TypeEquals) + "(Type, Type) => Boolean")]
        public void TypeEquals()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.TypeEquals
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.WithAttribute) + "(IEnumerable`1<TMember>, Boolean) => List`1<TMember>")]
        public void WithAttribute_IEnumerable_1_TMember_Boolean_List_1_TMember()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.WithAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.WithAttribute) + "(IEnumerable`1<MemberInfo>, Boolean) => List`1<MemberInfo>")]
        public void WithAttribute_IEnumerable_1_MemberInfo_Boolean_List_1_MemberInfo()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.WithAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.WithAttribute) + "(IEnumerable`1<MemberInfo>, Type, Boolean) => List`1<MemberInfo>")]
        public void WithAttribute_IEnumerable_1_MemberInfo_Type_Boolean_List_1_MemberInfo()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.WithAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.WithoutAttribute) + "(IEnumerable`1<TMember>, Boolean) => List`1<TMember>")]
        public void WithoutAttribute_IEnumerable_1_TMember_Boolean_List_1_TMember()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.WithoutAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.WithoutAttribute) + "(IEnumerable`1<MemberInfo>, Boolean) => List`1<MemberInfo>")]
        public void WithoutAttribute_IEnumerable_1_MemberInfo_Boolean_List_1_MemberInfo()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.WithoutAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.WithoutAttribute) + "(IEnumerable`1<MemberInfo>, Type, Boolean) => List`1<MemberInfo>")]
        public void WithoutAttribute_IEnumerable_1_MemberInfo_Type_Boolean_List_1_MemberInfo()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.WithoutAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.ToParameterSignature) + "(MethodInfo) => String")]
        public void ToParameterSignature()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.ToParameterSignature
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetGenericName) + "(Type) => String")]
        public void GetGenericName()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetGenericName
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt))]
    public partial class NumberExtTester : XUnitOutputTester, IDisposable
        {
        public NumberExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.AddEach) + "(IEnumerable`1<Int32>, Int32) => List`1<Int32>")]
        public void AddEach()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Abs) + "(Int32) => UInt32")]
        public void Abs_Int32_UInt32()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Abs) + "(UInt32) => UInt32")]
        public void Abs_UInt32_UInt32()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Abs) + "(Int64) => UInt64")]
        public void Abs_Int64_UInt64()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Abs) + "(UInt64) => UInt64")]
        public void Abs_UInt64_UInt64()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Abs) + "(Int16) => UInt16")]
        public void Abs_Int16_UInt16()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Abs) + "(UInt16) => UInt16")]
        public void Abs_UInt16_UInt16()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Abs) + "(Double) => Double")]
        public void Abs_Double_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Abs) + "(Single) => Single")]
        public void Abs_Single_Single()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Abs) + "(SByte) => Byte")]
        public void Abs_SByte_Byte()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Abs) + "(Byte) => Byte")]
        public void Abs_Byte_Byte()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Abs) + "(Decimal) => Decimal")]
        public void Abs_Decimal_Decimal()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.AsPercent) + "(Single) => Int32")]
        public void AsPercent_Single_Int32()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.AsPercent) + "(Double) => Int32")]
        public void AsPercent_Double_Int32()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Average) + "(IEnumerable`1<Int32>) => Double")]
        public void Average_IEnumerable_1_Int32_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Average) + "(IEnumerable`1<Int64>) => Double")]
        public void Average_IEnumerable_1_Int64_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Average) + "(IEnumerable`1<Single>) => Double")]
        public void Average_IEnumerable_1_Single_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Average) + "(IEnumerable`1<Double>) => Double")]
        public void Average_IEnumerable_1_Double_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.ConvertToBestMatch) + "(Number) => Number")]
        public void ConvertToBestMatch()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces) + "(Int32) => UInt32")]
        public void DecimalPlaces_Int32_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces) + "(Int16) => UInt32")]
        public void DecimalPlaces_Int16_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces) + "(Int64) => UInt32")]
        public void DecimalPlaces_Int64_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces) + "(UInt32) => UInt32")]
        public void DecimalPlaces_UInt32_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces) + "(UInt16) => UInt32")]
        public void DecimalPlaces_UInt16_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces) + "(UInt64) => UInt32")]
        public void DecimalPlaces_UInt64_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces) + "(Char) => UInt32")]
        public void DecimalPlaces_Char_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces) + "(Byte) => UInt32")]
        public void DecimalPlaces_Byte_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces) + "(SByte) => UInt32")]
        public void DecimalPlaces_SByte_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces) + "(Decimal) => UInt16")]
        public void DecimalPlaces_Decimal_UInt16()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces) + "(Double) => UInt16")]
        public void DecimalPlaces_Double_UInt16()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces) + "(Single) => UInt16")]
        public void DecimalPlaces_Single_UInt16()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Floor) + "(Single) => Int32")]
        public void Floor_Single_Int32()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Floor) + "(Single, Int32) => Single")]
        public void Floor_Single_Int32_Single()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Floor) + "(Double) => Int64")]
        public void Floor_Double_Int64()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Floor) + "(Double, Int32) => Double")]
        public void Floor_Double_Int32_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.IsEven) + "(Int32) => Boolean")]
        public void IsEven_Int32_Boolean()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.IsEven) + "(Int64) => Boolean")]
        public void IsEven_Int64_Boolean()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.IsEven) + "(Int16) => Boolean")]
        public void IsEven_Int16_Boolean()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.IsEven) + "(UInt32) => Boolean")]
        public void IsEven_UInt32_Boolean()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.IsEven) + "(UInt64) => Boolean")]
        public void IsEven_UInt64_Boolean()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.IsEven) + "(Byte) => Boolean")]
        public void IsEven_Byte_Boolean()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.IsEven) + "(SByte) => Boolean")]
        public void IsEven_SByte_Boolean()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.PercentageOf) + "(Single, Single) => Int32")]
        public void PercentageOf_Single_Single_Int32()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.PercentageOf) + "(Double, Double) => Int32")]
        public void PercentageOf_Double_Double_Int32()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.PercentageOf) + "(Int32, Int32) => Int32")]
        public void PercentageOf_Int32_Int32_Int32()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.PercentageOf) + "(UInt32, UInt32) => Int32")]
        public void PercentageOf_UInt32_UInt32_Int32()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.PercentageOf) + "(Int16, Int16) => Int32")]
        public void PercentageOf_Int16_Int16_Int32()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.PercentageOf) + "(Int64, Int64) => Int32")]
        public void PercentageOf_Int64_Int64_Int32()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Pow) + "(Double, Double) => Double")]
        public void Pow_Double_Double_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Pow) + "(Int32, Double) => Double")]
        public void Pow_Int32_Double_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Pow) + "(UInt32, Double) => Double")]
        public void Pow_UInt32_Double_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Pow) + "(Int16, Double) => Double")]
        public void Pow_Int16_Double_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Pow) + "(UInt16, Double) => Double")]
        public void Pow_UInt16_Double_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Pow
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Pow) + "(Int64, Double) => Double")]
        public void Pow_Int64_Double_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Pow) + "(UInt64, Double) => Double")]
        public void Pow_UInt64_Double_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Pow) + "(SByte, Double) => Double")]
        public void Pow_SByte_Double_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Pow) + "(Byte, Double) => Double")]
        public void Pow_Byte_Double_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Round) + "(Single) => Int32")]
        public void Round_Single_Int32()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Round) + "(Single, Int32) => Single")]
        public void Round_Single_Int32_Single()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Round) + "(Double) => Int64")]
        public void Round_Double_Int64()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Round) + "(Double, Int32) => Double")]
        public void Round_Double_Int32_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Round) + "(Decimal) => Int64")]
        public void Round_Decimal_Int64()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Round
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Round) + "(Decimal, Int32) => Double")]
        public void Round_Decimal_Int32_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Round
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sqrt) + "(Int32) => Double")]
        public void Sqrt_Int32_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sqrt) + "(Int64) => Double")]
        public void Sqrt_Int64_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sqrt) + "(Int16) => Double")]
        public void Sqrt_Int16_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sqrt) + "(Double) => Double")]
        public void Sqrt_Double_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sqrt) + "(Single) => Double")]
        public void Sqrt_Single_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sqrt) + "(UInt32) => Double")]
        public void Sqrt_UInt32_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sqrt) + "(UInt64) => Double")]
        public void Sqrt_UInt64_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sqrt) + "(UInt16) => Double")]
        public void Sqrt_UInt16_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sqrt) + "(Byte) => Double")]
        public void Sqrt_Byte_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sqrt) + "(SByte) => Double")]
        public void Sqrt_SByte_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sqrt) + "(Decimal) => Double")]
        public void Sqrt_Decimal_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.SubtractEach) + "(List`1<Int32>, Int32) => List`1<Int32>")]
        public void SubtractEach()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sum) + "(IEnumerable`1<Int32>) => Int32")]
        public void Sum_IEnumerable_1_Int32_Int32()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sum) + "(IEnumerable`1<Int64>) => Int64")]
        public void Sum_IEnumerable_1_Int64_Int64()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sum) + "(IEnumerable`1<Single>) => Single")]
        public void Sum_IEnumerable_1_Single_Single()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sum) + "(IEnumerable`1<Double>) => Double")]
        public void Sum_IEnumerable_1_Double_Double()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.To) + "(Int32, Int32) => Int32[]")]
        public void To_Int32_Int32_Int32()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.To) + "(UInt32, UInt32) => UInt32[]")]
        public void To_UInt32_UInt32_UInt32()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Wrap) + "(Nullable`1<T>) => Number")]
        public void Wrap_Nullable_1_T_Number()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Wrap
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Wrap) + "(T) => Number")]
        public void Wrap_T_Number()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Wrap
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Wrap) + "(String) => Number")]
        public void Wrap_String_Number()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Wrap
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LoopExt))]
    public partial class LoopExtTester : XUnitOutputTester, IDisposable
        {
        public LoopExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LoopExt) + "." + nameof(LoopExt.To) + "(Int32, Int32, Func`1<U>) => List`1<U>")]
        public void To_Int32_Int32_Func_1_U_List_1_U()
            {
            // TODO: Implement method test LCore.Extensions.LoopExt.To
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LoopExt) + "." + nameof(LoopExt.To) + "(Int32, Int32, Func`2<Int32, T>) => List`1<T>")]
        public void To_Int32_Int32_Func_2_Int32_T_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.LoopExt.To
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt))]
    public partial class ThreadExtTester : XUnitOutputTester, IDisposable
        {
        public ThreadExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.Async) + "(Action) => Action")]
        public void Async_Action_Action()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.Async
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.Async) + "(Action`1<T>) => Action`1<T>")]
        public void Async_Action_1_T_Action_1_T()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.Async
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.Async) + "(Action, ThreadPriority) => Action")]
        public void Async_Action_ThreadPriority_Action()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.Async
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.Async) + "(Action`1<T>, ThreadPriority) => Action`1<T>")]
        public void Async_Action_1_T_ThreadPriority_Action_1_T()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.Async
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.Async) + "(Action, TimeSpan, ThreadPriority) => Action")]
        public void Async_Action_TimeSpan_ThreadPriority_Action()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.Async
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.Async) + "(Action`1<T>, TimeSpan, ThreadPriority) => Action`1<T>")]
        public void Async_Action_1_T_TimeSpan_ThreadPriority_Action_1_T()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.Async
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.Async) + "(Action, Int32, ThreadPriority) => Action")]
        public void Async_Action_Int32_ThreadPriority_Action()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.Async
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.Async) + "(Action`1<T>, Int32, ThreadPriority) => Action`1<T>")]
        public void Async_Action_1_T_Int32_ThreadPriority_Action_1_T()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.Async
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.Async) + "(Action, UInt32, ThreadPriority) => Action")]
        public void Async_Action_UInt32_ThreadPriority_Action()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.Async
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.Async) + "(Action`1<T>, UInt32, ThreadPriority) => Action`1<T>")]
        public void Async_Action_1_T_UInt32_ThreadPriority_Action_1_T()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.Async
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.Async) + "(Action, Int64, ThreadPriority) => Action")]
        public void Async_Action_Int64_ThreadPriority_Action()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.Async
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.Async) + "(Action`1<T>, Int64, ThreadPriority) => Action`1<T>")]
        public void Async_Action_1_T_Int64_ThreadPriority_Action_1_T()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.Async
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.Async) + "(Action, UInt64, ThreadPriority) => Action")]
        public void Async_Action_UInt64_ThreadPriority_Action()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.Async
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.Async) + "(Action`1<T>, UInt64, ThreadPriority) => Action`1<T>")]
        public void Async_Action_1_T_UInt64_ThreadPriority_Action_1_T()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.Async
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.AsyncResult) + "(Func`1<U>, Action`1<U>) => Action")]
        public void AsyncResult_Func_1_U_Action_1_U_Action()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.AsyncResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.AsyncResult) + "(Func`2<T1, U>, Action`1<U>) => Action`1<T1>")]
        public void AsyncResult_Func_2_T1_U_Action_1_U_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.AsyncResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.AsyncResult) + "(Func`1<U>, Action`1<U>, ThreadPriority) => Action")]
        public void AsyncResult_Func_1_U_Action_1_U_ThreadPriority_Action()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.AsyncResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.AsyncResult) + "(Func`2<T1, U>, Action`1<U>, ThreadPriority) => Action`1<T1>")]
        public void AsyncResult_Func_2_T1_U_Action_1_U_ThreadPriority_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.AsyncResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.AsyncResult) + "(Func`1<U>, Action`1<U>, TimeSpan, ThreadPriority) => Action")]
        public void AsyncResult_Func_1_U_Action_1_U_TimeSpan_ThreadPriority_Action()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.AsyncResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.AsyncResult) + "(Func`2<T1, U>, Action`1<U>, TimeSpan, ThreadPriority) => Action`1<T1>")]
        public void AsyncResult_Func_2_T1_U_Action_1_U_TimeSpan_ThreadPriority_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.AsyncResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.AsyncResult) + "(Func`1<U>, Action`1<U>, Int32, ThreadPriority) => Action")]
        public void AsyncResult_Func_1_U_Action_1_U_Int32_ThreadPriority_Action()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.AsyncResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.AsyncResult) + "(Func`2<T1, U>, Action`1<U>, Int32, ThreadPriority) => Action`1<T1>")]
        public void AsyncResult_Func_2_T1_U_Action_1_U_Int32_ThreadPriority_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.AsyncResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.AsyncResult) + "(Func`1<U>, Action`1<U>, UInt32, ThreadPriority) => Action")]
        public void AsyncResult_Func_1_U_Action_1_U_UInt32_ThreadPriority_Action()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.AsyncResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.AsyncResult) + "(Func`2<T1, U>, Action`1<U>, UInt32, ThreadPriority) => Action`1<T1>")]
        public void AsyncResult_Func_2_T1_U_Action_1_U_UInt32_ThreadPriority_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.AsyncResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.AsyncResult) + "(Func`1<U>, Action`1<U>, Int64, ThreadPriority) => Action")]
        public void AsyncResult_Func_1_U_Action_1_U_Int64_ThreadPriority_Action()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.AsyncResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.AsyncResult) + "(Func`2<T1, U>, Action`1<U>, Int64, ThreadPriority) => Action`1<T1>")]
        public void AsyncResult_Func_2_T1_U_Action_1_U_Int64_ThreadPriority_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.AsyncResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.AsyncResult) + "(Func`1<U>, Action`1<U>, UInt64, ThreadPriority) => Action")]
        public void AsyncResult_Func_1_U_Action_1_U_UInt64_ThreadPriority_Action()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.AsyncResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.AsyncResult) + "(Func`2<T1, U>, Action`1<U>, UInt64, ThreadPriority) => Action`1<T1>")]
        public void AsyncResult_Func_2_T1_U_Action_1_U_UInt64_ThreadPriority_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.AsyncResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.CountExecutions) + "(Action, UInt32) => UInt32")]
        public void CountExecutions()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.CountExecutions
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.Profile) + "(Action, UInt32) => TimeSpan")]
        public void Profile_Action_UInt32_TimeSpan()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.Profile
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.Profile) + "(Func`1<U>, UInt32) => MethodProfileData`1<U>")]
        public void Profile_Func_1_U_UInt32_MethodProfileData_1_U()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.Profile
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.Profile) + "(Action, String) => Action")]
        public void Profile_Action_String_Action()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.Profile
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.Profile) + "(Action`1<T1>, String) => Action`1<T1>")]
        public void Profile_Action_1_T1_String_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.Profile
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.Profile) + "(Func`1<U>, String) => Func`1<U>")]
        public void Profile_Func_1_U_String_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.Profile
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ThreadExt) + "." + nameof(ThreadExt.Profile) + "(Func`2<T1, U>, String) => Func`2<T1, U>")]
        public void Profile_Func_2_T1_U_String_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.ThreadExt.Profile
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt))]
    public partial class ExceptionExtTester : XUnitOutputTester, IDisposable
        {
        public ExceptionExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Fail) + "(Action`3<T1, T2, T3>) => Action`3<T1, T2, T3>")]
        public void Fail_Action_3_T1_T2_T3_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Fail) + "(Action`4<T1, T2, T3, T4>) => Action`4<T1, T2, T3, T4>")]
        public void Fail_Action_4_T1_T2_T3_T4_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Fail) + "(Func`1<U>) => Func`1<U>")]
        public void Fail_Func_1_U_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Fail) + "(Func`2<T, U>) => Func`2<T, U>")]
        public void Fail_Func_2_T_U_Func_2_T_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Fail) + "(Func`3<T1, T2, U>) => Func`3<T1, T2, U>")]
        public void Fail_Func_3_T1_T2_U_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Fail) + "(Func`4<T1, T2, T3, U>) => Func`4<T1, T2, T3, U>")]
        public void Fail_Func_4_T1_T2_T3_U_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Fail) + "(Func`5<T1, T2, T3, T4, U>) => Func`5<T1, T2, T3, T4, U>")]
        public void Fail_Func_5_T1_T2_T3_T4_U_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Throw) + "(Action, String) => Action")]
        public void Throw_Action_String_Action()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Throw) + "(Action`1<T>, String) => Action`1<T>")]
        public void Throw_Action_1_T_String_Action_1_T()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Throw) + "(Action`2<T1, T2>, String) => Action`2<T1, T2>")]
        public void Throw_Action_2_T1_T2_String_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Throw) + "(Action`3<T1, T2, T3>, String) => Action`3<T1, T2, T3>")]
        public void Throw_Action_3_T1_T2_T3_String_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Throw) + "(Action`4<T1, T2, T3, T4>, String) => Action`4<T1, T2, T3, T4>")]
        public void Throw_Action_4_T1_T2_T3_T4_String_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Throw) + "(Func`1<U>, String) => Func`1<U>")]
        public void Throw_Func_1_U_String_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Throw) + "(Func`2<T, U>, String) => Func`2<T, U>")]
        public void Throw_Func_2_T_U_String_Func_2_T_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Throw) + "(Func`3<T1, T2, U>, String) => Func`3<T1, T2, U>")]
        public void Throw_Func_3_T1_T2_U_String_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Throw) + "(Func`4<T1, T2, T3, U>, String) => Func`4<T1, T2, T3, U>")]
        public void Throw_Func_4_T1_T2_T3_U_String_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Throw) + "(Func`5<T1, T2, T3, T4, U>, String) => Func`5<T1, T2, T3, T4, U>")]
        public void Throw_Func_5_T1_T2_T3_T4_U_String_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report) + "(Action, String, E) => Action")]
        public void Report_Action_String_E_Action()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report) + "(Action`1<T>, String, E) => Action`1<T>")]
        public void Report_Action_1_T_String_E_Action_1_T()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report) + "(Action`2<T1, T2>, String, E) => Action`2<T1, T2>")]
        public void Report_Action_2_T1_T2_String_E_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report) + "(Action`3<T1, T2, T3>, String, E) => Action`3<T1, T2, T3>")]
        public void Report_Action_3_T1_T2_T3_String_E_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report) + "(Action`4<T1, T2, T3, T4>, String, E) => Action`4<T1, T2, T3, T4>")]
        public void Report_Action_4_T1_T2_T3_T4_String_E_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report) + "(Func`1<U>, String, E) => Func`1<U>")]
        public void Report_Func_1_U_String_E_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report) + "(Func`2<T, U>, String, E) => Func`2<T, U>")]
        public void Report_Func_2_T_U_String_E_Func_2_T_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report) + "(Func`3<T1, T2, U>, String, E) => Func`3<T1, T2, U>")]
        public void Report_Func_3_T1_T2_U_String_E_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report) + "(Func`4<T1, T2, T3, U>, String, E) => Func`4<T1, T2, T3, U>")]
        public void Report_Func_4_T1_T2_T3_U_String_E_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report) + "(Func`5<T1, T2, T3, T4, U>, String, E) => Func`5<T1, T2, T3, T4, U>")]
        public void Report_Func_5_T1_T2_T3_T4_U_String_E_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report) + "(Action, E) => Action")]
        public void Report_Action_E_Action()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report) + "(Action`1<T>, E) => Action`1<T>")]
        public void Report_Action_1_T_E_Action_1_T()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report) + "(Action`2<T1, T2>, E) => Action`2<T1, T2>")]
        public void Report_Action_2_T1_T2_E_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report) + "(Action`3<T1, T2, T3>, E) => Action`3<T1, T2, T3>")]
        public void Report_Action_3_T1_T2_T3_E_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report) + "(Action`4<T1, T2, T3, T4>, E) => Action`4<T1, T2, T3, T4>")]
        public void Report_Action_4_T1_T2_T3_T4_E_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report) + "(Func`1<U>, E) => Func`1<U>")]
        public void Report_Func_1_U_E_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report) + "(Func`2<T, U>, E) => Func`2<T, U>")]
        public void Report_Func_2_T_U_E_Func_2_T_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report) + "(Func`3<T1, T2, U>, E) => Func`3<T1, T2, U>")]
        public void Report_Func_3_T1_T2_U_E_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report) + "(Func`4<T1, T2, T3, U>, E) => Func`4<T1, T2, T3, U>")]
        public void Report_Func_4_T1_T2_T3_U_E_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report) + "(Func`5<T1, T2, T3, T4, U>, E) => Func`5<T1, T2, T3, T4, U>")]
        public void Report_Func_5_T1_T2_T3_T4_U_E_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Handle) + "(Action) => Action")]
        public void Handle_Action_Action()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Handle) + "(Action`1<T1>) => Action`1<T1>")]
        public void Handle_Action_1_T1_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Handle) + "(Action`2<T1, T2>) => Action`2<T1, T2>")]
        public void Handle_Action_2_T1_T2_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Handle) + "(Action`3<T1, T2, T3>) => Action`3<T1, T2, T3>")]
        public void Handle_Action_3_T1_T2_T3_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Handle) + "(Action`4<T1, T2, T3, T4>) => Action`4<T1, T2, T3, T4>")]
        public void Handle_Action_4_T1_T2_T3_T4_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Handle) + "(Func`1<U>) => Func`1<U>")]
        public void Handle_Func_1_U_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Handle) + "(Func`2<T1, U>) => Func`2<T1, U>")]
        public void Handle_Func_2_T1_U_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Handle) + "(Func`3<T1, T2, U>) => Func`3<T1, T2, U>")]
        public void Handle_Func_3_T1_T2_U_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Handle) + "(Func`4<T1, T2, T3, U>) => Func`4<T1, T2, T3, U>")]
        public void Handle_Func_4_T1_T2_T3_U_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Handle) + "(Func`5<T1, T2, T3, T4, U>) => Func`5<T1, T2, T3, T4, U>")]
        public void Handle_Func_5_T1_T2_T3_T4_U_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Try) + "(Action) => Func`1<Boolean>")]
        public void Try_Action_Func_1_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Try) + "(Action`1<T1>) => Func`2<T1, Boolean>")]
        public void Try_Action_1_T1_Func_2_T1_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Try) + "(Action`2<T1, T2>) => Func`3<T1, T2, Boolean>")]
        public void Try_Action_2_T1_T2_Func_3_T1_T2_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Try) + "(Action`3<T1, T2, T3>) => Func`4<T1, T2, T3, Boolean>")]
        public void Try_Action_3_T1_T2_T3_Func_4_T1_T2_T3_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Try) + "(Action`4<T1, T2, T3, T4>) => Func`5<T1, T2, T3, T4, Boolean>")]
        public void Try_Action_4_T1_T2_T3_T4_Func_5_T1_T2_T3_T4_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Try) + "(Func`1<U>) => Func`1<U>")]
        public void Try_Func_1_U_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Try) + "(Func`2<T1, U>) => Func`2<T1, U>")]
        public void Try_Func_2_T1_U_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Try) + "(Func`3<T1, T2, U>) => Func`3<T1, T2, U>")]
        public void Try_Func_3_T1_T2_U_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Try) + "(Func`4<T1, T2, T3, U>) => Func`4<T1, T2, T3, U>")]
        public void Try_Func_4_T1_T2_T3_U_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Try) + "(Func`5<T1, T2, T3, T4, U>) => Func`5<T1, T2, T3, T4, U>")]
        public void Try_Func_5_T1_T2_T3_T4_U_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Action, Action`1<Exception>) => Action")]
        public void Catch_Action_Action_1_Exception_Action()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Action`1<T1>, Action`1<Exception>) => Action`1<T1>")]
        public void Catch_Action_1_T1_Action_1_Exception_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Action`2<T1, T2>, Action`1<Exception>) => Action`2<T1, T2>")]
        public void Catch_Action_2_T1_T2_Action_1_Exception_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Action`3<T1, T2, T3>, Action`1<Exception>) => Action`3<T1, T2, T3>")]
        public void Catch_Action_3_T1_T2_T3_Action_1_Exception_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Action`4<T1, T2, T3, T4>, Action`1<Exception>) => Action`4<T1, T2, T3, T4>")]
        public void Catch_Action_4_T1_T2_T3_T4_Action_1_Exception_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Func`1<U>, Action`1<Exception>) => Func`1<U>")]
        public void Catch_Func_1_U_Action_1_Exception_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Func`2<T1, U>, Action`1<Exception>) => Func`2<T1, U>")]
        public void Catch_Func_2_T1_U_Action_1_Exception_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Func`3<T1, T2, U>, Action`1<Exception>) => Func`3<T1, T2, U>")]
        public void Catch_Func_3_T1_T2_U_Action_1_Exception_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Func`4<T1, T2, T3, U>, Action`1<Exception>) => Func`4<T1, T2, T3, U>")]
        public void Catch_Func_4_T1_T2_T3_U_Action_1_Exception_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Func`5<T1, T2, T3, T4, U>, Action`1<Exception>) => Func`5<T1, T2, T3, T4, U>")]
        public void Catch_Func_5_T1_T2_T3_T4_U_Action_1_Exception_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Action, Action`1<E>) => Action")]
        public void Catch_Action_Action_1_E_Action()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Action`1<T1>, Action`1<E>) => Action`1<T1>")]
        public void Catch_Action_1_T1_Action_1_E_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Action`2<T1, T2>, Action`1<E>) => Action`2<T1, T2>")]
        public void Catch_Action_2_T1_T2_Action_1_E_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Action`3<T1, T2, T3>, Action`1<E>) => Action`3<T1, T2, T3>")]
        public void Catch_Action_3_T1_T2_T3_Action_1_E_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Action`4<T1, T2, T3, T4>, Action`1<E>) => Action`4<T1, T2, T3, T4>")]
        public void Catch_Action_4_T1_T2_T3_T4_Action_1_E_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Func`1<U>, Action`1<E>) => Func`1<U>")]
        public void Catch_Func_1_U_Action_1_E_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Func`2<T1, U>, Action`1<E>) => Func`2<T1, U>")]
        public void Catch_Func_2_T1_U_Action_1_E_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Func`3<T1, T2, U>, Action`1<E>) => Func`3<T1, T2, U>")]
        public void Catch_Func_3_T1_T2_U_Action_1_E_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Func`4<T1, T2, T3, U>, Action`1<E>) => Func`4<T1, T2, T3, U>")]
        public void Catch_Func_4_T1_T2_T3_U_Action_1_E_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Func`5<T1, T2, T3, T4, U>, Action`1<E>) => Func`5<T1, T2, T3, T4, U>")]
        public void Catch_Func_5_T1_T2_T3_T4_U_Action_1_E_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Func`1<U>, Func`2<E, U>) => Func`1<U>")]
        public void Catch_Func_1_U_Func_2_E_U_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Func`2<T1, U>, Func`2<E, U>) => Func`2<T1, U>")]
        public void Catch_Func_2_T1_U_Func_2_E_U_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Func`3<T1, T2, U>, Func`2<E, U>) => Func`3<T1, T2, U>")]
        public void Catch_Func_3_T1_T2_U_Func_2_E_U_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Func`4<T1, T2, T3, U>, Func`2<E, U>) => Func`4<T1, T2, T3, U>")]
        public void Catch_Func_4_T1_T2_T3_U_Func_2_E_U_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Func`5<T1, T2, T3, T4, U>, Func`2<E, U>) => Func`5<T1, T2, T3, T4, U>")]
        public void Catch_Func_5_T1_T2_T3_T4_U_Func_2_E_U_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Action) => Action")]
        public void Catch_Action_Action()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Action`1<T1>) => Action`1<T1>")]
        public void Catch_Action_1_T1_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Action`2<T1, T2>) => Action`2<T1, T2>")]
        public void Catch_Action_2_T1_T2_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Action`3<T1, T2, T3>) => Action`3<T1, T2, T3>")]
        public void Catch_Action_3_T1_T2_T3_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Action`4<T1, T2, T3, T4>) => Action`4<T1, T2, T3, T4>")]
        public void Catch_Action_4_T1_T2_T3_T4_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Func`1<U>) => Func`1<U>")]
        public void Catch_Func_1_U_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Func`2<T1, U>) => Func`2<T1, U>")]
        public void Catch_Func_2_T1_U_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Func`3<T1, T2, U>) => Func`3<T1, T2, U>")]
        public void Catch_Func_3_T1_T2_U_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Func`4<T1, T2, T3, U>) => Func`4<T1, T2, T3, U>")]
        public void Catch_Func_4_T1_T2_T3_U_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch) + "(Func`5<T1, T2, T3, T4, U>) => Func`5<T1, T2, T3, T4, U>")]
        public void Catch_Func_5_T1_T2_T3_T4_U_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Retry) + "(Action, Int32) => Action")]
        public void Retry_Action_Int32_Action()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Retry) + "(Action`1<T>, Int32) => Action`1<T>")]
        public void Retry_Action_1_T_Int32_Action_1_T()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Retry) + "(Action`2<T1, T2>, Int32) => Action`2<T1, T2>")]
        public void Retry_Action_2_T1_T2_Int32_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Retry) + "(Action`3<T1, T2, T3>, Int32) => Action`3<T1, T2, T3>")]
        public void Retry_Action_3_T1_T2_T3_Int32_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Retry) + "(Action`4<T1, T2, T3, T4>, Int32) => Action`4<T1, T2, T3, T4>")]
        public void Retry_Action_4_T1_T2_T3_T4_Int32_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Retry) + "(Func`1<U>, Int32) => Func`1<U>")]
        public void Retry_Func_1_U_Int32_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Retry) + "(Func`2<T1, U>, Int32) => Func`2<T1, U>")]
        public void Retry_Func_2_T1_U_Int32_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Retry) + "(Func`3<T1, T2, U>, Int32) => Func`3<T1, T2, U>")]
        public void Retry_Func_3_T1_T2_U_Int32_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Retry) + "(Func`4<T1, T2, T3, U>, Int32) => Func`4<T1, T2, T3, U>")]
        public void Retry_Func_4_T1_T2_T3_U_Int32_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Retry) + "(Func`5<T1, T2, T3, T4, U>, Int32) => Func`5<T1, T2, T3, T4, U>")]
        public void Retry_Func_5_T1_T2_T3_T4_U_Int32_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Debug) + "(Action`1<T1>) => Action`1<T1>")]
        public void Debug_Action_1_T1_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Debug) + "(Action`2<T1, T2>) => Action`2<T1, T2>")]
        public void Debug_Action_2_T1_T2_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Debug) + "(Action`3<T1, T2, T3>) => Action`3<T1, T2, T3>")]
        public void Debug_Action_3_T1_T2_T3_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Debug) + "(Action`4<T1, T2, T3, T4>) => Action`4<T1, T2, T3, T4>")]
        public void Debug_Action_4_T1_T2_T3_T4_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Debug) + "(Func`2<T1, U>) => Func`2<T1, U>")]
        public void Debug_Func_2_T1_U_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Debug) + "(Func`3<T1, T2, U>) => Func`3<T1, T2, U>")]
        public void Debug_Func_3_T1_T2_U_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Debug) + "(Func`4<T1, T2, T3, U>) => Func`4<T1, T2, T3, U>")]
        public void Debug_Func_4_T1_T2_T3_U_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Debug) + "(Func`5<T1, T2, T3, T4, U>) => Func`5<T1, T2, T3, T4, U>")]
        public void Debug_Func_5_T1_T2_T3_T4_U_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Fail) + "(Action) => Action")]
        public void Fail_Action_Action()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Fail) + "(Action`1<T>) => Action`1<T>")]
        public void Fail_Action_1_T_Action_1_T()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Fail) + "(Action`2<T1, T2>) => Action`2<T1, T2>")]
        public void Fail_Action_2_T1_T2_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ConvertibleExt))]
    public partial class ConvertibleExtTester : XUnitOutputTester, IDisposable
        {
        public ConvertibleExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ConvertibleExt) + "." + nameof(ConvertibleExt.CanConvertTo) + "(IConvertible) => Boolean")]
        public void CanConvertTo_IConvertible_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ConvertibleExt.CanConvertTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ConvertibleExt) + "." + nameof(ConvertibleExt.CanConvertTo) + "(IConvertible, Type) => Boolean")]
        public void CanConvertTo_IConvertible_Type_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ConvertibleExt.CanConvertTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ConvertibleExt) + "." + nameof(ConvertibleExt.CanConvertToString) + "(IConvertible) => Boolean")]
        public void CanConvertToString()
            {
            // TODO: Implement method test LCore.Extensions.ConvertibleExt.CanConvertToString
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ConvertibleExt) + "." + nameof(ConvertibleExt.ConvertTo) + "(IConvertible, Type) => Object")]
        public void ConvertTo_IConvertible_Type_Object()
            {
            // TODO: Implement method test LCore.Extensions.ConvertibleExt.ConvertTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ConvertibleExt) + "." + nameof(ConvertibleExt.ConvertTo) + "(IConvertible) => Nullable`1<T>")]
        public void ConvertTo_IConvertible_Nullable_1_T()
            {
            // TODO: Implement method test LCore.Extensions.ConvertibleExt.ConvertTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ConvertibleExt) + "." + nameof(ConvertibleExt.ConvertToString) + "(IConvertible) => String")]
        public void ConvertToString()
            {
            // TODO: Implement method test LCore.Extensions.ConvertibleExt.ConvertToString
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ConvertibleExt) + "." + nameof(ConvertibleExt.TryConvertTo) + "(IConvertible) => IConvertible")]
        public void TryConvertTo()
            {
            // TODO: Implement method test LCore.Extensions.ConvertibleExt.TryConvertTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ConvertibleExt) + "." + nameof(ConvertibleExt.TryConvertToString) + "(IConvertible) => IConvertible")]
        public void TryConvertToString()
            {
            // TODO: Implement method test LCore.Extensions.ConvertibleExt.TryConvertToString
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.ObjectExt))]
    public partial class ObjectExtTester : XUnitOutputTester, IDisposable
        {
        public ObjectExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.ObjectExt) + "." + nameof(global::LCore.Extensions.ObjectExt.HasProperty) + "(Object, String) => Boolean")]
        public void HasProperty()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.ObjectExt) + "." + nameof(global::LCore.Extensions.ObjectExt.Objects_ToString) + "(IEnumerable`1<Object>) => String")]
        public void Objects_ToString()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.ObjectExt) + "." + nameof(global::LCore.Extensions.ObjectExt.GetProperty) + "(Object, String) => Object")]
        public void GetProperty()
            {
            // TODO: Implement method test LCore.Extensions.ObjectExt.GetProperty
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.ObjectExt) + "." + nameof(global::LCore.Extensions.ObjectExt.SetProperty) + "(Object, String, Object)")]
        public void SetProperty()
            {
            // TODO: Implement method test LCore.Extensions.ObjectExt.SetProperty
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.ObjectExt) + "." + nameof(global::LCore.Extensions.ObjectExt.Type) + "(T) => Type")]
        public void Type()
            {
            // Attribute Tests Implemented
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt))]
    public partial class BooleanExtTester
        {
        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Or) + "(IEnumerable`1<Func`4<T1, T2, T3, Boolean>>) => Func`4<T1, T2, T3, Boolean>")]
        public void Or_IEnumerable_1_Func_4_T1_T2_T3_Boolean_Func_4_T1_T2_T3_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Or
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Or) + "(IEnumerable`1<Func`5<T1, T2, T3, T4, Boolean>>) => Func`5<T1, T2, T3, T4, Boolean>")]
        public void Or_IEnumerable_1_Func_5_T1_T2_T3_T4_Boolean_Func_5_T1_T2_T3_T4_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Or
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Not) + "(Func`1<Boolean>) => Func`1<Boolean>")]
        public void Not_Func_1_Boolean_Func_1_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Not
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Not) + "(Func`2<T1, Boolean>) => Func`2<T1, Boolean>")]
        public void Not_Func_2_T1_Boolean_Func_2_T1_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Not
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Not) + "(Func`3<T1, T2, Boolean>) => Func`3<T1, T2, Boolean>")]
        public void Not_Func_3_T1_T2_Boolean_Func_3_T1_T2_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Not
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Not) + "(Func`4<T1, T2, T3, Boolean>) => Func`4<T1, T2, T3, Boolean>")]
        public void Not_Func_4_T1_T2_T3_Boolean_Func_4_T1_T2_T3_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Not
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Not) + "(Func`5<T1, T2, T3, T4, Boolean>) => Func`5<T1, T2, T3, T4, Boolean>")]
        public void Not_Func_5_T1_T2_T3_T4_Boolean_Func_5_T1_T2_T3_T4_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Not
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.If) + "(Action, Func`1<Boolean>) => Func`1<Boolean>")]
        public void If_Action_Func_1_Boolean_Func_1_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.If) + "(Action, Func`2<T, Boolean>) => Func`2<T, Boolean>")]
        public void If_Action_Func_2_T_Boolean_Func_2_T_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.If) + "(Action, Func`3<T1, T2, Boolean>) => Func`3<T1, T2, Boolean>")]
        public void If_Action_Func_3_T1_T2_Boolean_Func_3_T1_T2_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.If) + "(Action, Func`4<T1, T2, T3, Boolean>) => Func`4<T1, T2, T3, Boolean>")]
        public void If_Action_Func_4_T1_T2_T3_Boolean_Func_4_T1_T2_T3_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.If) + "(Action, Func`5<T1, T2, T3, T4, Boolean>) => Func`5<T1, T2, T3, T4, Boolean>")]
        public void If_Action_Func_5_T1_T2_T3_T4_Boolean_Func_5_T1_T2_T3_T4_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.If) + "(Func`1<T>, Func`1<Boolean>) => Func`1<T>")]
        public void If_Func_1_T_Func_1_Boolean_Func_1_T()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.If) + "(Func`1<T1>, Func`2<T2, Boolean>) => Func`2<T2, T1>")]
        public void If_Func_1_T1_Func_2_T2_Boolean_Func_2_T2_T1()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.If) + "(Func`1<T1>, Func`3<T2, T3, Boolean>) => Func`3<T2, T3, T1>")]
        public void If_Func_1_T1_Func_3_T2_T3_Boolean_Func_3_T2_T3_T1()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.If) + "(Func`1<T1>, Func`4<T2, T3, T4, Boolean>) => Func`4<T2, T3, T4, T1>")]
        public void If_Func_1_T1_Func_4_T2_T3_T4_Boolean_Func_4_T2_T3_T4_T1()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.If) + "(Func`1<T1>, Func`5<T2, T3, T4, T5, Boolean>) => Func`5<T2, T3, T4, T5, T1>")]
        public void If_Func_1_T1_Func_5_T2_T3_T4_T5_Boolean_Func_5_T2_T3_T4_T5_T1()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.If) + "(Action, Func`1[]) => Func`1<Boolean>")]
        public void If_Action_Func_1_Func_1_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.If) + "(Action, Func`2[]) => Func`2<T, Boolean>")]
        public void If_Action_Func_2_Func_2_T_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.If) + "(Action, Func`3[]) => Func`3<T1, T2, Boolean>")]
        public void If_Action_Func_3_Func_3_T1_T2_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.If) + "(Action, Func`4[]) => Func`4<T1, T2, T3, Boolean>")]
        public void If_Action_Func_4_Func_4_T1_T2_T3_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.If) + "(Action, Func`5[]) => Func`5<T1, T2, T3, T4, Boolean>")]
        public void If_Action_Func_5_Func_5_T1_T2_T3_T4_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.If) + "(Func`1<T>, Func`1[]) => Func`1<T>")]
        public void If_Func_1_T_Func_1_Func_1_T()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.If) + "(Func`1<T1>, Func`2[]) => Func`2<T2, T1>")]
        public void If_Func_1_T1_Func_2_Func_2_T2_T1()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.If) + "(Func`1<T1>, Func`3[]) => Func`3<T2, T3, T1>")]
        public void If_Func_1_T1_Func_3_Func_3_T2_T3_T1()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.If) + "(Func`1<T1>, Func`4[]) => Func`4<T2, T3, T4, T1>")]
        public void If_Func_1_T1_Func_4_Func_4_T2_T3_T4_T1()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.If) + "(Func`1<T1>, Func`5[]) => Func`5<T2, T3, T4, T5, T1>")]
        public void If_Func_1_T1_Func_5_Func_5_T2_T3_T4_T5_T1()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.ElseIf) + "(Func`1<Boolean>, Func`1<Boolean>, Action) => Func`1<Boolean>")]
        public void ElseIf_Func_1_Boolean_Func_1_Boolean_Action_Func_1_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.ElseIf
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.ElseIf) + "(Func`2<T, Boolean>, Func`2<T, Boolean>, Action`1<T>) => Func`2<T, Boolean>")]
        public void ElseIf_Func_2_T_Boolean_Func_2_T_Boolean_Action_1_T_Func_2_T_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.ElseIf
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.ElseIf) + "(Func`3<T1, T2, Boolean>, Func`3<T1, T2, Boolean>, Action`2<T1, T2>) => Func`3<T1, T2, Boolean>")]
        public void ElseIf_Func_3_T1_T2_Boolean_Func_3_T1_T2_Boolean_Action_2_T1_T2_Func_3_T1_T2_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.ElseIf
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.ElseIf) + "(Func`4<T1, T2, T3, Boolean>, Func`4<T1, T2, T3, Boolean>, Action`3<T1, T2, T3>) => Func`4<T1, T2, T3, Boolean>")]
        public void ElseIf_Func_4_T1_T2_T3_Boolean_Func_4_T1_T2_T3_Boolean_Action_3_T1_T2_T3_Func_4_T1_T2_T3_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.ElseIf
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.ElseIf) + "(Func`5<T1, T2, T3, T4, Boolean>, Func`5<T1, T2, T3, T4, Boolean>, Action`4<T1, T2, T3, T4>) => Func`5<T1, T2, T3, T4, Boolean>")]
        public void ElseIf_Func_5_T1_T2_T3_T4_Boolean_Func_5_T1_T2_T3_T4_Boolean_Action_4_T1_T2_T3_T4_Func_5_T1_T2_T3_T4_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.ElseIf
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.ElseIf) + "(Func`1<U>, Func`1<Boolean>, Func`1<U>) => Func`1<U>")]
        public void ElseIf_Func_1_U_Func_1_Boolean_Func_1_U_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.ElseIf
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.ElseIf) + "(Func`2<T, U>, Func`2<T, Boolean>, Func`2<T, U>) => Func`2<T, U>")]
        public void ElseIf_Func_2_T_U_Func_2_T_Boolean_Func_2_T_U_Func_2_T_U()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.ElseIf
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.ElseIf) + "(Func`3<T1, T2, U>, Func`3<T1, T2, Boolean>, Func`3<T1, T2, U>) => Func`3<T1, T2, U>")]
        public void ElseIf_Func_3_T1_T2_U_Func_3_T1_T2_Boolean_Func_3_T1_T2_U_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.ElseIf
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.ElseIf) + "(Func`4<T1, T2, T3, U>, Func`4<T1, T2, T3, Boolean>, Func`4<T1, T2, T3, U>) => Func`4<T1, T2, T3, U>")]
        public void ElseIf_Func_4_T1_T2_T3_U_Func_4_T1_T2_T3_Boolean_Func_4_T1_T2_T3_U_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.ElseIf
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.ElseIf) + "(Func`5<T1, T2, T3, T4, U>, Func`5<T1, T2, T3, T4, Boolean>, Func`5<T1, T2, T3, T4, U>) => Func`5<T1, T2, T3, T4, U>")]
        public void ElseIf_Func_5_T1_T2_T3_T4_U_Func_5_T1_T2_T3_T4_Boolean_Func_5_T1_T2_T3_T4_U_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.ElseIf
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Else) + "(Func`1<Boolean>, Action) => Action")]
        public void Else_Func_1_Boolean_Action_Action()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Else) + "(Func`2<T1, Boolean>, Action`1<T1>) => Action`1<T1>")]
        public void Else_Func_2_T1_Boolean_Action_1_T1_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Else) + "(Func`3<T1, T2, Boolean>, Action`2<T1, T2>) => Action`2<T1, T2>")]
        public void Else_Func_3_T1_T2_Boolean_Action_2_T1_T2_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Else) + "(Func`4<T1, T2, T3, Boolean>, Action`3<T1, T2, T3>) => Action`3<T1, T2, T3>")]
        public void Else_Func_4_T1_T2_T3_Boolean_Action_3_T1_T2_T3_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Else) + "(Func`5<T1, T2, T3, T4, Boolean>, Action`4<T1, T2, T3, T4>) => Action`4<T1, T2, T3, T4>")]
        public void Else_Func_5_T1_T2_T3_T4_Boolean_Action_4_T1_T2_T3_T4_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Else) + "(Func`1<U>, Func`1<U>) => Func`1<U>")]
        public void Else_Func_1_U_Func_1_U_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Else) + "(Func`2<T1, U>, Func`2<T1, U>) => Func`2<T1, U>")]
        public void Else_Func_2_T1_U_Func_2_T1_U_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Else) + "(Func`3<T1, T2, U>, Func`3<T1, T2, U>) => Func`3<T1, T2, U>")]
        public void Else_Func_3_T1_T2_U_Func_3_T1_T2_U_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Else) + "(Func`4<T1, T2, T3, U>, Func`4<T1, T2, T3, U>) => Func`4<T1, T2, T3, U>")]
        public void Else_Func_4_T1_T2_T3_U_Func_4_T1_T2_T3_U_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Else) + "(Func`5<T1, T2, T3, T4, U>, Func`5<T1, T2, T3, T4, U>) => Func`5<T1, T2, T3, T4, U>")]
        public void Else_Func_5_T1_T2_T3_T4_U_Func_5_T1_T2_T3_T4_U_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Else) + "(Func`1<U>, U) => Func`1<U>")]
        public void Else_Func_1_U_U_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Else) + "(Func`2<T1, U>, U) => Func`2<T1, U>")]
        public void Else_Func_2_T1_U_U_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Else) + "(Func`3<T1, T2, U>, U) => Func`3<T1, T2, U>")]
        public void Else_Func_3_T1_T2_U_U_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Else) + "(Func`4<T1, T2, T3, U>, U) => Func`4<T1, T2, T3, U>")]
        public void Else_Func_4_T1_T2_T3_U_U_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Else) + "(Func`5<T1, T2, T3, T4, U>, U) => Func`5<T1, T2, T3, T4, U>")]
        public void Else_Func_5_T1_T2_T3_T4_U_U_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Unless) + "(Action, Func`1[]) => Func`1<Boolean>")]
        public void Unless_Action_Func_1_Func_1_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Unless) + "(Action, Func`2[]) => Func`2<T, Boolean>")]
        public void Unless_Action_Func_2_Func_2_T_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Unless) + "(Action, Func`3[]) => Func`3<T1, T2, Boolean>")]
        public void Unless_Action_Func_3_Func_3_T1_T2_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Unless) + "(Action, Func`4[]) => Func`4<T1, T2, T3, Boolean>")]
        public void Unless_Action_Func_4_Func_4_T1_T2_T3_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Unless) + "(Action, Func`5[]) => Func`5<T1, T2, T3, T4, Boolean>")]
        public void Unless_Action_Func_5_Func_5_T1_T2_T3_T4_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Unless) + "(Func`1<T>, Func`1[]) => Func`1<T>")]
        public void Unless_Func_1_T_Func_1_Func_1_T()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Unless) + "(Func`1<T1>, Func`2[]) => Func`2<T2, T1>")]
        public void Unless_Func_1_T1_Func_2_Func_2_T2_T1()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Unless) + "(Func`1<T1>, Func`3[]) => Func`3<T2, T3, T1>")]
        public void Unless_Func_1_T1_Func_3_Func_3_T2_T3_T1()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Unless) + "(Func`1<T1>, Func`4[]) => Func`4<T2, T3, T4, T1>")]
        public void Unless_Func_1_T1_Func_4_Func_4_T2_T3_T4_T1()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Unless) + "(Func`1<T1>, Func`5[]) => Func`5<T2, T3, T4, T5, T1>")]
        public void Unless_Func_1_T1_Func_5_Func_5_T2_T3_T4_T5_T1()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.And) + "(IEnumerable`1<Func`1<Boolean>>) => Func`1<Boolean>")]
        public void And_IEnumerable_1_Func_1_Boolean_Func_1_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.And
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.And) + "(IEnumerable`1<Func`2<T1, Boolean>>) => Func`2<T1, Boolean>")]
        public void And_IEnumerable_1_Func_2_T1_Boolean_Func_2_T1_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.And
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.And) + "(IEnumerable`1<Func`3<T1, T2, Boolean>>) => Func`3<T1, T2, Boolean>")]
        public void And_IEnumerable_1_Func_3_T1_T2_Boolean_Func_3_T1_T2_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.And
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.And) + "(IEnumerable`1<Func`4<T1, T2, T3, Boolean>>) => Func`4<T1, T2, T3, Boolean>")]
        public void And_IEnumerable_1_Func_4_T1_T2_T3_Boolean_Func_4_T1_T2_T3_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.And
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.And) + "(IEnumerable`1<Func`5<T1, T2, T3, T4, Boolean>>) => Func`5<T1, T2, T3, T4, Boolean>")]
        public void And_IEnumerable_1_Func_5_T1_T2_T3_T4_Boolean_Func_5_T1_T2_T3_T4_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.And
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Or) + "(IEnumerable`1<Func`1<Boolean>>) => Func`1<Boolean>")]
        public void Or_IEnumerable_1_Func_1_Boolean_Func_1_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Or
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Or) + "(IEnumerable`1<Func`2<T1, Boolean>>) => Func`2<T1, Boolean>")]
        public void Or_IEnumerable_1_Func_2_T1_Boolean_Func_2_T1_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Or
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(BooleanExt) + "." + nameof(BooleanExt.Or) + "(IEnumerable`1<Func`3<T1, T2, Boolean>>) => Func`3<T1, T2, Boolean>")]
        public void Or_IEnumerable_1_Func_3_T1_T2_Boolean_Func_3_T1_T2_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Or
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt))]
    public partial class DictionaryExtTester : XUnitOutputTester, IDisposable
        {
        public DictionaryExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.Flip) + "(Dictionary`2<TKey, TValue>) => Dictionary`2<TValue, TKey>")]
        public void Flip()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flip
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.Merge) + "(IDictionary`2<TKey, TValue>, IDictionary`2<TKey, TValue>, Func`2<KeyValuePair`2<TKey, TValue>, KeyValuePair`2<TKey, TValue>>)")]
        public void Merge()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Merge
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.AddRange) + "(IDictionary`2<TKey, TValue>, IDictionary`2<TKey, TValue>)")]
        public void AddRange()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.AddRange
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.GetAllValues) + "(Dictionary`2<TKey, TValueList>) => List`1<TValue>")]
        public void GetAllValues()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.GetAllValues
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.SafeAdd) + "(IDictionary`2<TKey, TValue>, TKey, TValue)")]
        public void SafeAdd()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.SafeAdd
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.SafeSet) + "(IDictionary`2<TKey, TValue>, TKey, TValue)")]
        public void SafeSet()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.SafeSet
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.SafeGet) + "(IDictionary`2<TKey, TValue>, TKey) => TValue")]
        public void SafeGet()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.SafeGet
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.SafeRemove) + "(Dictionary`2<TKey, TValue>, TKey)")]
        public void SafeRemove()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.SafeRemove
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable`1<Tuple`2<TKey, TValue>>) => Dictionary`2<TKey, List`1<TValue>>")]
        public void ToDictionary_IEnumerable_1_Tuple_2_TKey_TValue_Dictionary_2_TKey_List_1_TValue()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable`1<Tuple`3<TKey, TKey2, TValue>>) => Dictionary`2<TKey, Dictionary`2<TKey2, List`1<TValue>>>")]
        public void ToDictionary_IEnumerable_1_Tuple_3_TKey_TKey2_TValue_Dictionary_2_TKey_Dictionary_2_TKey2_List_1_TValue()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable`1<Tuple`4<TKey, TKey2, TKey3, TValue>>) => Dictionary`2<TKey, Dictionary`2<TKey2, Dictionary`2<TKey3, List`1<TValue>>>>")]
        public void ToDictionary_IEnumerable_1_Tuple_4_TKey_TKey2_TKey3_TValue_Dictionary_2_TKey_Dictionary_2_TKey2_Dictionary_2_TKey3_List_1_TValue()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable`1<Tuple`5<TKey, TKey2, TKey3, TKey4, TValue>>) => Dictionary`2<TKey, Dictionary`2<TKey2, Dictionary`2<TKey3, Dictionary`2<TKey4, List`1<TValue>>>>>")]
        public void ToDictionary_IEnumerable_1_Tuple_5_TKey_TKey2_TKey3_TKey4_TValue_Dictionary_2_TKey_Dictionary_2_TKey2_Dictionary_2_TKey3_Dictionary_2_TKey4_List_1_TValue()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable`1<Tuple`6<TKey, TKey2, TKey3, TKey4, TKey5, TValue>>) => Dictionary`2<TKey, Dictionary`2<TKey2, Dictionary`2<TKey3, Dictionary`2<TKey4, Dictionary`2<TKey5, List`1<TValue>>>>>>")]
        public void ToDictionary_IEnumerable_1_Tuple_6_TKey_TKey2_TKey3_TKey4_TKey5_TValue_Dictionary_2_TKey_Dictionary_2_TKey2_Dictionary_2_TKey3_Dictionary_2_TKey4_Dictionary_2_TKey5_List_1_TValue()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable`1<Tuple`7<TKey, TKey2, TKey3, TKey4, TKey5, TKey6, TValue>>) => Dictionary`2<TKey, Dictionary`2<TKey2, Dictionary`2<TKey3, Dictionary`2<TKey4, Dictionary`2<TKey5, Dictionary`2<TKey6, List`1<TValue>>>>>>>")]
        public void ToDictionary_IEnumerable_1_Tuple_7_TKey_TKey2_TKey3_TKey4_TKey5_TKey6_TValue_Dictionary_2_TKey_Dictionary_2_TKey2_Dictionary_2_TKey3_Dictionary_2_TKey4_Dictionary_2_TKey5_Dictionary_2_TKey6_List_1_TValue()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable`1<Tuple`8<TKey, TKey2, TKey3, TKey4, TKey5, TKey6, TKey7, TValue>>) => Dictionary`2<TKey, Dictionary`2<TKey2, Dictionary`2<TKey3, Dictionary`2<TKey4, Dictionary`2<TKey5, Dictionary`2<TKey6, Dictionary`2<TKey7, List`1<TValue>>>>>>>>")]
        public void ToDictionary_IEnumerable_1_Tuple_8_TKey_TKey2_TKey3_TKey4_TKey5_TKey6_TKey7_TValue_Dictionary_2_TKey_Dictionary_2_TKey2_Dictionary_2_TKey3_Dictionary_2_TKey4_Dictionary_2_TKey5_Dictionary_2_TKey6_Dictionary_2_TKey7_List_1_TValue()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(FileExt))]
    public partial class FileExtTester : XUnitOutputTester, IDisposable
        {
        public FileExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(FileExt) + "." + nameof(FileExt.CleanFileName) + "(String) => String")]
        public void CleanFileName()
            {
            // TODO: Implement method test LCore.Extensions.FileExt.CleanFileName
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(FileExt) + "." + nameof(FileExt.EnsurePathExists) + "(String)")]
        public void EnsurePathExists()
            {
            // TODO: Implement method test LCore.Extensions.FileExt.EnsurePathExists
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(FileExt) + "." + nameof(FileExt.EveryOtherByte) + "(Byte[]) => Byte[]")]
        public void EveryOtherByte()
            {
            // TODO: Implement method test LCore.Extensions.FileExt.EveryOtherByte
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(FileExt) + "." + nameof(FileExt.GetFileStream) + "(String) => FileStream")]
        public void GetFileStream()
            {
            // TODO: Implement method test LCore.Extensions.FileExt.GetFileStream
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(FileExt) + "." + nameof(FileExt.GetFileHash) + "(String) => Byte[]")]
        public void GetFileHash()
            {
            // TODO: Implement method test LCore.Extensions.FileExt.GetFileHash
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(FileExt) + "." + nameof(FileExt.GetMemoryStream) + "(Stream) => MemoryStream")]
        public void GetMemoryStream()
            {
            // TODO: Implement method test LCore.Extensions.FileExt.GetMemoryStream
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(FileExt) + "." + nameof(FileExt.GetStreamHash) + "(Stream) => Byte[]")]
        public void GetStreamHash()
            {
            // TODO: Implement method test LCore.Extensions.FileExt.GetStreamHash
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(FileExt) + "." + nameof(FileExt.GetStringHash) + "(String) => Byte[]")]
        public void GetStringHash()
            {
            // TODO: Implement method test LCore.Extensions.FileExt.GetStringHash
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(FileExt) + "." + nameof(FileExt.ReadAllBytes) + "(Stream) => Byte[]")]
        public void ReadAllBytes()
            {
            // TODO: Implement method test LCore.Extensions.FileExt.ReadAllBytes
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt))]
    public partial class StringExtTester : XUnitOutputTester, IDisposable
        {
        public StringExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Add) + "(String, Char[]) => String")]
        public void Add_String_Char_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Add) + "(String, IEnumerable`1<Char>) => String")]
        public void Add_String_IEnumerable_1_Char_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.After) + "(String, String) => String")]
        public void After()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.AfterLast) + "(String, String) => String")]
        public void AfterLast()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.AlignCenter) + "(String, Int32, Char) => String")]
        public void AlignCenter_String_Int32_Char_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.AlignCenter) + "(String, UInt32, Char) => String")]
        public void AlignCenter_String_UInt32_Char_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.AlignLeft) + "(String, Int32, Char) => String")]
        public void AlignLeft_String_Int32_Char_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.AlignLeft) + "(String, UInt32, Char) => String")]
        public void AlignLeft_String_UInt32_Char_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.AlignRight) + "(String, Int32, Char) => String")]
        public void AlignRight_String_Int32_Char_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.AlignRight) + "(String, UInt32, Char) => String")]
        public void AlignRight_String_UInt32_Char_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Before) + "(String, String) => String")]
        public void Before()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.BeforeLast) + "(String, String) => String")]
        public void BeforeLast()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.ByteArrayToString) + "(Byte[]) => String")]
        public void ByteArrayToString()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.CleanCrlf) + "(String) => String")]
        public void CleanCrlf()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.UnCleanCrlf) + "(String) => String")]
        public void UnCleanCrlf()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Combine) + "(IEnumerable`1<String>, String) => String")]
        public void Combine()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Concatenate) + "(String, Int32, String) => String")]
        public void Concatenate()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.ContainsAny) + "(String, IEnumerable`1<String>) => Boolean")]
        public void ContainsAny()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Count) + "(String, String) => UInt32")]
        public void Count()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Fill) + "(Char, Int32) => String")]
        public void Fill_Char_Int32_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Fill) + "(Char, UInt32) => String")]
        public void Fill_Char_UInt32_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.FirstCaps) + "(String) => String")]
        public void FirstCaps()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.FormatFileSize) + "(Int64, Int32) => String")]
        public void FormatFileSize_Int64_Int32_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.FormatFileSize) + "(Int32, Int32) => String")]
        public void FormatFileSize_Int32_Int32_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.HasMatch) + "(String, String[]) => Boolean")]
        public void HasMatch()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Humanize) + "(String) => String")]
        public void Humanize()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.IsEmpty) + "(String) => Boolean")]
        public void IsEmpty()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.IsNumber) + "(Char) => Boolean")]
        public void IsNumber()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.IsSymmetrical) + "(String, String, Double) => Boolean")]
        public void IsSymmetrical()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.JoinLines) + "(IEnumerable`1<String>, String) => String")]
        public void JoinLines()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Like) + "(String, String) => Boolean")]
        public void Like()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Lines) + "(String) => String[]")]
        public void Lines()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Matches) + "(String, String) => List`1<Match>")]
        public void Matches()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Matches
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Pad) + "(String, Int32, Align, Char) => String")]
        public void Pad_String_Int32_Align_Char_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Pad) + "(String, UInt32, Align, Char) => String")]
        public void Pad_String_UInt32_Align_Char_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Pluralize) + "(String, Int32) => String")]
        public void Pluralize_String_Int32_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Pluralize) + "(String, UInt32) => String")]
        public void Pluralize_String_UInt32_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Pluralize) + "(String) => String")]
        public void Pluralize_String_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.RemoveAll) + "(String, String[]) => String")]
        public void RemoveAll()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.ReplaceAll) + "(String, String, String) => String")]
        public void ReplaceAll_String_String_String_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.ReplaceAll) + "(String, IDictionary`2<String, String>) => String")]
        public void ReplaceAll_String_IDictionary_2_String_String_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.ReplaceAll
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.ReplaceLineEndings) + "(String, String) => String")]
        public void ReplaceLineEndings()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Reverse) + "(String) => String")]
        public void Reverse()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Singularize) + "(String) => String")]
        public void Singularize()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Split) + "(String, String) => String[]")]
        public void Split()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.SplitWithQuotes) + "(String, Char) => List`1<String>")]
        public void SplitWithQuotes()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Sub) + "(String, Int32, Nullable`1<Int32>) => String")]
        public void Sub_String_Int32_Nullable_1_Int32_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Sub) + "(String, UInt32, Nullable`1<UInt32>) => String")]
        public void Sub_String_UInt32_Nullable_1_UInt32_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Surround) + "(String, String, String) => String")]
        public void Surround()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Symmetry) + "(String, String) => Double")]
        public void Symmetry()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Times) + "(String, Int32) => String")]
        public void Times_String_Int32_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Times) + "(String, UInt32) => String")]
        public void Times_String_UInt32_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.ToByteArray) + "(String) => Byte[]")]
        public void ToByteArray()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.ToHexString) + "(Byte[]) => String")]
        public void ToHexString()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.ToStream) + "(String) => Stream")]
        public void ToStream()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.ToStream
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.ToUrlSlug) + "(String) => String")]
        public void ToUrlSlug()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Trim) + "(String, String) => String")]
        public void Trim()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.TrimEnd) + "(String, String) => String")]
        public void TrimEnd()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.TrimStart) + "(String, String) => String")]
        public void TrimStart()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Words) + "(String) => String[]")]
        public void Words()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.XmlClean) + "(String) => String")]
        public void XmlClean()
            {
            // Attribute Tests Implemented
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt))]
    public partial class LogicExtTester : XUnitOutputTester, IDisposable
        {
        public LogicExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Cast) + "(Func`5<T1, T2, T3, T4, U1>) => Func`5<T5, T6, T7, T8, U2>")]
        public void Cast_Func_5_T1_T2_T3_T4_U1_Func_5_T5_T6_T7_T8_U2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Cast
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`5<T2, T3, T4, T5, T1>, Action`1<T1>) => Action`4<T2, T3, T4, T5>")]
        public void Enclose_Func_5_T2_T3_T4_T5_T1_Action_1_T1_Action_4_T2_T3_T4_T5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`1<T1>, Action`2<T1, T2>) => Action`1<T2>")]
        public void Enclose_Func_1_T1_Action_2_T1_T2_Action_1_T2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2) + "(Func`1<T2>, Action`2<T1, T2>) => Action`1<T1>")]
        public void Enclose2_Func_1_T2_Action_2_T1_T2_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`2<T3, T1>, Action`2<T1, T2>) => Action`2<T2, T3>")]
        public void Enclose_Func_2_T3_T1_Action_2_T1_T2_Action_2_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2) + "(Func`2<T3, T2>, Action`2<T1, T2>) => Action`2<T1, T3>")]
        public void Enclose2_Func_2_T3_T2_Action_2_T1_T2_Action_2_T1_T3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`3<T3, T4, T1>, Action`2<T1, T2>) => Action`3<T2, T3, T4>")]
        public void Enclose_Func_3_T3_T4_T1_Action_2_T1_T2_Action_3_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2) + "(Func`3<T3, T4, T2>, Action`2<T1, T2>) => Action`3<T1, T3, T4>")]
        public void Enclose2_Func_3_T3_T4_T2_Action_2_T1_T2_Action_3_T1_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`4<T3, T4, T5, T1>, Action`2<T1, T2>) => Action`4<T2, T3, T4, T5>")]
        public void Enclose_Func_4_T3_T4_T5_T1_Action_2_T1_T2_Action_4_T2_T3_T4_T5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2) + "(Func`4<T3, T4, T5, T2>, Action`2<T1, T2>) => Action`4<T1, T3, T4, T5>")]
        public void Enclose2_Func_4_T3_T4_T5_T2_Action_2_T1_T2_Action_4_T1_T3_T4_T5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`1<T1>, Action`3<T1, T2, T3>) => Action`2<T2, T3>")]
        public void Enclose_Func_1_T1_Action_3_T1_T2_T3_Action_2_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2) + "(Func`1<T2>, Action`3<T1, T2, T3>) => Action`2<T1, T3>")]
        public void Enclose2_Func_1_T2_Action_3_T1_T2_T3_Action_2_T1_T3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose3) + "(Func`1<T3>, Action`3<T1, T2, T3>) => Action`2<T1, T2>")]
        public void Enclose3_Func_1_T3_Action_3_T1_T2_T3_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`2<T4, T1>, Action`3<T1, T2, T3>) => Action`3<T2, T3, T4>")]
        public void Enclose_Func_2_T4_T1_Action_3_T1_T2_T3_Action_3_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2) + "(Func`2<T4, T2>, Action`3<T1, T2, T3>) => Action`3<T1, T3, T4>")]
        public void Enclose2_Func_2_T4_T2_Action_3_T1_T2_T3_Action_3_T1_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose3) + "(Func`2<T4, T3>, Action`3<T1, T2, T3>) => Action`3<T1, T2, T4>")]
        public void Enclose3_Func_2_T4_T3_Action_3_T1_T2_T3_Action_3_T1_T2_T4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`3<T4, T5, T1>, Action`3<T1, T2, T3>) => Action`4<T2, T3, T4, T5>")]
        public void Enclose_Func_3_T4_T5_T1_Action_3_T1_T2_T3_Action_4_T2_T3_T4_T5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2) + "(Func`3<T4, T5, T2>, Action`3<T1, T2, T3>) => Action`4<T1, T3, T4, T5>")]
        public void Enclose2_Func_3_T4_T5_T2_Action_3_T1_T2_T3_Action_4_T1_T3_T4_T5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose3) + "(Func`3<T4, T5, T3>, Action`3<T1, T2, T3>) => Action`4<T1, T2, T4, T5>")]
        public void Enclose3_Func_3_T4_T5_T3_Action_3_T1_T2_T3_Action_4_T1_T2_T4_T5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`1<T1>, Action`4<T1, T2, T3, T4>) => Action`3<T2, T3, T4>")]
        public void Enclose_Func_1_T1_Action_4_T1_T2_T3_T4_Action_3_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2) + "(Func`1<T2>, Action`4<T1, T2, T3, T4>) => Action`3<T1, T3, T4>")]
        public void Enclose2_Func_1_T2_Action_4_T1_T2_T3_T4_Action_3_T1_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose3) + "(Func`1<T3>, Action`4<T1, T2, T3, T4>) => Action`3<T1, T2, T4>")]
        public void Enclose3_Func_1_T3_Action_4_T1_T2_T3_T4_Action_3_T1_T2_T4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose4) + "(Func`1<T4>, Action`4<T1, T2, T3, T4>) => Action`3<T1, T2, T3>")]
        public void Enclose4_Func_1_T4_Action_4_T1_T2_T3_T4_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`2<T5, T1>, Action`4<T1, T2, T3, T4>) => Action`4<T2, T3, T4, T5>")]
        public void Enclose_Func_2_T5_T1_Action_4_T1_T2_T3_T4_Action_4_T2_T3_T4_T5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2) + "(Func`2<T5, T2>, Action`4<T1, T2, T3, T4>) => Action`4<T1, T3, T4, T5>")]
        public void Enclose2_Func_2_T5_T2_Action_4_T1_T2_T3_T4_Action_4_T1_T3_T4_T5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose3) + "(Func`2<T5, T3>, Action`4<T1, T2, T3, T4>) => Action`4<T1, T2, T4, T5>")]
        public void Enclose3_Func_2_T5_T3_Action_4_T1_T2_T3_T4_Action_4_T1_T2_T4_T5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose4) + "(Func`2<T5, T4>, Action`4<T1, T2, T3, T4>) => Action`4<T1, T2, T3, T5>")]
        public void Enclose4_Func_2_T5_T4_Action_4_T1_T2_T3_T4_Action_4_T1_T2_T3_T5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`1<T1>, Func`2<T1, U>) => Func`1<U>")]
        public void Enclose_Func_1_T1_Func_2_T1_U_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`2<T1, T2>, Func`2<T2, U>) => Func`2<T1, U>")]
        public void Enclose_Func_2_T1_T2_Func_2_T2_U_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`3<T1, T2, T3>, Func`2<T3, U>) => Func`3<T1, T2, U>")]
        public void Enclose_Func_3_T1_T2_T3_Func_2_T3_U_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`4<T1, T2, T3, T4>, Func`2<T4, U>) => Func`4<T1, T2, T3, U>")]
        public void Enclose_Func_4_T1_T2_T3_T4_Func_2_T4_U_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`5<T1, T2, T3, T4, T5>, Func`2<T5, U>) => Func`5<T1, T2, T3, T4, U>")]
        public void Enclose_Func_5_T1_T2_T3_T4_T5_Func_2_T5_U_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`1<T1>, Func`3<T1, T2, U>) => Func`2<T2, U>")]
        public void Enclose_Func_1_T1_Func_3_T1_T2_U_Func_2_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2) + "(Func`1<T2>, Func`3<T1, T2, U>) => Func`2<T1, U>")]
        public void Enclose2_Func_1_T2_Func_3_T1_T2_U_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`2<T3, T1>, Func`3<T1, T2, U>) => Func`3<T2, T3, U>")]
        public void Enclose_Func_2_T3_T1_Func_3_T1_T2_U_Func_3_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2) + "(Func`2<T3, T2>, Func`3<T1, T2, U>) => Func`3<T1, T3, U>")]
        public void Enclose2_Func_2_T3_T2_Func_3_T1_T2_U_Func_3_T1_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`3<T3, T4, T1>, Func`3<T1, T2, U>) => Func`4<T2, T3, T4, U>")]
        public void Enclose_Func_3_T3_T4_T1_Func_3_T1_T2_U_Func_4_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2) + "(Func`3<T3, T4, T2>, Func`3<T1, T2, U>) => Func`4<T1, T3, T4, U>")]
        public void Enclose2_Func_3_T3_T4_T2_Func_3_T1_T2_U_Func_4_T1_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`4<T3, T4, T5, T1>, Func`3<T1, T2, U>) => Func`5<T2, T3, T4, T5, U>")]
        public void Enclose_Func_4_T3_T4_T5_T1_Func_3_T1_T2_U_Func_5_T2_T3_T4_T5_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2) + "(Func`4<T3, T4, T5, T2>, Func`3<T1, T2, U>) => Func`5<T1, T3, T4, T5, U>")]
        public void Enclose2_Func_4_T3_T4_T5_T2_Func_3_T1_T2_U_Func_5_T1_T3_T4_T5_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`1<T1>, Func`4<T1, T2, T3, U>) => Func`3<T2, T3, U>")]
        public void Enclose_Func_1_T1_Func_4_T1_T2_T3_U_Func_3_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2) + "(Func`1<T2>, Func`4<T1, T2, T3, U>) => Func`3<T1, T3, U>")]
        public void Enclose2_Func_1_T2_Func_4_T1_T2_T3_U_Func_3_T1_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose3) + "(Func`1<T3>, Func`4<T1, T2, T3, U>) => Func`3<T1, T2, U>")]
        public void Enclose3_Func_1_T3_Func_4_T1_T2_T3_U_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`2<T4, T1>, Func`4<T1, T2, T3, U>) => Func`4<T2, T3, T4, U>")]
        public void Enclose_Func_2_T4_T1_Func_4_T1_T2_T3_U_Func_4_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2) + "(Func`2<T4, T2>, Func`4<T1, T2, T3, U>) => Func`4<T1, T3, T4, U>")]
        public void Enclose2_Func_2_T4_T2_Func_4_T1_T2_T3_U_Func_4_T1_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose3) + "(Func`2<T4, T3>, Func`4<T1, T2, T3, U>) => Func`4<T1, T2, T4, U>")]
        public void Enclose3_Func_2_T4_T3_Func_4_T1_T2_T3_U_Func_4_T1_T2_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`3<T4, T5, T1>, Func`4<T1, T2, T3, U>) => Func`5<T2, T3, T4, T5, U>")]
        public void Enclose_Func_3_T4_T5_T1_Func_4_T1_T2_T3_U_Func_5_T2_T3_T4_T5_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2) + "(Func`3<T4, T5, T2>, Func`4<T1, T2, T3, U>) => Func`5<T1, T3, T4, T5, U>")]
        public void Enclose2_Func_3_T4_T5_T2_Func_4_T1_T2_T3_U_Func_5_T1_T3_T4_T5_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose3) + "(Func`3<T4, T5, T3>, Func`4<T1, T2, T3, U>) => Func`5<T1, T2, T4, T5, U>")]
        public void Enclose3_Func_3_T4_T5_T3_Func_4_T1_T2_T3_U_Func_5_T1_T2_T4_T5_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`1<T1>, Func`5<T1, T2, T3, T4, U>) => Func`4<T2, T3, T4, U>")]
        public void Enclose_Func_1_T1_Func_5_T1_T2_T3_T4_U_Func_4_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2) + "(Func`1<T2>, Func`5<T1, T2, T3, T4, U>) => Func`4<T1, T3, T4, U>")]
        public void Enclose2_Func_1_T2_Func_5_T1_T2_T3_T4_U_Func_4_T1_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose3) + "(Func`1<T3>, Func`5<T1, T2, T3, T4, U>) => Func`4<T1, T2, T4, U>")]
        public void Enclose3_Func_1_T3_Func_5_T1_T2_T3_T4_U_Func_4_T1_T2_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose4) + "(Func`1<T4>, Func`5<T1, T2, T3, T4, U>) => Func`4<T1, T2, T3, U>")]
        public void Enclose4_Func_1_T4_Func_5_T1_T2_T3_T4_U_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`2<T5, T1>, Func`5<T1, T2, T3, T4, U>) => Func`5<T2, T3, T4, T5, U>")]
        public void Enclose_Func_2_T5_T1_Func_5_T1_T2_T3_T4_U_Func_5_T2_T3_T4_T5_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2) + "(Func`2<T5, T2>, Func`5<T1, T2, T3, T4, U>) => Func`5<T1, T3, T4, T5, U>")]
        public void Enclose2_Func_2_T5_T2_Func_5_T1_T2_T3_T4_U_Func_5_T1_T3_T4_T5_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose3) + "(Func`2<T5, T3>, Func`5<T1, T2, T3, T4, U>) => Func`5<T1, T2, T4, T5, U>")]
        public void Enclose3_Func_2_T5_T3_Func_5_T1_T2_T3_T4_U_Func_5_T1_T2_T4_T5_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose4) + "(Func`2<T5, T4>, Func`5<T1, T2, T3, T4, U>) => Func`5<T1, T2, T3, T5, U>")]
        public void Enclose4_Func_2_T5_T4_Func_5_T1_T2_T3_T4_U_Func_5_T1_T2_T3_T5_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Cast) + "(Action`1<T1>) => Action`1<U1>")]
        public void Cast_Action_1_T1_Action_1_U1()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Cast
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Cast) + "(Action`2<T1, T2>) => Action`2<U1, U2>")]
        public void Cast_Action_2_T1_T2_Action_2_U1_U2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Cast
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Cast) + "(Action`3<T1, T2, T3>) => Action`3<U1, U2, U3>")]
        public void Cast_Action_3_T1_T2_T3_Action_3_U1_U2_U3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Cast
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Cast) + "(Action`4<T1, T2, T3, T4>) => Action`4<U1, U2, U3, U4>")]
        public void Cast_Action_4_T1_T2_T3_T4_Action_4_U1_U2_U3_U4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Cast
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Cast) + "(Func`1<U1>) => Func`1<U2>")]
        public void Cast_Func_1_U1_Func_1_U2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Cast
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Cast) + "(Func`2<T1, U1>) => Func`2<T2, U2>")]
        public void Cast_Func_2_T1_U1_Func_2_T2_U2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Cast
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Cast) + "(Func`3<T1, T2, U1>) => Func`3<T3, T4, U2>")]
        public void Cast_Func_3_T1_T2_U1_Func_3_T3_T4_U2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Cast
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Cast) + "(Func`4<T1, T2, T3, U1>) => Func`4<T4, T5, T6, U2>")]
        public void Cast_Func_4_T1_T2_T3_U1_Func_4_T4_T5_T6_U2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Cast
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Action`1<U>, Func`1<U>) => Action")]
        public void Surround_Action_1_U_Func_1_U_Action()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Action`1<U>, Func`2<T1, U>) => Action`1<T1>")]
        public void Surround_Action_1_U_Func_2_T1_U_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Action`1<U>, Func`3<T1, T2, U>) => Action`2<T1, T2>")]
        public void Surround_Action_1_U_Func_3_T1_T2_U_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Action`1<U>, Func`4<T1, T2, T3, U>) => Action`3<T1, T2, T3>")]
        public void Surround_Action_1_U_Func_4_T1_T2_T3_U_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Action`1<U>, Func`5<T1, T2, T3, T4, U>) => Action`4<T1, T2, T3, T4>")]
        public void Surround_Action_1_U_Func_5_T1_T2_T3_T4_U_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Action`2<T1, T2>, Func`1<T1>) => Action`1<T2>")]
        public void Surround_Action_2_T1_T2_Func_1_T1_Action_1_T2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2) + "(Action`2<T1, T2>, Func`1<T2>) => Action`1<T1>")]
        public void Surround2_Action_2_T1_T2_Func_1_T2_Action_1_T1()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Action`2<T1, T2>, Func`2<T3, T1>) => Action`2<T2, T3>")]
        public void Surround_Action_2_T1_T2_Func_2_T3_T1_Action_2_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2) + "(Action`2<T1, T2>, Func`2<T3, T2>) => Action`2<T1, T3>")]
        public void Surround2_Action_2_T1_T2_Func_2_T3_T2_Action_2_T1_T3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Action`2<T1, T2>, Func`3<T3, T4, T1>) => Action`3<T2, T3, T4>")]
        public void Surround_Action_2_T1_T2_Func_3_T3_T4_T1_Action_3_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2) + "(Action`2<T1, T2>, Func`3<T3, T4, T2>) => Action`3<T1, T3, T4>")]
        public void Surround2_Action_2_T1_T2_Func_3_T3_T4_T2_Action_3_T1_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Action`2<T1, T2>, Func`4<T3, T4, T5, T1>) => Action`4<T2, T3, T4, T5>")]
        public void Surround_Action_2_T1_T2_Func_4_T3_T4_T5_T1_Action_4_T2_T3_T4_T5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2) + "(Action`2<T1, T2>, Func`4<T3, T4, T5, T2>) => Action`4<T1, T3, T4, T5>")]
        public void Surround2_Action_2_T1_T2_Func_4_T3_T4_T5_T2_Action_4_T1_T3_T4_T5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Action`3<T1, T2, T3>, Func`1<T1>) => Action`2<T2, T3>")]
        public void Surround_Action_3_T1_T2_T3_Func_1_T1_Action_2_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2) + "(Action`3<T1, T2, T3>, Func`1<T2>) => Action`2<T1, T3>")]
        public void Surround2_Action_3_T1_T2_T3_Func_1_T2_Action_2_T1_T3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround3) + "(Action`3<T1, T2, T3>, Func`1<T3>) => Action`2<T1, T2>")]
        public void Surround3_Action_3_T1_T2_T3_Func_1_T3_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Action`3<T1, T2, T3>, Func`2<T4, T1>) => Action`3<T2, T3, T4>")]
        public void Surround_Action_3_T1_T2_T3_Func_2_T4_T1_Action_3_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2) + "(Action`3<T1, T2, T3>, Func`2<T4, T2>) => Action`3<T1, T3, T4>")]
        public void Surround2_Action_3_T1_T2_T3_Func_2_T4_T2_Action_3_T1_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround3) + "(Action`3<T1, T2, T3>, Func`2<T4, T3>) => Action`3<T1, T2, T4>")]
        public void Surround3_Action_3_T1_T2_T3_Func_2_T4_T3_Action_3_T1_T2_T4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Action`3<T1, T2, T3>, Func`3<T4, T5, T1>) => Action`4<T2, T3, T4, T5>")]
        public void Surround_Action_3_T1_T2_T3_Func_3_T4_T5_T1_Action_4_T2_T3_T4_T5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2) + "(Action`3<T1, T2, T3>, Func`3<T4, T5, T2>) => Action`4<T1, T3, T4, T5>")]
        public void Surround2_Action_3_T1_T2_T3_Func_3_T4_T5_T2_Action_4_T1_T3_T4_T5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround3) + "(Action`3<T1, T2, T3>, Func`3<T4, T5, T3>) => Action`4<T1, T2, T4, T5>")]
        public void Surround3_Action_3_T1_T2_T3_Func_3_T4_T5_T3_Action_4_T1_T2_T4_T5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Action`4<T1, T2, T3, T4>, Func`1<T1>) => Action`3<T2, T3, T4>")]
        public void Surround_Action_4_T1_T2_T3_T4_Func_1_T1_Action_3_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2) + "(Action`4<T1, T2, T3, T4>, Func`1<T2>) => Action`3<T1, T3, T4>")]
        public void Surround2_Action_4_T1_T2_T3_T4_Func_1_T2_Action_3_T1_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround3) + "(Action`4<T1, T2, T3, T4>, Func`1<T3>) => Action`3<T1, T2, T4>")]
        public void Surround3_Action_4_T1_T2_T3_T4_Func_1_T3_Action_3_T1_T2_T4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround4) + "(Action`4<T1, T2, T3, T4>, Func`1<T4>) => Action`3<T1, T2, T3>")]
        public void Surround4_Action_4_T1_T2_T3_T4_Func_1_T4_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Action`4<T1, T2, T3, T4>, Func`2<T5, T1>) => Action`4<T2, T3, T4, T5>")]
        public void Surround_Action_4_T1_T2_T3_T4_Func_2_T5_T1_Action_4_T2_T3_T4_T5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2) + "(Action`4<T1, T2, T3, T4>, Func`2<T5, T2>) => Action`4<T1, T3, T4, T5>")]
        public void Surround2_Action_4_T1_T2_T3_T4_Func_2_T5_T2_Action_4_T1_T3_T4_T5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround3) + "(Action`4<T1, T2, T3, T4>, Func`2<T5, T3>) => Action`4<T1, T2, T4, T5>")]
        public void Surround3_Action_4_T1_T2_T3_T4_Func_2_T5_T3_Action_4_T1_T2_T4_T5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround4) + "(Action`4<T1, T2, T3, T4>, Func`2<T5, T4>) => Action`4<T1, T2, T3, T5>")]
        public void Surround4_Action_4_T1_T2_T3_T4_Func_2_T5_T4_Action_4_T1_T2_T3_T5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Func`2<T1, U>, Func`1<T1>) => Func`1<U>")]
        public void Surround_Func_2_T1_U_Func_1_T1_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Func`2<T2, U>, Func`2<T1, T2>) => Func`2<T1, U>")]
        public void Surround_Func_2_T2_U_Func_2_T1_T2_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Func`2<T3, U>, Func`3<T1, T2, T3>) => Func`3<T1, T2, U>")]
        public void Surround_Func_2_T3_U_Func_3_T1_T2_T3_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Func`2<T4, U>, Func`4<T1, T2, T3, T4>) => Func`4<T1, T2, T3, U>")]
        public void Surround_Func_2_T4_U_Func_4_T1_T2_T3_T4_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Func`2<T5, U>, Func`5<T1, T2, T3, T4, T5>) => Func`5<T1, T2, T3, T4, U>")]
        public void Surround_Func_2_T5_U_Func_5_T1_T2_T3_T4_T5_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Func`3<T1, T2, U>, Func`1<T1>) => Func`2<T2, U>")]
        public void Surround_Func_3_T1_T2_U_Func_1_T1_Func_2_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2) + "(Func`3<T1, T2, U>, Func`1<T2>) => Func`2<T1, U>")]
        public void Surround2_Func_3_T1_T2_U_Func_1_T2_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Func`3<T1, T2, U>, Func`2<T3, T1>) => Func`3<T2, T3, U>")]
        public void Surround_Func_3_T1_T2_U_Func_2_T3_T1_Func_3_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2) + "(Func`3<T1, T2, U>, Func`2<T3, T2>) => Func`3<T1, T3, U>")]
        public void Surround2_Func_3_T1_T2_U_Func_2_T3_T2_Func_3_T1_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Func`3<T1, T2, U>, Func`3<T3, T4, T1>) => Func`4<T2, T3, T4, U>")]
        public void Surround_Func_3_T1_T2_U_Func_3_T3_T4_T1_Func_4_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2) + "(Func`3<T1, T2, U>, Func`3<T3, T4, T2>) => Func`4<T1, T3, T4, U>")]
        public void Surround2_Func_3_T1_T2_U_Func_3_T3_T4_T2_Func_4_T1_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Func`3<T1, T2, U>, Func`4<T3, T4, T5, T1>) => Func`5<T2, T3, T4, T5, U>")]
        public void Surround_Func_3_T1_T2_U_Func_4_T3_T4_T5_T1_Func_5_T2_T3_T4_T5_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2) + "(Func`3<T1, T2, U>, Func`4<T3, T4, T5, T2>) => Func`5<T1, T3, T4, T5, U>")]
        public void Surround2_Func_3_T1_T2_U_Func_4_T3_T4_T5_T2_Func_5_T1_T3_T4_T5_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Func`4<T1, T2, T3, U>, Func`1<T1>) => Func`3<T2, T3, U>")]
        public void Surround_Func_4_T1_T2_T3_U_Func_1_T1_Func_3_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2) + "(Func`4<T1, T2, T3, U>, Func`1<T2>) => Func`3<T1, T3, U>")]
        public void Surround2_Func_4_T1_T2_T3_U_Func_1_T2_Func_3_T1_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround3) + "(Func`4<T1, T2, T3, U>, Func`1<T3>) => Func`3<T1, T2, U>")]
        public void Surround3_Func_4_T1_T2_T3_U_Func_1_T3_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Func`4<T1, T2, T3, U>, Func`2<T4, T1>) => Func`4<T2, T3, T4, U>")]
        public void Surround_Func_4_T1_T2_T3_U_Func_2_T4_T1_Func_4_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2) + "(Func`4<T1, T2, T3, U>, Func`2<T4, T2>) => Func`4<T1, T3, T4, U>")]
        public void Surround2_Func_4_T1_T2_T3_U_Func_2_T4_T2_Func_4_T1_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround3) + "(Func`4<T1, T2, T3, U>, Func`2<T4, T3>) => Func`4<T1, T2, T4, U>")]
        public void Surround3_Func_4_T1_T2_T3_U_Func_2_T4_T3_Func_4_T1_T2_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Func`4<T1, T2, T3, U>, Func`3<T4, T5, T1>) => Func`5<T2, T3, T4, T5, U>")]
        public void Surround_Func_4_T1_T2_T3_U_Func_3_T4_T5_T1_Func_5_T2_T3_T4_T5_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2) + "(Func`4<T1, T2, T3, U>, Func`3<T4, T5, T2>) => Func`5<T1, T3, T4, T5, U>")]
        public void Surround2_Func_4_T1_T2_T3_U_Func_3_T4_T5_T2_Func_5_T1_T3_T4_T5_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround3) + "(Func`4<T1, T2, T3, U>, Func`3<T4, T5, T3>) => Func`5<T1, T2, T4, T5, U>")]
        public void Surround3_Func_4_T1_T2_T3_U_Func_3_T4_T5_T3_Func_5_T1_T2_T4_T5_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Func`5<T1, T2, T3, T4, U>, Func`1<T1>) => Func`4<T2, T3, T4, U>")]
        public void Surround_Func_5_T1_T2_T3_T4_U_Func_1_T1_Func_4_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2) + "(Func`5<T1, T2, T3, T4, U>, Func`1<T2>) => Func`4<T1, T3, T4, U>")]
        public void Surround2_Func_5_T1_T2_T3_T4_U_Func_1_T2_Func_4_T1_T3_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround3) + "(Func`5<T1, T2, T3, T4, U>, Func`1<T3>) => Func`4<T1, T2, T4, U>")]
        public void Surround3_Func_5_T1_T2_T3_T4_U_Func_1_T3_Func_4_T1_T2_T4_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround4) + "(Func`5<T1, T2, T3, T4, U>, Func`1<T4>) => Func`4<T1, T2, T3, U>")]
        public void Surround4_Func_5_T1_T2_T3_T4_U_Func_1_T4_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround) + "(Func`5<T1, T2, T3, T4, U>, Func`2<T5, T1>) => Func`5<T2, T3, T4, T5, U>")]
        public void Surround_Func_5_T1_T2_T3_T4_U_Func_2_T5_T1_Func_5_T2_T3_T4_T5_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2) + "(Func`5<T1, T2, T3, T4, U>, Func`2<T5, T2>) => Func`5<T1, T3, T4, T5, U>")]
        public void Surround2_Func_5_T1_T2_T3_T4_U_Func_2_T5_T2_Func_5_T1_T3_T4_T5_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround3) + "(Func`5<T1, T2, T3, T4, U>, Func`2<T5, T3>) => Func`5<T1, T2, T4, T5, U>")]
        public void Surround3_Func_5_T1_T2_T3_T4_U_Func_2_T5_T3_Func_5_T1_T2_T4_T5_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround4) + "(Func`5<T1, T2, T3, T4, U>, Func`2<T5, T4>) => Func`5<T1, T2, T3, T5, U>")]
        public void Surround4_Func_5_T1_T2_T3_T4_U_Func_2_T5_T4_Func_5_T1_T2_T3_T5_U()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`1<T1>, Action`1<T1>) => Action")]
        public void Enclose_Func_1_T1_Action_1_T1_Action()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`2<T2, T1>, Action`1<T1>) => Action`1<T2>")]
        public void Enclose_Func_2_T2_T1_Action_1_T1_Action_1_T2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`3<T2, T3, T1>, Action`1<T1>) => Action`2<T2, T3>")]
        public void Enclose_Func_3_T2_T3_T1_Action_1_T1_Action_2_T2_T3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose) + "(Func`4<T2, T3, T4, T1>, Action`1<T1>) => Action`3<T2, T3, T4>")]
        public void Enclose_Func_4_T2_T3_T4_T1_Action_1_T1_Action_3_T2_T3_T4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt))]
    public partial class EnumerableExtTester : XUnitOutputTester, IDisposable
        {
        public EnumerableExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.RemoveDuplicates) + "(T[]) => T[]")]
        public void RemoveDuplicates_T_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveDuplicates
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.RemoveDuplicates) + "(IEnumerable) => List`1<T>")]
        public void RemoveDuplicates_IEnumerable_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveDuplicates
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Mirror) + "(T[]) => T[]")]
        public void Mirror_T_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Mirror
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Mirror) + "(IEnumerable`1<T>) => List`1<T>")]
        public void Mirror_IEnumerable_1_T_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Mirror
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Mirror) + "(IEnumerable) => List`1<T>")]
        public void Mirror_IEnumerable_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Mirror
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Select) + "(T[], Func`2<T, Boolean>) => T[]")]
        public void Select_T_Func_2_T_Boolean_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Select
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Select) + "(IEnumerable`1<T>, Func`2<T, Boolean>) => List`1<T>")]
        public void Select_IEnumerable_1_T_Func_2_T_Boolean_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Select
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Select) + "(IEnumerable, Func`2<T, Boolean>) => List`1<T>")]
        public void Select_IEnumerable_Func_2_T_Boolean_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Select
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Select) + "(IEnumerable, Func`3<Int32, T, Boolean>) => List`1<T>")]
        public void Select_IEnumerable_Func_3_Int32_T_Boolean_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Select
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Select) + "(T[], Func`3<Int32, T, Boolean>) => T[]")]
        public void Select_T_Func_3_Int32_T_Boolean_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Select
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Select) + "(List`1<T>, Func`3<Int32, T, Boolean>) => List`1<T>")]
        public void Select_List_1_T_Func_3_Int32_T_Boolean_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Select
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Select) + "(IEnumerable`1<T>, Func`3<Int32, T, Boolean>) => List`1<T>")]
        public void Select_IEnumerable_1_T_Func_3_Int32_T_Boolean_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Select
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.SetAt) + "(IEnumerable, Int32, T)")]
        public void SetAt_IEnumerable_Int32_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.SetAt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.SetAt) + "(IEnumerable, UInt32, T)")]
        public void SetAt_IEnumerable_UInt32_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.SetAt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.SetAt) + "(IEnumerable`1<T>, Int32, T)")]
        public void SetAt_IEnumerable_1_T_Int32_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.SetAt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.SetAt) + "(IEnumerable`1<T>, UInt32, T)")]
        public void SetAt_IEnumerable_1_T_UInt32_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.SetAt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Shuffle) + "(IEnumerable`1<T>) => List`1<T>")]
        public void Shuffle_IEnumerable_1_T_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Shuffle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Shuffle) + "(T[]) => T[]")]
        public void Shuffle_T_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Shuffle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Shuffle) + "(IEnumerable) => List`1<T>")]
        public void Shuffle_IEnumerable_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Shuffle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Sort) + "(IList)")]
        public void Sort_IList()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Sort
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Sort) + "(IList`1<T>, Func`3<T, T, Int32>)")]
        public void Sort_IList_1_T_Func_3_T_T_Int32()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Sort
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Sort) + "(IList`1<T>, Func`2<T, IComparable>)")]
        public void Sort_IList_1_T_Func_2_T_IComparable()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Sort
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Sum) + "(IEnumerable`1<T>, Func`2<T, U>) => UInt32")]
        public void Sum()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Sum
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Swap) + "(T[], Int32, Int32)")]
        public void Swap_T_Int32_Int32()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Swap
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Swap) + "(IList, Int32, Int32)")]
        public void Swap_IList_Int32_Int32()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Swap
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.TotalCount) + "(IEnumerable) => Int32")]
        public void TotalCount()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.TotalCount
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.While) + "(IEnumerable, Func`2<T, Boolean>) => Boolean")]
        public void While_IEnumerable_Func_2_T_Boolean_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.While) + "(IEnumerable, Func`3<Int32, T, Boolean>) => Boolean")]
        public void While_IEnumerable_Func_3_Int32_T_Boolean_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.While) + "(IEnumerable`1<T>, Func`2<T, Boolean>) => Boolean")]
        public void While_IEnumerable_1_T_Func_2_T_Boolean_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.While) + "(IEnumerable`1<T>, Func`3<Int32, T, Boolean>) => Boolean")]
        public void While_IEnumerable_1_T_Func_3_Int32_T_Boolean_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.While) + "(Action`1<T>, Func`1<Boolean>, IEnumerable`1<T>)")]
        public void While_Action_1_T_Func_1_Boolean_IEnumerable_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.First) + "(IEnumerable`1<T>, Int32, Func`2<T, Boolean>) => List`1<T>")]
        public void First_IEnumerable_1_T_Int32_Func_2_T_Boolean_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.First) + "(IEnumerable`1<T>, UInt32, Func`2<T, Boolean>) => List`1<T>")]
        public void First_IEnumerable_1_T_UInt32_Func_2_T_Boolean_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.First) + "(T[], Int32, Func`2<T, Boolean>) => T[]")]
        public void First_T_Int32_Func_2_T_Boolean_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.First) + "(T[], UInt32, Func`2<T, Boolean>) => T[]")]
        public void First_T_UInt32_Func_2_T_Boolean_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.First) + "(IEnumerable, T) => T")]
        public void First_IEnumerable_T_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Flatten) + "(IEnumerable) => List`1<T>")]
        public void Flatten()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Flatten
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.GetAt) + "(IEnumerable, Int32) => Object")]
        public void GetAt_IEnumerable_Int32_Object()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GetAt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.GetAt) + "(IEnumerable, UInt32) => Object")]
        public void GetAt_IEnumerable_UInt32_Object()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GetAt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.GetAt) + "(IEnumerable`1<T>, Int32) => T")]
        public void GetAt_IEnumerable_1_T_Int32_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GetAt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.GetAt) + "(IEnumerable`1<T>, UInt32) => T")]
        public void GetAt_IEnumerable_1_T_UInt32_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GetAt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.GetAtIndices) + "(T[], Int32[]) => T[]")]
        public void GetAtIndices_T_Int32_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GetAtIndices
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.GetAtIndices) + "(IEnumerable, Int32[]) => List`1<T>")]
        public void GetAtIndices_IEnumerable_Int32_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GetAtIndices
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.GetAtIndices) + "(IEnumerable`1<T>, Int32[]) => List`1<T>")]
        public void GetAtIndices_IEnumerable_1_T_Int32_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GetAtIndices
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Group) + "(IEnumerable`1<T>) => Dictionary`2<String, List`1<T>>")]
        public void Group_IEnumerable_1_T_Dictionary_2_String_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Group
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Group) + "(IEnumerable`1<TValue>, Func`2<TValue, TKey>) => Dictionary`2<TKey, List`1<TValue>>")]
        public void Group_IEnumerable_1_TValue_Func_2_TValue_TKey_Dictionary_2_TKey_List_1_TValue()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Group
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.GroupTwice) + "(IEnumerable`1<T>, Func`2<T, U>, Func`2<T, V>) => Dictionary`2<U, Dictionary`2<V, List`1<T>>>")]
        public void GroupTwice()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GroupTwice
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Has) + "(IEnumerable, T) => Boolean")]
        public void Has_IEnumerable_T_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Has
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Has) + "(IEnumerable, Int32, T) => Boolean")]
        public void Has_IEnumerable_Int32_T_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Has
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Has) + "(IEnumerable, UInt32, T) => Boolean")]
        public void Has_IEnumerable_UInt32_T_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Has
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.HasAny) + "(IEnumerable, IEnumerable) => Boolean")]
        public void HasAny_IEnumerable_IEnumerable_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.HasAny
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.HasAny) + "(IEnumerable`1<T>, IEnumerable`1<T>) => Boolean")]
        public void HasAny_IEnumerable_1_T_IEnumerable_1_T_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.HasAny
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.HasAny) + "(IEnumerable, Object[]) => Boolean")]
        public void HasAny_IEnumerable_Object_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.HasAny
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.HasAny) + "(IEnumerable`1<T>, T[]) => Boolean")]
        public void HasAny_IEnumerable_1_T_T_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.HasAny
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Has) + "(IEnumerable, Func`2<T, Boolean>) => Boolean")]
        public void Has_IEnumerable_Func_2_T_Boolean_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Has
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Has) + "(IEnumerable`1<T>, Func`2<T, Boolean>) => Boolean")]
        public void Has_IEnumerable_1_T_Func_2_T_Boolean_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Has
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.HasIndex) + "(IEnumerable, Int32) => Boolean")]
        public void HasIndex_IEnumerable_Int32_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.HasIndex
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.HasIndex) + "(IEnumerable, UInt32) => Boolean")]
        public void HasIndex_IEnumerable_UInt32_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.HasIndex
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Index) + "(IEnumerable, Func`2<Object, U>) => Dictionary`2<U, Object>")]
        public void Index_IEnumerable_Func_2_Object_U_Dictionary_2_U_Object()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Index
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Index) + "(IEnumerable`1<T>, Func`2<T, U>) => Dictionary`2<U, T>")]
        public void Index_IEnumerable_1_T_Func_2_T_U_Dictionary_2_U_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Index
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.IndexTwice) + "(IEnumerable`1<T>, Func`2<T, U>, Func`2<T, V>) => Dictionary`2<U, Dictionary`2<V, T>>")]
        public void IndexTwice()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.IndexTwice
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.IndexOf) + "(IEnumerable, Func`2<T, Boolean>) => Nullable`1<Int32>")]
        public void IndexOf_IEnumerable_Func_2_T_Boolean_Nullable_1_Int32()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.IndexOf
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.IndexOf) + "(IEnumerable`1<T>, Func`2<T, Boolean>) => Nullable`1<Int32>")]
        public void IndexOf_IEnumerable_1_T_Func_2_T_Boolean_Nullable_1_Int32()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.IndexOf
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.IsEmpty) + "(IEnumerable) => Boolean")]
        public void IsEmpty()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.IsEmpty
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Last) + "(IEnumerable, Func`2<T, Boolean>) => T")]
        public void Last_IEnumerable_Func_2_T_Boolean_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Last) + "(T[], Func`2<Object, Boolean>) => T")]
        public void Last_T_Func_2_Object_Boolean_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Last) + "(IEnumerable`1<T>, Func`2<T, Boolean>) => T")]
        public void Last_IEnumerable_1_T_Func_2_T_Boolean_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Last) + "(IEnumerable, Int32, Func`2<T, Boolean>) => List`1<T>")]
        public void Last_IEnumerable_Int32_Func_2_T_Boolean_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Last) + "(IEnumerable, UInt32, Func`2<T, Boolean>) => List`1<T>")]
        public void Last_IEnumerable_UInt32_Func_2_T_Boolean_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Last) + "(IEnumerable`1<T>, Int32, Func`2<T, Boolean>) => List`1<T>")]
        public void Last_IEnumerable_1_T_Int32_Func_2_T_Boolean_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Last) + "(IEnumerable`1<T>, UInt32, Func`2<T, Boolean>) => List`1<T>")]
        public void Last_IEnumerable_1_T_UInt32_Func_2_T_Boolean_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Last) + "(T[], Int32, Func`2<T, Boolean>) => T[]")]
        public void Last_T_Int32_Func_2_T_Boolean_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Last) + "(T[], UInt32, Func`2<T, Boolean>) => T[]")]
        public void Last_T_UInt32_Func_2_T_Boolean_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Last) + "(IEnumerable, T) => T")]
        public void Last_IEnumerable_T_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.List) + "(IEnumerable, Boolean) => List`1<Object>")]
        public void List_IEnumerable_Boolean_List_1_Object()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.List
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.List) + "(IEnumerable`1<T>, Boolean) => List`1<T>")]
        public void List_IEnumerable_1_T_Boolean_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.List
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.List) + "(IEnumerable, Boolean) => List`1<T>")]
        public void List_IEnumerable_Boolean_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.List
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.List) + "(IEnumerable`1<T>, Boolean) => List`1<U>")]
        public void List_IEnumerable_1_T_Boolean_List_1_U()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.List
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Move) + "(T[], Int32, Int32)")]
        public void Move_T_Int32_Int32()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Move
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Move) + "(IList, Int32, Int32)")]
        public void Move_IList_Int32_Int32()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Move
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Named) + "(IEnumerable, String) => List`1<INamed>")]
        public void Named_IEnumerable_String_List_1_INamed()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Named
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Named) + "(T[], String) => T[]")]
        public void Named_T_String_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Named
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Named) + "(IEnumerable`1<T>, String) => IEnumerable`1<T>")]
        public void Named_IEnumerable_1_T_String_IEnumerable_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Named
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Named) + "(IEnumerable, String, Func`2<Object, String>) => List`1<Object>")]
        public void Named_IEnumerable_String_Func_2_Object_String_List_1_Object()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Named
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Named) + "(IEnumerable`1<T>, String, Func`2<T, String>) => List`1<T>")]
        public void Named_IEnumerable_1_T_String_Func_2_T_String_List_1_T()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Named) + "(T[], String, Func`2<T, String>) => T[]")]
        public void Named_T_String_Func_2_T_String_T()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Random) + "(IEnumerable`1<T>, Int32, Boolean) => List`1<T>")]
        public void Random_IEnumerable_1_T_Int32_Boolean_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Random
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Random) + "(IEnumerable`1<T>, UInt32, Boolean) => List`1<T>")]
        public void Random_IEnumerable_1_T_UInt32_Boolean_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Random
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Random) + "(T[], Int32, Boolean) => T[]")]
        public void Random_T_Int32_Boolean_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Random
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Random) + "(T[], UInt32, Boolean) => T[]")]
        public void Random_T_UInt32_Boolean_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Random
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Random) + "(IEnumerable`1<T>) => T")]
        public void Random_IEnumerable_1_T_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Random
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Remove) + "(IEnumerable`1<T>, T[]) => List`1<T>")]
        public void Remove_IEnumerable_1_T_T_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Remove
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Remove) + "(IEnumerable`1<T>, Func`2<T, Boolean>) => List`1<T>")]
        public void Remove_IEnumerable_1_T_Func_2_T_Boolean_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Remove
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Remove) + "(IEnumerable`1<T>, Func`3<Int32, T, Boolean>) => List`1<T>")]
        public void Remove_IEnumerable_1_T_Func_3_Int32_T_Boolean_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Remove
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.RemoveAt) + "(IEnumerable`1<T>, Int32[]) => List`1<T>")]
        public void RemoveAt_IEnumerable_1_T_Int32_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveAt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.RemoveAt) + "(T[], Int32[]) => T[]")]
        public void RemoveAt_T_Int32_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveAt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.RemoveDuplicate) + "(IEnumerable`1<T>, Func`2<T, U>) => List`1<T>")]
        public void RemoveDuplicate_IEnumerable_1_T_Func_2_T_U_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveDuplicate
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.RemoveDuplicate) + "(T[], Func`2<T, U>) => T[]")]
        public void RemoveDuplicate_T_Func_2_T_U_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveDuplicate
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.RemoveDuplicate) + "(IEnumerable, Func`2<T, U>) => List`1<T>")]
        public void RemoveDuplicate_IEnumerable_Func_2_T_U_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveDuplicate
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.RemoveDuplicates) + "(IEnumerable`1<T>) => List`1<T>")]
        public void RemoveDuplicates_IEnumerable_1_T_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveDuplicates
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Add) + "(T[], IEnumerable`1<T>) => T[]")]
        public void Add_T_IEnumerable_1_T_T()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Add) + "(T[], T[]) => T[]")]
        public void Add_T_T_T()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Add) + "(List`1<T>, T[])")]
        public void Add_List_1_T_T()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Add) + "(List`1<T>, IEnumerable`1<T>)")]
        public void Add_List_1_T_IEnumerable_1_T()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.AddTo) + "(IEnumerable`1<T>, ICollection)")]
        public void AddTo()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.AddTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.All) + "(IEnumerable, Func`2<Object, Boolean>) => Boolean")]
        public void All_IEnumerable_Func_2_Object_Boolean_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.All
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.All) + "(IEnumerable`1<T>, Func`2<T, Boolean>) => Boolean")]
        public void All_IEnumerable_1_T_Func_2_T_Boolean_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.All
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.All) + "(IEnumerable, Func`3<Int32, Object, Boolean>) => Boolean")]
        public void All_IEnumerable_Func_3_Int32_Object_Boolean_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.All
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.All) + "(IEnumerable, Func`3<Int32, T, Boolean>) => Boolean")]
        public void All_IEnumerable_Func_3_Int32_T_Boolean_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.All
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.All) + "(IEnumerable`1<T>, Func`3<Int32, T, Boolean>) => Boolean")]
        public void All_IEnumerable_1_T_Func_3_Int32_T_Boolean_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.All
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Append) + "(T[], T[]) => T[]")]
        public void Append()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Append
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Array) + "(IEnumerable) => Object[]")]
        public void Array_IEnumerable_Object()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Array
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Array) + "(IEnumerable) => T[]")]
        public void Array_IEnumerable_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Array
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Array) + "(IEnumerable`1<T>) => T[]")]
        public void Array_IEnumerable_1_T_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Array
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Array) + "(IEnumerable`1<T>) => U[]")]
        public void Array_IEnumerable_1_T_U()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Array
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Collect) + "(IEnumerable, Func`2<T, T>) => List`1<T>")]
        public void Collect_IEnumerable_Func_2_T_T_List_1_T()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Collect) + "(IEnumerable`1<T>, Func`2<T, T>) => List`1<T>")]
        public void Collect_IEnumerable_1_T_Func_2_T_T_List_1_T()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Collect) + "(T[], Func`2<T, T>) => T[]")]
        public void Collect_T_Func_2_T_T_T()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Collect) + "(List`1<T>, Func`2<T, T>) => List`1<T>")]
        public void Collect_List_1_T_Func_2_T_T_List_1_T()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Collect) + "(IEnumerable, Func`3<Int32, Object, Object>) => List`1<Object>")]
        public void Collect_IEnumerable_Func_3_Int32_Object_Object_List_1_Object()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Collect) + "(IEnumerable, Func`3<Int32, T, T>) => List`1<T>")]
        public void Collect_IEnumerable_Func_3_Int32_T_T_List_1_T()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Collect) + "(IEnumerable`1<T>, Func`3<Int32, T, T>) => List`1<T>")]
        public void Collect_IEnumerable_1_T_Func_3_Int32_T_T_List_1_T()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Collect) + "(T[], Func`3<Int32, T, T>) => T[]")]
        public void Collect_T_Func_3_Int32_T_T_T()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Collect) + "(List`1<T>, Func`3<Int32, T, T>) => List`1<T>")]
        public void Collect_List_1_T_Func_3_Int32_T_T_List_1_T()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Collect) + "(Func`1<T>, Int32) => List`1<T>")]
        public void Collect_Func_1_T_Int32_List_1_T()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Collect) + "(Func`2<Int32, T>, Int32) => List`1<T>")]
        public void Collect_Func_2_Int32_T_Int32_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Collect
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.CollectStr) + "(String, Func`2<Char, Char>) => String")]
        public void CollectStr_String_Func_2_Char_Char_String()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.CollectStr
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.CollectStr) + "(List`1<T>, Func`3<Int32, T, String>) => String")]
        public void CollectStr_List_1_T_Func_3_Int32_T_String_String()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.CollectStr
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.CollectStr) + "(T[], Func`3<Int32, T, String>) => String")]
        public void CollectStr_T_Func_3_Int32_T_String_String()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.CollectStr
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.CollectStr) + "(U, Func`3<Int32, T, String>) => String")]
        public void CollectStr_U_Func_3_Int32_T_String_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Combine) + "(IEnumerable`1<String>) => String")]
        public void Combine_IEnumerable_1_String_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Combine) + "(IEnumerable`1<String>, Char) => String")]
        public void Combine_IEnumerable_1_String_Char_String()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Combine) + "(IEnumerable`1<T>, String) => String")]
        public void Combine_IEnumerable_1_T_String_String()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Combine
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Combine) + "(IEnumerable`1<T>, Char) => String")]
        public void Combine_IEnumerable_1_T_Char_String()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Combine
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Convert) + "(IEnumerable, Func`2<Object, Object>) => List`1<Object>")]
        public void Convert_IEnumerable_Func_2_Object_Object_List_1_Object()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Convert) + "(T[], Func`2<T, U>) => U[]")]
        public void Convert_T_Func_2_T_U_U()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Convert) + "(List`1<T>, Func`2<T, U>) => List`1<U>")]
        public void Convert_List_1_T_Func_2_T_U_List_1_U()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Convert) + "(IEnumerable`1<T>, Func`2<T, U>) => List`1<U>")]
        public void Convert_IEnumerable_1_T_Func_2_T_U_List_1_U()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.ConvertAll) + "(IEnumerable, Func`2<Object, IEnumerable`1<Object>>) => List`1<Object>")]
        public void ConvertAll_IEnumerable_Func_2_Object_IEnumerable_1_Object_List_1_Object()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.ConvertAll
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.ConvertAll) + "(IEnumerable, Func`2<T, IEnumerable`1<U>>) => List`1<U>")]
        public void ConvertAll_IEnumerable_Func_2_T_IEnumerable_1_U_List_1_U()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.ConvertAll
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.ConvertAll) + "(IEnumerable`1<T>, Func`2<T, IEnumerable`1<U>>) => List`1<U>")]
        public void ConvertAll_IEnumerable_1_T_Func_2_T_IEnumerable_1_U_List_1_U()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.ConvertAll
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.ConvertAll) + "(T[], Func`2<T, IEnumerable`1<U>>) => U[]")]
        public void ConvertAll_T_Func_2_T_IEnumerable_1_U_U()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.ConvertAll
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.ConvertAll) + "(List`1<T>, Func`2<T, IEnumerable`1<U>>) => List`1<U>")]
        public void ConvertAll_List_1_T_Func_2_T_IEnumerable_1_U_List_1_U()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.ConvertAll
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Convert) + "(IEnumerable, Func`3<Int32, Object, Object>) => List`1<Object>")]
        public void Convert_IEnumerable_Func_3_Int32_Object_Object_List_1_Object()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Convert) + "(T[], Func`3<Int32, T, U>) => U[]")]
        public void Convert_T_Func_3_Int32_T_U_U()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Convert) + "(List`1<T>, Func`3<Int32, T, U>) => List`1<U>")]
        public void Convert_List_1_T_Func_3_Int32_T_U_List_1_U()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Convert) + "(IEnumerable`1<T>, Func`3<Int32, T, U>) => List`1<U>")]
        public void Convert_IEnumerable_1_T_Func_3_Int32_T_U_List_1_U()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Count) + "(T) => UInt32")]
        public void Count_T_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Count
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Count) + "(IEnumerable`1<T>, T) => UInt32")]
        public void Count_IEnumerable_1_T_T_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Count
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Count) + "(IEnumerable`1<T>, Func`2<T, Boolean>) => UInt32")]
        public void Count_IEnumerable_1_T_Func_2_T_Boolean_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Count
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Cycle) + "(IEnumerable, Func`2<Object, Boolean>)")]
        public void Cycle_IEnumerable_Func_2_Object_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Cycle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Cycle) + "(IEnumerable`1<T>, Func`2<T, Boolean>)")]
        public void Cycle_IEnumerable_1_T_Func_2_T_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Cycle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Each) + "(IEnumerable, Action`1<Object>)")]
        public void Each_IEnumerable_Action_1_Object()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Each) + "(IEnumerable, Action`1<T>)")]
        public void Each_IEnumerable_Action_1_T()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Each) + "(IEnumerable`1<T>, Action`1<T>)")]
        public void Each_IEnumerable_1_T_Action_1_T()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Each) + "(IEnumerable, Action`2<Int32, Object>)")]
        public void Each_IEnumerable_Action_2_Int32_Object()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Each) + "(IEnumerable`1<T>, Action`2<Int32, T>)")]
        public void Each_IEnumerable_1_T_Action_2_Int32_T()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Each) + "(Action`1<T>, IEnumerable`1<T>)")]
        public void Each_Action_1_T_IEnumerable_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Each
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Equivalent) + "(IEnumerable, IEnumerable) => Boolean")]
        public void Equivalent()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Equivalent
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Fill) + "(T[], T) => T[]")]
        public void Fill_T_T_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Fill
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Fill) + "(List`1<T>, T) => List`1<T>")]
        public void Fill_List_1_T_T_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Fill
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Fill) + "(T[], Func`2<T, T>) => T[]")]
        public void Fill_T_Func_2_T_T_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Fill
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Filter) + "(IEnumerable, Boolean) => List`1<T>")]
        public void Filter_IEnumerable_Boolean_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Filter
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Filter) + "(T[], Boolean) => U[]")]
        public void Filter_T_Boolean_U()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Filter
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Filter) + "(List`1<T>, Boolean) => List`1<U>")]
        public void Filter_List_1_T_Boolean_List_1_U()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Filter
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.First) + "(IEnumerable, Func`2<T, Boolean>) => T")]
        public void First_IEnumerable_Func_2_T_Boolean_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.First) + "(T[], Func`2<Object, Boolean>) => T")]
        public void First_T_Func_2_Object_Boolean_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.First) + "(IEnumerable`1<T>, Func`2<T, Boolean>) => T")]
        public void First_IEnumerable_1_T_Func_2_T_Boolean_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.First) + "(IEnumerable, Int32, Func`2<T, Boolean>) => List`1<T>")]
        public void First_IEnumerable_Int32_Func_2_T_Boolean_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.First) + "(IEnumerable, UInt32, Func`2<T, Boolean>) => List`1<T>")]
        public void First_IEnumerable_UInt32_Func_2_T_Boolean_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Comment))]
    public partial class L_Comment_TestTester : XUnitOutputTester, IDisposable
        {
        public L_Comment_TestTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Comment) + "." + nameof(L.Comment.Test) + "." + nameof(L.Comment.Test.TestMethod) + "(Int32, String) => String")]
        public void TestMethod()
            {
            // TODO: Implement method test LCore.Extensions.L.Comment.Test.TestMethod
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Comment) + "." + nameof(L.Comment.Test) + "." + nameof(L.Comment.Test.TestMethod2) + "(Int32, String) => String")]
        public void TestMethod2()
            {
            // TODO: Implement method test LCore.Extensions.L.Comment.Test.TestMethod2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Comment) + "." + nameof(L.Comment.Test) + "." + nameof(L.Comment.Test.TestProperty))]
        public void TestProperty()
            {
            // TODO: Implement method test LCore.Extensions.L.Comment.Test.TestProperty
            }

        }
    }

namespace L_Tests.LCore.Extensions.Optional
    {
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt))]
    public partial class ObjectExtTester : XUnitOutputTester, IDisposable
        {
        public ObjectExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.CopyFieldsTo) + "(T, Object)")]
        public void CopyFieldsTo_T_Object()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.CopyFieldsTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.CopyFieldsTo) + "(T, Object, Dictionary`2<String, String>)")]
        public void CopyFieldsTo_T_Object_Dictionary_2_String_String()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.CopyFieldsTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.CopyFieldsTo) + "(T, Object, Func`2<String, String>)")]
        public void CopyFieldsTo_T_Object_Func_2_String_String()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.CopyFieldsTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.Details) + "(T, Boolean) => String")]
        public void Details()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.Details
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.FN_CreateArray) + "(T) => Func`1<T[]>")]
        public void FN_CreateArray_T_Func_1_T()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_CreateArray
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.FN_CreateArray) + "(T, Int32) => Func`1<T[]>")]
        public void FN_CreateArray_T_Int32_Func_1_T()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_CreateArray
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.FN_CreateList) + "(T) => Func`1<List`1<T>>")]
        public void FN_CreateList_T_Func_1_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_CreateList
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.FN_CreateList) + "(T, Int32) => Func`1<List`1<T>>")]
        public void FN_CreateList_T_Int32_Func_1_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_CreateList
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.FN_Func) + "(T) => Func`1<T>")]
        public void FN_Func()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_Func
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.FN_If) + "(T) => Func`2<T, Boolean>")]
        public void FN_If()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_If
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.InitProperties) + "(Object, T)")]
        public void InitProperties()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.InitProperties
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.IsNull) + "(T) => Boolean")]
        public void IsNull()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.SafeEquals) + "(Object, Object) => Boolean")]
        public void SafeEquals()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.SafeEquals
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.SupplyTo) + "(T, Action`1<T>) => Action")]
        public void SupplyTo_T_Action_1_T_Action()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.SupplyTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.SupplyTo) + "(T, Func`2<T, U>) => Func`1<U>")]
        public void SupplyTo_T_Func_2_T_U_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.SupplyTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.ToS) + "(Object) => String")]
        public void ToS()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.ToS
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.Traverse) + "(Object, Func`2<Object, Object>)")]
        public void Traverse_Object_Func_2_Object_Object()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.Traverse
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.Traverse) + "(T, Func`2<T, T>)")]
        public void Traverse_T_Func_2_T_T()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.Traverse
            }

        }
    }
