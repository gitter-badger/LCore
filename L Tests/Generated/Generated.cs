/*
Covering Assembly: L

Cover application using naming conventions.

LUnit has Autogenerated 2 Classes and 11 Methods:
*/

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using FluentAssertions;
using LCore.Threads;
using Xunit;
using LCore.LUnit;
using Xunit.Abstractions;
using JetBrains.Annotations;
using LCore.Extensions;
using LCore.Tools;

namespace L_Tests.LCore.Threads
    {
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool))]
    public partial class FakeThreadPoolTester : XUnitOutputTester
        {
        public FakeThreadPoolTester([NotNull] ITestOutputHelper Output) : base(Output) {}

        ~FakeThreadPoolTester() {}

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool) + "." + nameof(FakeThreadPool.GetCurrentTime)
            )]
        public void GetCurrentTime()
            {
            // TODO: Implement method test LCore.Threads.FakeThreadPool.GetCurrentTime
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool) + "." + nameof(FakeThreadPool.Delay))]
        public void Delay_Int32_Task()
            {
            // TODO: Implement method test LCore.Threads.FakeThreadPool.Delay
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool) + "." + nameof(FakeThreadPool.Delay))]
        public void Delay_TimeSpan_Task()
            {
            // TODO: Implement method test LCore.Threads.FakeThreadPool.Delay
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool) + "." + nameof(FakeThreadPool.ThreadsWaiting))]
        public void get_ThreadsWaiting()
            {
            // TODO: Implement method test LCore.Threads.FakeThreadPool.get_ThreadsWaiting
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool) + "." + nameof(FakeThreadPool.ThreadHistory))]
        public void get_ThreadHistory()
            {
            // TODO: Implement method test LCore.Threads.FakeThreadPool.get_ThreadHistory
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool) + "." + nameof(FakeThreadPool.ThreadsWaiting))]
        public void ThreadsWaiting()
            {
            // TODO: Implement method test LCore.Threads.FakeThreadPool.ThreadsWaiting
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool) + "." + nameof(FakeThreadPool.ThreadHistory))]
        public void ThreadHistory()
            {
            // TODO: Implement method test LCore.Threads.FakeThreadPool.ThreadHistory
            }


        [Fact]
        public async void SimpleTest()
            {
            var Pool = new FakeThreadPool();

            int Handoff = 0;

            var Task1 = new Task(async () =>
                {
                await Pool.Delay(Milliseconds: 500000);
                Handoff++;
                });
            var Task2 = new Task(async () =>
                {
                while (Handoff != 1)
                    await Pool.Delay(Milliseconds: 1);
                Handoff.Should().Be(expected: 1);
                Handoff++;
                });
            var Task3 = new Task(async () =>
                {
                while (Handoff != 2)
                    await Pool.Delay(Milliseconds: 1);
                Handoff.Should().Be(expected: 2);
                Handoff++;
                });
            var Task4 = new Task(async () =>
                {
                while (Handoff != 3)
                    await Pool.Delay(Milliseconds: 1);
                Handoff.Should().Be(expected: 3);
                });

            Task1.Start();
            Task2.Start();
            Task3.Start();
            Task4.Start();

            var Timer = new StopWatch();
            await Pool.AwaitThreadAdded();
            Timer.Start();
            await Pool.AwaitAllThreadsResumed();
            double Duration = Timer.Stop();

            await Task.Delay(millisecondsDelay: 50);

            List<ThreadSpinner> Results = Pool.ThreadHistory;

            Results.Count.Should().BeGreaterOrEqualTo(expected: 3);
            Handoff.Should().Be(expected: 3);

            Duration.Should().BeLessThan(expected: 100);
            this._Output.WriteLine($"Handoffs: {Handoff}");
            this._Output.WriteLine($"Actual Task Duration: {Duration.Round()}ms");

            uint TotalFakeWaited = Results.Sum(Thread => Thread.DurationWaited.TotalMilliseconds);
            TotalFakeWaited.Should().BeGreaterThan(expected: 500000);

            this._Output.WriteLine($"Tasks Fake-Waited: {TimeSpan.FromMilliseconds(TotalFakeWaited).ToTimeString()} over {Results.Count} {"Delay".Pluralize(Results.Count)}");
            }

        [Fact]
        public async void HandoffTest()
            {
            var Pool = new FakeThreadPool();

            const int Target = 500;

            int Handoff = 0;

            var History = new List<string>();

            var Task1 = new Task(async () =>
                {
                while (Handoff < Target)
                    {
                    await Pool.Delay(Milliseconds: 500000);
                    Handoff++;
                    History.Add("Task1");
                    }
                });
            var Task2 = new Task(async () =>
                {
                while (Handoff < Target)
                    {
                    while (Handoff%3 != 0)
                        await Pool.Delay(Milliseconds: 1);

                    (Handoff%3).Should().Be(expected: 0);
                    Handoff++;
                    History.Add("Task2");
                    }
                });
            var Task3 = new Task(async () =>
                {
                while (Handoff < Target)
                    {
                    while (Handoff%3 != 1)
                        await Pool.Delay(Milliseconds: 1);

                    (Handoff%3).Should().Be(expected: 1);
                    Handoff++;
                    History.Add("Task3");
                    }
                });
            var Task4 = new Task(async () =>
                {
                while (Handoff < Target)
                    {
                    while (Handoff%3 != 2)
                        await Pool.Delay(Milliseconds: 1);

                    (Handoff%3).Should().Be(expected: 2);
                    Handoff++;
                    History.Add("Task4");
                    }
                });

            Task1.Start();
            Task2.Start();
            Task3.Start();
            Task4.Start();

            var Timer = new StopWatch();
            await Pool.AwaitThreadAdded();
            Timer.Start();
            while (Handoff < Target)
                await Task.Delay(millisecondsDelay: 1);
            //await Pool.AwaitAllThreadsResumed();
            double Duration = Timer.Stop();

            await Task.Delay(millisecondsDelay: 50);

            List<ThreadSpinner> Results = Pool.ThreadHistory;

            Results.Count.Should().BeGreaterOrEqualTo(expected: 3);
            Handoff.Should().BeGreaterOrEqualTo(expected: Target);

            this._Output.WriteLine($"Handoffs: {Handoff}");
            this._Output.WriteLine($"Task Resumes: {Results.Count}");
            this._Output.WriteLine($"Actual Task Duration: {Duration.Round()}ms");
            this._Output.WriteLine("");
            this._Output.WriteLine("");
            this._Output.WriteLine($"Duration per handoff: {(Duration / Handoff).Round()}ms");
            this._Output.WriteLine($"Duration per task resume: {(Duration / Results.Count).Round()}ms");

            lock (Results)
                {
                uint TotalFakeWaited = Results.Sum(Thread => Thread.DurationWaited.TotalMilliseconds);
                TotalFakeWaited.Should().BeGreaterThan(expected: 500000);

                this._Output.WriteLine($"Tasks Fake-Waited: {TimeSpan.FromMilliseconds(TotalFakeWaited).ToTimeString()} over {Results.Count} {"Delay".Pluralize(Results.Count)}");
                }
            }
        }

    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(ThreadSpinner))]
    public partial class ThreadSpinnerTester : XUnitOutputTester
        {
        public ThreadSpinnerTester([NotNull] ITestOutputHelper Output) : base(Output) {}

        ~ThreadSpinnerTester() {}

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(ThreadSpinner) + "." + nameof(ThreadSpinner.ResumeTime))]
        public void get_ResumeTime()
            {
            // TODO: Implement method test LCore.Threads.ThreadSpinner.get_StartTime
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(ThreadSpinner) + "." + nameof(ThreadSpinner.Wait))]
        public void Wait()
            {
            // TODO: Implement method test LCore.Threads.ThreadSpinner.Wait
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(ThreadSpinner) + "." + nameof(ThreadSpinner.StopWaiting))]
        public void StopWaiting()
            {
            // TODO: Implement method test LCore.Threads.ThreadSpinner.StopWaiting
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(ThreadSpinner) + "." + nameof(ThreadSpinner.ResumeTime))]
        public void StartTime()
            {
            // TODO: Implement method test LCore.Threads.ThreadSpinner.StartTime
            }
        }
    }