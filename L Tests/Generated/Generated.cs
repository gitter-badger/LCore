/*
Covering Assembly: L

Cover application using naming conventions.

LUnit has Autogenerated 2 Classes and 11 Methods:
*/

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using FluentAssertions;
using LCore.Threads;
using Xunit;
using LCore.LUnit;
using Xunit.Abstractions;
using JetBrains.Annotations;
using LCore.Extensions;
using LCore.Tools;

namespace L_Tests.LCore.Threads
    {
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool))]
    public partial class FakeThreadPoolTester : XUnitOutputTester
        {
        public FakeThreadPoolTester([NotNull] ITestOutputHelper Output) : base(Output) {}

        ~FakeThreadPoolTester() {}

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool) + "." + nameof(FakeThreadPool.GetCurrentTime)
            )]
        public void GetCurrentTime()
            {
            // TODO: Implement method test LCore.Threads.FakeThreadPool.GetCurrentTime
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool) + "." + nameof(FakeThreadPool.Delay))]
        public void Delay_Int32_Task()
            {
            // TODO: Implement method test LCore.Threads.FakeThreadPool.Delay
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool) + "." + nameof(FakeThreadPool.Delay))]
        public void Delay_TimeSpan_Task()
            {
            // TODO: Implement method test LCore.Threads.FakeThreadPool.Delay
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool) + "." + nameof(FakeThreadPool.ThreadsWaiting))]
        public void get_ThreadsWaiting()
            {
            // TODO: Implement method test LCore.Threads.FakeThreadPool.get_ThreadsWaiting
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool) + "." + nameof(FakeThreadPool.ThreadHistory))]
        public void get_ThreadHistory()
            {
            // TODO: Implement method test LCore.Threads.FakeThreadPool.get_ThreadHistory
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool) + "." + nameof(FakeThreadPool.ThreadsWaiting))]
        public void ThreadsWaiting()
            {
            // TODO: Implement method test LCore.Threads.FakeThreadPool.ThreadsWaiting
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(FakeThreadPool) + "." + nameof(FakeThreadPool.ThreadHistory))]
        public void ThreadHistory()
            {
            // TODO: Implement method test LCore.Threads.FakeThreadPool.ThreadHistory
            }


        [Fact]
        public async void SimpleTest()
            {
            var Pool = new FakeThreadPool();

            string TestValue = "";

#pragma warning disable CS4014 // Because this call is not awaited, execution of the current method continues before the call is completed
            Task.Run(async () =>
                {
                await Pool.Delay(Milliseconds: 500000);
                TestValue = "handoff 1";
                });
            Task.Run(async () =>
                {
                while (TestValue != "handoff 1")
                    await Pool.Delay(Milliseconds: 1);
                TestValue.Should().Be("handoff 1");
                TestValue = "handoff 2";
                });
            Task.Run(async () =>
                {
                while (TestValue != "handoff 2")
                    await Pool.Delay(Milliseconds: 1);
                TestValue.Should().Be("handoff 2");
                });
#pragma warning restore CS4014 // Because this call is not awaited, execution of the current method continues before the call is completed

            await Task.Delay(millisecondsDelay: 200);

            var Timer = new StopWatch();
            Timer.Start();

            await Pool.AwaitAllThreads();

            double Duration = Timer.Stop();

            List<ThreadSpinner> Results = Pool.ThreadHistory;

            Results.Count.Should().BeGreaterOrEqualTo(expected: 3);
            TestValue.Should().Be("handoff 2");

            Duration.Should().BeLessThan(expected: 15);

            Results.Sum(Thread => Thread.DurationWaited.TotalMilliseconds).Should().BeGreaterThan(expected: 500000);
            }
        }

    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(ThreadSpinner))]
    public partial class ThreadSpinnerTester : XUnitOutputTester
        {
        public ThreadSpinnerTester([NotNull] ITestOutputHelper Output) : base(Output) {}

        ~ThreadSpinnerTester() {}

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(ThreadSpinner) + "." + nameof(ThreadSpinner.ResumeTime))]
        public void get_ResumeTime()
            {
            // TODO: Implement method test LCore.Threads.ThreadSpinner.get_StartTime
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(ThreadSpinner) + "." + nameof(ThreadSpinner.Wait))]
        public void Wait()
            {
            // TODO: Implement method test LCore.Threads.ThreadSpinner.Wait
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(ThreadSpinner) + "." + nameof(ThreadSpinner.StopWaiting))]
        public void StopWaiting()
            {
            // TODO: Implement method test LCore.Threads.ThreadSpinner.StopWaiting
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Threads) + "." + nameof(ThreadSpinner) + "." + nameof(ThreadSpinner.ResumeTime))]
        public void StartTime()
            {
            // TODO: Implement method test LCore.Threads.ThreadSpinner.StartTime
            }
        }
    }