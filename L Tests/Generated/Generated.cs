/*
Covering Assembly: L

Cover application using naming conventions.

LUnit has Autogenerated 60 Classes and 1377 Methods:
*/
using LCore.Tools;
using LCore.Numbers;
using LCore.Naming;
using LCore.LUnit;
using LCore.Extensions;
using Xunit;
using Xunit.Abstractions;
using JetBrains.Annotations;
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable EmptyDestructor
// ReSharper disable InconsistentNaming

namespace L_Tests.LCore.Tools
    {
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(CacheData))]
    public partial class CacheDataTester : XUnitOutputTester
        {
        public CacheDataTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~CacheDataTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(CacheData) + "." + nameof(CacheData.AddTime))]
        public void AddTime()
            {
            // TODO: Implement method test LCore.Tools.CacheData.AddTime
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(CacheData) + "." + nameof(CacheData.TotalTimeSaved))]
        public void get_TotalTimeSaved()
            {
            // TODO: Implement method test LCore.Tools.CacheData.get_TotalTimeSaved
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(CacheData) + "." + nameof(CacheData.PercentSaved))]
        public void get_PercentSaved()
            {
            // TODO: Implement method test LCore.Tools.CacheData.get_PercentSaved
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(CacheData) + "." + nameof(CacheData.TotalTimeSaved))]
        public void TotalTimeSaved()
            {
            // TODO: Implement method test LCore.Tools.CacheData.TotalTimeSaved
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(CacheData) + "." + nameof(CacheData.PercentSaved))]
        public void PercentSaved()
            {
            // TODO: Implement method test LCore.Tools.CacheData.PercentSaved
            }

        }
    [Trait(Traits.TargetMember, "LCore.Tools.MethodProfileData`1")]
    public partial class MethodProfileData_1Tester : XUnitOutputTester
        {
        public MethodProfileData_1Tester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~MethodProfileData_1Tester() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.MethodProfileData`1.get_Times")]
        public void get_Times()
            {
            // TODO: Implement method test LCore.Tools.MethodProfileData`1.get_Times
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.MethodProfileData`1.get_AverageMS")]
        public void get_AverageMS()
            {
            // TODO: Implement method test LCore.Tools.MethodProfileData`1.get_AverageMS
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.MethodProfileData`1.Times")]
        public void Times()
            {
            // TODO: Implement method test LCore.Tools.MethodProfileData`1.Times
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.MethodProfileData`1.AverageMS")]
        public void AverageMS()
            {
            // TODO: Implement method test LCore.Tools.MethodProfileData`1.AverageMS
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper))]
    public partial class RegistryHelperTester : XUnitOutputTester
        {
        public RegistryHelperTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~RegistryHelperTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.RemoveAll))]
        public void RemoveAll()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.RemoveAll
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.Remove))]
        public void Remove()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.Remove
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.Save))]
        public void Save_String_Object()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.Save
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.Save))]
        public void Save_String_String()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.Save
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.Save))]
        public void Save_String_IConvertible()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.Save
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.Save))]
        public void Save_String_Byte()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.Save
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.Save))]
        public void Save_String_IEnumerable_1()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.Save
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.LoadObject))]
        public void LoadObject()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.LoadObject
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.LoadString))]
        public void LoadString()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.LoadString
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.LoadInt))]
        public void LoadInt()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.LoadInt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.LoadLong))]
        public void LoadLong()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.LoadLong
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.LoadFloat))]
        public void LoadFloat()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.LoadFloat
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.LoadDouble))]
        public void LoadDouble()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.LoadDouble
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.LoadChar))]
        public void LoadChar()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.LoadChar
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.LoadBool))]
        public void LoadBool()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.LoadBool
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.LoadBinary))]
        public void LoadBinary()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.LoadBinary
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.LoadList))]
        public void LoadList()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.LoadList
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(RegistryHelper) + "." + nameof(RegistryHelper.LoadAll))]
        public void LoadAll()
            {
            // TODO: Implement method test LCore.Tools.RegistryHelper.LoadAll
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(ExceptionList))]
    public partial class ExceptionListTester : XUnitOutputTester
        {
        public ExceptionListTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~ExceptionListTester() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.ExceptionList.op_Implicit")]
        public void op_Implicit_ExceptionList_Exception()
            {
            // TODO: Implement method test LCore.Tools.ExceptionList.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.ExceptionList.op_Implicit")]
        public void op_Implicit_Exception_ExceptionList()
            {
            // TODO: Implement method test LCore.Tools.ExceptionList.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.ExceptionList.op_Implicit")]
        public void op_Implicit_ExceptionList_List_1()
            {
            // TODO: Implement method test LCore.Tools.ExceptionList.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.ExceptionList.op_Implicit")]
        public void op_Implicit_List_1_ExceptionList()
            {
            // TODO: Implement method test LCore.Tools.ExceptionList.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(ExceptionList) + "." + nameof(ExceptionList.Exceptions))]
        public void get_Exceptions()
            {
            // TODO: Implement method test LCore.Tools.ExceptionList.get_Exceptions
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(ExceptionList) + "." + nameof(ExceptionList.Message))]
        public void get_Message()
            {
            // TODO: Implement method test LCore.Tools.ExceptionList.get_Message
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(ExceptionList) + "." + nameof(ExceptionList.StackTrace))]
        public void get_StackTrace()
            {
            // TODO: Implement method test LCore.Tools.ExceptionList.get_StackTrace
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(ExceptionList) + "." + nameof(ExceptionList.Exceptions))]
        public void Exceptions()
            {
            // TODO: Implement method test LCore.Tools.ExceptionList.Exceptions
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(ExceptionList) + "." + nameof(ExceptionList.Message))]
        public void Message()
            {
            // TODO: Implement method test LCore.Tools.ExceptionList.Message
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(ExceptionList) + "." + nameof(ExceptionList.StackTrace))]
        public void StackTrace()
            {
            // TODO: Implement method test LCore.Tools.ExceptionList.StackTrace
            }

        }
    [Trait(Traits.TargetMember, "LCore.Tools.Lists`2")]
    public partial class Lists_2Tester : XUnitOutputTester
        {
        public Lists_2Tester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~Lists_2Tester() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Lists`2.get_List1")]
        public void get_List1()
            {
            // TODO: Implement method test LCore.Tools.Lists`2.get_List1
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Lists`2.get_List2")]
        public void get_List2()
            {
            // TODO: Implement method test LCore.Tools.Lists`2.get_List2
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Lists`2.get_Count")]
        public void get_Count()
            {
            // TODO: Implement method test LCore.Tools.Lists`2.get_Count
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Lists`2.Add")]
        public void Add()
            {
            // TODO: Implement method test LCore.Tools.Lists`2.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Lists`2.Set")]
        public void Set()
            {
            // TODO: Implement method test LCore.Tools.Lists`2.Set
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Lists`2.Set1")]
        public void Set1()
            {
            // TODO: Implement method test LCore.Tools.Lists`2.Set1
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Lists`2.Set2")]
        public void Set2()
            {
            // TODO: Implement method test LCore.Tools.Lists`2.Set2
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Lists`2.GetAt")]
        public void GetAt()
            {
            // TODO: Implement method test LCore.Tools.Lists`2.GetAt
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Lists`2.RemoveAt")]
        public void RemoveAt()
            {
            // TODO: Implement method test LCore.Tools.Lists`2.RemoveAt
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Lists`2.List1")]
        public void List1()
            {
            // TODO: Implement method test LCore.Tools.Lists`2.List1
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Lists`2.List2")]
        public void List2()
            {
            // TODO: Implement method test LCore.Tools.Lists`2.List2
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Lists`2.Count")]
        public void Count()
            {
            // TODO: Implement method test LCore.Tools.Lists`2.Count
            }

        }
    [Trait(Traits.TargetMember, "LCore.Tools.Set`2")]
    public partial class Set_2Tester : XUnitOutputTester
        {
        public Set_2Tester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~Set_2Tester() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Set`2.Equals")]
        public void Equals_Object_Boolean()
            {
            // TODO: Implement method test LCore.Tools.Set`2.Equals
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Set`2.GetHashCode")]
        public new void GetHashCode()
            {
            // TODO: Implement method test LCore.Tools.Set`2.GetHashCode
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Set`2.get_Obj1")]
        public void get_Obj1()
            {
            // TODO: Implement method test LCore.Tools.Set`2.get_Obj1
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Set`2.set_Obj1")]
        public void set_Obj1()
            {
            // TODO: Implement method test LCore.Tools.Set`2.set_Obj1
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Set`2.get_Obj2")]
        public void get_Obj2()
            {
            // TODO: Implement method test LCore.Tools.Set`2.get_Obj2
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Set`2.set_Obj2")]
        public void set_Obj2()
            {
            // TODO: Implement method test LCore.Tools.Set`2.set_Obj2
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Set`2.Equals")]
        public void Equals_Set_2_Boolean()
            {
            // TODO: Implement method test LCore.Tools.Set`2.Equals
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Set`2.ToString")]
        public new void ToString()
            {
            // TODO: Implement method test LCore.Tools.Set`2.ToString
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Set`2.Obj1")]
        public void Obj1()
            {
            // TODO: Implement method test LCore.Tools.Set`2.Obj1
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Tools.Set`2.Obj2")]
        public void Obj2()
            {
            // TODO: Implement method test LCore.Tools.Set`2.Obj2
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(DateTimeConverter))]
    public partial class DateTimeConverterTester : XUnitOutputTester
        {
        public DateTimeConverterTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~DateTimeConverterTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(DateTimeConverter) + "." + nameof(DateTimeConverter.Rfc3339DateTimeFormat))]
        public void get_Rfc3339DateTimeFormat()
            {
            // TODO: Implement method test LCore.Tools.DateTimeConverter.get_Rfc3339DateTimeFormat
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(DateTimeConverter) + "." + nameof(DateTimeConverter.Rfc3339DateTimePatterns))]
        public void get_Rfc3339DateTimePatterns()
            {
            // TODO: Implement method test LCore.Tools.DateTimeConverter.get_Rfc3339DateTimePatterns
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(DateTimeConverter) + "." + nameof(DateTimeConverter.Parse))]
        public void Parse()
            {
            // TODO: Implement method test LCore.Tools.DateTimeConverter.Parse
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(DateTimeConverter) + "." + nameof(DateTimeConverter.ToString))]
        public void ToString_DateTime_String()
            {
            // TODO: Implement method test LCore.Tools.DateTimeConverter.ToString
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(DateTimeConverter) + "." + nameof(DateTimeConverter.TryParse))]
        public void TryParse()
            {
            // TODO: Implement method test LCore.Tools.DateTimeConverter.TryParse
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(DateTimeConverter) + "." + nameof(DateTimeConverter.Rfc3339DateTimeFormat))]
        public void Rfc3339DateTimeFormat()
            {
            // TODO: Implement method test LCore.Tools.DateTimeConverter.Rfc3339DateTimeFormat
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(DateTimeConverter) + "." + nameof(DateTimeConverter.Rfc3339DateTimePatterns))]
        public void Rfc3339DateTimePatterns()
            {
            // TODO: Implement method test LCore.Tools.DateTimeConverter.Rfc3339DateTimePatterns
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(ProgressUpdater))]
    public partial class ProgressUpdaterTester : XUnitOutputTester
        {
        public ProgressUpdaterTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~ProgressUpdaterTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(ProgressUpdater) + "." + nameof(ProgressUpdater.Status))]
        public void Status()
            {
            // TODO: Implement method test LCore.Tools.ProgressUpdater.Status
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(ProgressUpdater) + "." + nameof(ProgressUpdater.Log))]
        public void Log()
            {
            // TODO: Implement method test LCore.Tools.ProgressUpdater.Log
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(ProgressUpdater) + "." + nameof(ProgressUpdater.Progress))]
        public void Progress()
            {
            // TODO: Implement method test LCore.Tools.ProgressUpdater.Progress
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(ProgressUpdater) + "." + nameof(ProgressUpdater.Maximum))]
        public void Maximum()
            {
            // TODO: Implement method test LCore.Tools.ProgressUpdater.Maximum
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(ProgressUpdater) + "." + nameof(ProgressUpdater.Clear))]
        public void Clear()
            {
            // TODO: Implement method test LCore.Tools.ProgressUpdater.Clear
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(Schedule))]
    public partial class ScheduleTester : XUnitOutputTester
        {
        public ScheduleTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~ScheduleTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(Schedule) + "." + nameof(Schedule.ToString))]
        public new void ToString()
            {
            // TODO: Implement method test LCore.Tools.Schedule.ToString
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(Schedule) + "." + nameof(Schedule.FromString))]
        public void FromString()
            {
            // TODO: Implement method test LCore.Tools.Schedule.FromString
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(StatMonitor))]
    public partial class StatMonitorTester : XUnitOutputTester
        {
        public StatMonitorTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~StatMonitorTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(StatMonitor) + "." + nameof(StatMonitor.GetCurrentAverageStat))]
        public void GetCurrentAverageStat()
            {
            // TODO: Implement method test LCore.Tools.StatMonitor.GetCurrentAverageStat
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(StatMonitor) + "." + nameof(StatMonitor.AddStat))]
        public void AddStat()
            {
            // TODO: Implement method test LCore.Tools.StatMonitor.AddStat
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(StatMonitor) + "." + nameof(StatMonitor.Clear))]
        public void Clear()
            {
            // TODO: Implement method test LCore.Tools.StatMonitor.Clear
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(StopWatch))]
    public partial class StopWatchTester : XUnitOutputTester
        {
        public StopWatchTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~StopWatchTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(StopWatch) + "." + nameof(StopWatch.Start))]
        public void Start()
            {
            // TODO: Implement method test LCore.Tools.StopWatch.Start
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Tools) + "." + nameof(StopWatch) + "." + nameof(StopWatch.Stop))]
        public void Stop()
            {
            // TODO: Implement method test LCore.Tools.StopWatch.Stop
            }

        }
    }

namespace L_Tests.LCore.Numbers
    {
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber))]
    public partial class DecimalNumberTester : XUnitOutputTester
        {
        public DecimalNumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~DecimalNumberTester() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.DecimalNumber.op_Implicit")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber) + "." + nameof(DecimalNumber.TypePrecision))]
        public void get_TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.get_TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber) + "." + nameof(DecimalNumber.TypeMinValue))]
        public void get_TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.get_TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber) + "." + nameof(DecimalNumber.TypeMaxValue))]
        public void get_TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.get_TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber) + "." + nameof(DecimalNumber.TypeDefaultValue))]
        public void get_TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.get_TypeDefaultValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber) + "." + nameof(DecimalNumber.GetValuePrecision))]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber) + "." + nameof(DecimalNumber.Add))]
        public void Add_Decimal_Decimal_Decimal()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber) + "." + nameof(DecimalNumber.Subtract))]
        public void Subtract_Decimal_Decimal_Decimal()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber) + "." + nameof(DecimalNumber.Multiply))]
        public void Multiply_Decimal_Decimal_Decimal()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber) + "." + nameof(DecimalNumber.Divide))]
        public void Divide_Decimal_Decimal_Object()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber) + "." + nameof(DecimalNumber.New))]
        public void New_Decimal_Number_1()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber) + "." + nameof(DecimalNumber.ToString))]
        public new void ToString()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.ToString
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber) + "." + nameof(DecimalNumber.TypePrecision))]
        public void TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber) + "." + nameof(DecimalNumber.TypeMinValue))]
        public void TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber) + "." + nameof(DecimalNumber.TypeMaxValue))]
        public void TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DecimalNumber) + "." + nameof(DecimalNumber.TypeDefaultValue))]
        public void TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.DecimalNumber.TypeDefaultValue
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber))]
    public partial class DoubleNumberTester : XUnitOutputTester
        {
        public DoubleNumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~DoubleNumberTester() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.DoubleNumber.op_Implicit")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber) + "." + nameof(DoubleNumber.TypePrecision))]
        public void get_TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.get_TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber) + "." + nameof(DoubleNumber.TypeMinValue))]
        public void get_TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.get_TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber) + "." + nameof(DoubleNumber.TypeMaxValue))]
        public void get_TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.get_TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber) + "." + nameof(DoubleNumber.TypeDefaultValue))]
        public void get_TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.get_TypeDefaultValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber) + "." + nameof(DoubleNumber.GetValuePrecision))]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber) + "." + nameof(DoubleNumber.Add))]
        public void Add_Double_Double_Double()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber) + "." + nameof(DoubleNumber.Subtract))]
        public void Subtract_Double_Double_Double()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber) + "." + nameof(DoubleNumber.Multiply))]
        public void Multiply_Double_Double_Double()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber) + "." + nameof(DoubleNumber.Divide))]
        public void Divide_Double_Double_Object()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber) + "." + nameof(DoubleNumber.New))]
        public void New_Double_Number_1()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber) + "." + nameof(DoubleNumber.ToString))]
        public new void ToString()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.ToString
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber) + "." + nameof(DoubleNumber.TypePrecision))]
        public void TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber) + "." + nameof(DoubleNumber.TypeMinValue))]
        public void TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber) + "." + nameof(DoubleNumber.TypeMaxValue))]
        public void TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(DoubleNumber) + "." + nameof(DoubleNumber.TypeDefaultValue))]
        public void TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.DoubleNumber.TypeDefaultValue
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber))]
    public partial class FloatNumberTester : XUnitOutputTester
        {
        public FloatNumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~FloatNumberTester() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.FloatNumber.op_Implicit")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber) + "." + nameof(FloatNumber.TypePrecision))]
        public void get_TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.get_TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber) + "." + nameof(FloatNumber.TypeMinValue))]
        public void get_TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.get_TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber) + "." + nameof(FloatNumber.TypeMaxValue))]
        public void get_TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.get_TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber) + "." + nameof(FloatNumber.TypeDefaultValue))]
        public void get_TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.get_TypeDefaultValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber) + "." + nameof(FloatNumber.GetValuePrecision))]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber) + "." + nameof(FloatNumber.Add))]
        public void Add_Single_Single_Single()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber) + "." + nameof(FloatNumber.Subtract))]
        public void Subtract_Single_Single_Single()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber) + "." + nameof(FloatNumber.Multiply))]
        public void Multiply_Single_Single_Single()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber) + "." + nameof(FloatNumber.Divide))]
        public void Divide_Single_Single_Object()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber) + "." + nameof(FloatNumber.New))]
        public void New_Single_Number_1()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber) + "." + nameof(FloatNumber.ToString))]
        public new void ToString()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.ToString
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber) + "." + nameof(FloatNumber.TypePrecision))]
        public void TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber) + "." + nameof(FloatNumber.TypeMinValue))]
        public void TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber) + "." + nameof(FloatNumber.TypeMaxValue))]
        public void TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(FloatNumber) + "." + nameof(FloatNumber.TypeDefaultValue))]
        public void TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.FloatNumber.TypeDefaultValue
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(LongNumber))]
    public partial class LongNumberTester : XUnitOutputTester
        {
        public LongNumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~LongNumberTester() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.LongNumber.op_Implicit")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.LongNumber.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(LongNumber) + "." + nameof(LongNumber.TypePrecision))]
        public void get_TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.LongNumber.get_TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(LongNumber) + "." + nameof(LongNumber.TypeMinValue))]
        public void get_TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.LongNumber.get_TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(LongNumber) + "." + nameof(LongNumber.TypeMaxValue))]
        public void get_TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.LongNumber.get_TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(LongNumber) + "." + nameof(LongNumber.TypeDefaultValue))]
        public void get_TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.LongNumber.get_TypeDefaultValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(LongNumber) + "." + nameof(LongNumber.GetValuePrecision))]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.LongNumber.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(LongNumber) + "." + nameof(LongNumber.Add))]
        public void Add_Int64_Int64_Int64()
            {
            // TODO: Implement method test LCore.Numbers.LongNumber.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(LongNumber) + "." + nameof(LongNumber.Subtract))]
        public void Subtract_Int64_Int64_Int64()
            {
            // TODO: Implement method test LCore.Numbers.LongNumber.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(LongNumber) + "." + nameof(LongNumber.Multiply))]
        public void Multiply_Int64_Int64_Int64()
            {
            // TODO: Implement method test LCore.Numbers.LongNumber.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(LongNumber) + "." + nameof(LongNumber.Divide))]
        public void Divide_Int64_Int64_Object()
            {
            // TODO: Implement method test LCore.Numbers.LongNumber.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(LongNumber) + "." + nameof(LongNumber.New))]
        public void New_Int64_Number_1()
            {
            // TODO: Implement method test LCore.Numbers.LongNumber.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(LongNumber) + "." + nameof(LongNumber.TypePrecision))]
        public void TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.LongNumber.TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(LongNumber) + "." + nameof(LongNumber.TypeMinValue))]
        public void TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.LongNumber.TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(LongNumber) + "." + nameof(LongNumber.TypeMaxValue))]
        public void TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.LongNumber.TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(LongNumber) + "." + nameof(LongNumber.TypeDefaultValue))]
        public void TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.LongNumber.TypeDefaultValue
            }

        }
    [Trait(Traits.TargetMember, "LCore.Numbers.Number`2")]
    public partial class Number_2Tester : XUnitOutputTester
        {
        public Number_2Tester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~Number_2Tester() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`2.op_Implicit")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.Number`2.op_Implicit
            }

        }
    [Trait(Traits.TargetMember, "LCore.Numbers.Number`1")]
    public partial class Number_1Tester : XUnitOutputTester
        {
        public Number_1Tester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~Number_1Tester() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.op_Division")]
        public void op_Division()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.op_Division
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.op_Multiply")]
        public void op_Multiply()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.op_Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.op_Subtraction")]
        public void op_Subtraction()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.op_Subtraction
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.op_Addition")]
        public void op_Addition()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.op_Addition
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.get_NumberType")]
        public void get_NumberType()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.get_NumberType
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Add")]
        public void Add_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Subtract")]
        public void Subtract_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Multiply")]
        public void Multiply_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Divide")]
        public void Divide_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.get_Precision")]
        public void get_Precision()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.get_Precision
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.get_MinValue")]
        public void get_MinValue()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.get_MinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.get_MaxValue")]
        public void get_MaxValue()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.get_MaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.get_DefaultValue")]
        public void get_DefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.get_DefaultValue
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.get_TypePrecision")]
        public void get_TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.get_TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.get_TypeMinValue")]
        public void get_TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.get_TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.get_TypeMaxValue")]
        public void get_TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.get_TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.get_TypeDefaultValue")]
        public void get_TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.get_TypeDefaultValue
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.New")]
        public void New_T_Number_1()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.New
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.New")]
        public void New_Object_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.New
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.GetValue")]
        public void GetValue()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.GetValue
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Add")]
        public void Add_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Subtract")]
        public void Subtract_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Multiply")]
        public void Multiply_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Divide")]
        public void Divide_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Add")]
        public void Add_T_T_T()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Subtract")]
        public void Subtract_T_T_T()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Multiply")]
        public void Multiply_T_T_T()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Divide")]
        public void Divide_T_T_Object()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.New")]
        public void New_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.New
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.get_Value")]
        public void get_Value()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.get_Value
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.CompareTo")]
        public void CompareTo()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.CompareTo
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.NumberType")]
        public void NumberType()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.NumberType
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Precision")]
        public void Precision()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Precision
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.MinValue")]
        public void MinValue()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.MinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.MaxValue")]
        public void MaxValue()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.MaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.DefaultValue")]
        public void DefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.DefaultValue
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.TypePrecision")]
        public void TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.TypeMinValue")]
        public void TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.TypeMaxValue")]
        public void TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.TypeDefaultValue")]
        public void TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.TypeDefaultValue
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number`1.Value")]
        public void Value()
            {
            // TODO: Implement method test LCore.Numbers.Number`1.Value
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number))]
    public partial class NumberTester : XUnitOutputTester
        {
        public NumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~NumberTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.NumberType))]
        public void get_NumberType()
            {
            // TODO: Implement method test LCore.Numbers.Number.get_NumberType
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.Equals))]
        public void Equals()
            {
            // TODO: Implement method test LCore.Numbers.Number.Equals
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.ToString))]
        public new void ToString()
            {
            // TODO: Implement method test LCore.Numbers.Number.ToString
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_GreaterThan")]
        public void op_GreaterThan()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_GreaterThan
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_LessThan")]
        public void op_LessThan()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_LessThan
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_GreaterThanOrEqual")]
        public void op_GreaterThanOrEqual()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_GreaterThanOrEqual
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_LessThanOrEqual")]
        public void op_LessThanOrEqual()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_LessThanOrEqual
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_Equality")]
        public void op_Equality()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_Equality
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_Inequality")]
        public void op_Inequality()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_Inequality
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.GetHashCode))]
        public new void GetHashCode()
            {
            // TODO: Implement method test LCore.Numbers.Number.GetHashCode
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_Division")]
        public void op_Division_Number_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_Division
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_Division")]
        public void op_Division_Number_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_Division
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_Multiply")]
        public void op_Multiply_Number_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_Multiply")]
        public void op_Multiply_Number_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_Subtraction")]
        public void op_Subtraction_Number_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_Subtraction
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_Subtraction")]
        public void op_Subtraction_Number_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_Subtraction
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_Addition")]
        public void op_Addition_Number_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_Addition
            }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.Number.op_Addition")]
        public void op_Addition_Number_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.op_Addition
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.CompareTo))]
        public void CompareTo()
            {
            // TODO: Implement method test LCore.Numbers.Number.CompareTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.New))]
        public void New()
            {
            // TODO: Implement method test LCore.Numbers.Number.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.Precision))]
        public void get_Precision()
            {
            // TODO: Implement method test LCore.Numbers.Number.get_Precision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.MinValue))]
        public void get_MinValue()
            {
            // TODO: Implement method test LCore.Numbers.Number.get_MinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.MaxValue))]
        public void get_MaxValue()
            {
            // TODO: Implement method test LCore.Numbers.Number.get_MaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.DefaultValue))]
        public void get_DefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.Number.get_DefaultValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.Divide))]
        public void Divide_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.Multiply))]
        public void Multiply_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.Subtract))]
        public void Subtract_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.Add))]
        public void Add_Number_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.Divide))]
        public void Divide_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.Multiply))]
        public void Multiply_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.Subtract))]
        public void Subtract_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.Add))]
        public void Add_IConvertible_Number()
            {
            // TODO: Implement method test LCore.Numbers.Number.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.GetValuePrecision))]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.Number.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.GetValue))]
        public void GetValue()
            {
            // TODO: Implement method test LCore.Numbers.Number.GetValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.NumberType))]
        public void NumberType()
            {
            // TODO: Implement method test LCore.Numbers.Number.NumberType
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.Precision))]
        public void Precision()
            {
            // TODO: Implement method test LCore.Numbers.Number.Precision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.MinValue))]
        public void MinValue()
            {
            // TODO: Implement method test LCore.Numbers.Number.MinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.MaxValue))]
        public void MaxValue()
            {
            // TODO: Implement method test LCore.Numbers.Number.MaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(Number) + "." + nameof(Number.DefaultValue))]
        public void DefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.Number.DefaultValue
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ByteNumber))]
    public partial class ByteNumberTester : XUnitOutputTester
        {
        public ByteNumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~ByteNumberTester() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.ByteNumber.op_Implicit")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.ByteNumber.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ByteNumber) + "." + nameof(ByteNumber.TypePrecision))]
        public void get_TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.ByteNumber.get_TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ByteNumber) + "." + nameof(ByteNumber.TypeMinValue))]
        public void get_TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.ByteNumber.get_TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ByteNumber) + "." + nameof(ByteNumber.TypeMaxValue))]
        public void get_TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.ByteNumber.get_TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ByteNumber) + "." + nameof(ByteNumber.TypeDefaultValue))]
        public void get_TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.ByteNumber.get_TypeDefaultValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ByteNumber) + "." + nameof(ByteNumber.GetValuePrecision))]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.ByteNumber.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ByteNumber) + "." + nameof(ByteNumber.Add))]
        public void Add_Byte_Byte_Byte()
            {
            // TODO: Implement method test LCore.Numbers.ByteNumber.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ByteNumber) + "." + nameof(ByteNumber.Subtract))]
        public void Subtract_Byte_Byte_Byte()
            {
            // TODO: Implement method test LCore.Numbers.ByteNumber.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ByteNumber) + "." + nameof(ByteNumber.Multiply))]
        public void Multiply_Byte_Byte_Byte()
            {
            // TODO: Implement method test LCore.Numbers.ByteNumber.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ByteNumber) + "." + nameof(ByteNumber.Divide))]
        public void Divide_Byte_Byte_Object()
            {
            // TODO: Implement method test LCore.Numbers.ByteNumber.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ByteNumber) + "." + nameof(ByteNumber.New))]
        public void New_Byte_Number_1()
            {
            // TODO: Implement method test LCore.Numbers.ByteNumber.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ByteNumber) + "." + nameof(ByteNumber.TypePrecision))]
        public void TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.ByteNumber.TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ByteNumber) + "." + nameof(ByteNumber.TypeMinValue))]
        public void TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.ByteNumber.TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ByteNumber) + "." + nameof(ByteNumber.TypeMaxValue))]
        public void TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.ByteNumber.TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ByteNumber) + "." + nameof(ByteNumber.TypeDefaultValue))]
        public void TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.ByteNumber.TypeDefaultValue
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(IntNumber))]
    public partial class IntNumberTester : XUnitOutputTester
        {
        public IntNumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~IntNumberTester() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.IntNumber.op_Implicit")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.IntNumber.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(IntNumber) + "." + nameof(IntNumber.TypePrecision))]
        public void get_TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.IntNumber.get_TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(IntNumber) + "." + nameof(IntNumber.TypeMinValue))]
        public void get_TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.IntNumber.get_TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(IntNumber) + "." + nameof(IntNumber.TypeMaxValue))]
        public void get_TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.IntNumber.get_TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(IntNumber) + "." + nameof(IntNumber.TypeDefaultValue))]
        public void get_TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.IntNumber.get_TypeDefaultValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(IntNumber) + "." + nameof(IntNumber.GetValuePrecision))]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.IntNumber.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(IntNumber) + "." + nameof(IntNumber.Add))]
        public void Add_Int32_Int32_Int32()
            {
            // TODO: Implement method test LCore.Numbers.IntNumber.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(IntNumber) + "." + nameof(IntNumber.Subtract))]
        public void Subtract_Int32_Int32_Int32()
            {
            // TODO: Implement method test LCore.Numbers.IntNumber.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(IntNumber) + "." + nameof(IntNumber.Multiply))]
        public void Multiply_Int32_Int32_Int32()
            {
            // TODO: Implement method test LCore.Numbers.IntNumber.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(IntNumber) + "." + nameof(IntNumber.Divide))]
        public void Divide_Int32_Int32_Object()
            {
            // TODO: Implement method test LCore.Numbers.IntNumber.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(IntNumber) + "." + nameof(IntNumber.New))]
        public void New_Int32_Number_1()
            {
            // TODO: Implement method test LCore.Numbers.IntNumber.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(IntNumber) + "." + nameof(IntNumber.TypePrecision))]
        public void TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.IntNumber.TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(IntNumber) + "." + nameof(IntNumber.TypeMinValue))]
        public void TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.IntNumber.TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(IntNumber) + "." + nameof(IntNumber.TypeMaxValue))]
        public void TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.IntNumber.TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(IntNumber) + "." + nameof(IntNumber.TypeDefaultValue))]
        public void TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.IntNumber.TypeDefaultValue
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(SByteNumber))]
    public partial class SByteNumberTester : XUnitOutputTester
        {
        public SByteNumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~SByteNumberTester() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.SByteNumber.op_Implicit")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.SByteNumber.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(SByteNumber) + "." + nameof(SByteNumber.TypePrecision))]
        public void get_TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.SByteNumber.get_TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(SByteNumber) + "." + nameof(SByteNumber.TypeMinValue))]
        public void get_TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.SByteNumber.get_TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(SByteNumber) + "." + nameof(SByteNumber.TypeMaxValue))]
        public void get_TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.SByteNumber.get_TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(SByteNumber) + "." + nameof(SByteNumber.TypeDefaultValue))]
        public void get_TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.SByteNumber.get_TypeDefaultValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(SByteNumber) + "." + nameof(SByteNumber.GetValuePrecision))]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.SByteNumber.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(SByteNumber) + "." + nameof(SByteNumber.Add))]
        public void Add_SByte_SByte_SByte()
            {
            // TODO: Implement method test LCore.Numbers.SByteNumber.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(SByteNumber) + "." + nameof(SByteNumber.Subtract))]
        public void Subtract_SByte_SByte_SByte()
            {
            // TODO: Implement method test LCore.Numbers.SByteNumber.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(SByteNumber) + "." + nameof(SByteNumber.Multiply))]
        public void Multiply_SByte_SByte_SByte()
            {
            // TODO: Implement method test LCore.Numbers.SByteNumber.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(SByteNumber) + "." + nameof(SByteNumber.Divide))]
        public void Divide_SByte_SByte_Object()
            {
            // TODO: Implement method test LCore.Numbers.SByteNumber.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(SByteNumber) + "." + nameof(SByteNumber.New))]
        public void New_SByte_Number_1()
            {
            // TODO: Implement method test LCore.Numbers.SByteNumber.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(SByteNumber) + "." + nameof(SByteNumber.TypePrecision))]
        public void TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.SByteNumber.TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(SByteNumber) + "." + nameof(SByteNumber.TypeMinValue))]
        public void TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.SByteNumber.TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(SByteNumber) + "." + nameof(SByteNumber.TypeMaxValue))]
        public void TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.SByteNumber.TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(SByteNumber) + "." + nameof(SByteNumber.TypeDefaultValue))]
        public void TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.SByteNumber.TypeDefaultValue
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ShortNumber))]
    public partial class ShortNumberTester : XUnitOutputTester
        {
        public ShortNumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~ShortNumberTester() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.ShortNumber.op_Implicit")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.ShortNumber.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ShortNumber) + "." + nameof(ShortNumber.TypePrecision))]
        public void get_TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.ShortNumber.get_TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ShortNumber) + "." + nameof(ShortNumber.TypeMinValue))]
        public void get_TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.ShortNumber.get_TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ShortNumber) + "." + nameof(ShortNumber.TypeMaxValue))]
        public void get_TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.ShortNumber.get_TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ShortNumber) + "." + nameof(ShortNumber.TypeDefaultValue))]
        public void get_TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.ShortNumber.get_TypeDefaultValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ShortNumber) + "." + nameof(ShortNumber.GetValuePrecision))]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.ShortNumber.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ShortNumber) + "." + nameof(ShortNumber.Add))]
        public void Add_Int16_Int16_Int16()
            {
            // TODO: Implement method test LCore.Numbers.ShortNumber.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ShortNumber) + "." + nameof(ShortNumber.Subtract))]
        public void Subtract_Int16_Int16_Int16()
            {
            // TODO: Implement method test LCore.Numbers.ShortNumber.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ShortNumber) + "." + nameof(ShortNumber.Multiply))]
        public void Multiply_Int16_Int16_Int16()
            {
            // TODO: Implement method test LCore.Numbers.ShortNumber.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ShortNumber) + "." + nameof(ShortNumber.Divide))]
        public void Divide_Int16_Int16_Object()
            {
            // TODO: Implement method test LCore.Numbers.ShortNumber.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ShortNumber) + "." + nameof(ShortNumber.New))]
        public void New_Int16_Number_1()
            {
            // TODO: Implement method test LCore.Numbers.ShortNumber.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ShortNumber) + "." + nameof(ShortNumber.TypePrecision))]
        public void TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.ShortNumber.TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ShortNumber) + "." + nameof(ShortNumber.TypeMinValue))]
        public void TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.ShortNumber.TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ShortNumber) + "." + nameof(ShortNumber.TypeMaxValue))]
        public void TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.ShortNumber.TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ShortNumber) + "." + nameof(ShortNumber.TypeDefaultValue))]
        public void TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.ShortNumber.TypeDefaultValue
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UIntNumber))]
    public partial class UIntNumberTester : XUnitOutputTester
        {
        public UIntNumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~UIntNumberTester() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.UIntNumber.op_Implicit")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.UIntNumber.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UIntNumber) + "." + nameof(UIntNumber.TypePrecision))]
        public void get_TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.UIntNumber.get_TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UIntNumber) + "." + nameof(UIntNumber.TypeMinValue))]
        public void get_TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.UIntNumber.get_TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UIntNumber) + "." + nameof(UIntNumber.TypeMaxValue))]
        public void get_TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.UIntNumber.get_TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UIntNumber) + "." + nameof(UIntNumber.TypeDefaultValue))]
        public void get_TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.UIntNumber.get_TypeDefaultValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UIntNumber) + "." + nameof(UIntNumber.GetValuePrecision))]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.UIntNumber.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UIntNumber) + "." + nameof(UIntNumber.Add))]
        public void Add_UInt32_UInt32_UInt32()
            {
            // TODO: Implement method test LCore.Numbers.UIntNumber.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UIntNumber) + "." + nameof(UIntNumber.Subtract))]
        public void Subtract_UInt32_UInt32_UInt32()
            {
            // TODO: Implement method test LCore.Numbers.UIntNumber.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UIntNumber) + "." + nameof(UIntNumber.Multiply))]
        public void Multiply_UInt32_UInt32_UInt32()
            {
            // TODO: Implement method test LCore.Numbers.UIntNumber.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UIntNumber) + "." + nameof(UIntNumber.Divide))]
        public void Divide_UInt32_UInt32_Object()
            {
            // TODO: Implement method test LCore.Numbers.UIntNumber.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UIntNumber) + "." + nameof(UIntNumber.New))]
        public void New_UInt32_Number_1()
            {
            // TODO: Implement method test LCore.Numbers.UIntNumber.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UIntNumber) + "." + nameof(UIntNumber.TypePrecision))]
        public void TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.UIntNumber.TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UIntNumber) + "." + nameof(UIntNumber.TypeMinValue))]
        public void TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.UIntNumber.TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UIntNumber) + "." + nameof(UIntNumber.TypeMaxValue))]
        public void TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.UIntNumber.TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UIntNumber) + "." + nameof(UIntNumber.TypeDefaultValue))]
        public void TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.UIntNumber.TypeDefaultValue
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ULongNumber))]
    public partial class ULongNumberTester : XUnitOutputTester
        {
        public ULongNumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~ULongNumberTester() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.ULongNumber.op_Implicit")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.ULongNumber.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ULongNumber) + "." + nameof(ULongNumber.TypePrecision))]
        public void get_TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.ULongNumber.get_TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ULongNumber) + "." + nameof(ULongNumber.TypeMinValue))]
        public void get_TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.ULongNumber.get_TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ULongNumber) + "." + nameof(ULongNumber.TypeMaxValue))]
        public void get_TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.ULongNumber.get_TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ULongNumber) + "." + nameof(ULongNumber.TypeDefaultValue))]
        public void get_TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.ULongNumber.get_TypeDefaultValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ULongNumber) + "." + nameof(ULongNumber.GetValuePrecision))]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.ULongNumber.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ULongNumber) + "." + nameof(ULongNumber.Add))]
        public void Add_UInt64_UInt64_UInt64()
            {
            // TODO: Implement method test LCore.Numbers.ULongNumber.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ULongNumber) + "." + nameof(ULongNumber.Subtract))]
        public void Subtract_UInt64_UInt64_UInt64()
            {
            // TODO: Implement method test LCore.Numbers.ULongNumber.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ULongNumber) + "." + nameof(ULongNumber.Multiply))]
        public void Multiply_UInt64_UInt64_UInt64()
            {
            // TODO: Implement method test LCore.Numbers.ULongNumber.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ULongNumber) + "." + nameof(ULongNumber.Divide))]
        public void Divide_UInt64_UInt64_Object()
            {
            // TODO: Implement method test LCore.Numbers.ULongNumber.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ULongNumber) + "." + nameof(ULongNumber.New))]
        public void New_UInt64_Number_1()
            {
            // TODO: Implement method test LCore.Numbers.ULongNumber.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ULongNumber) + "." + nameof(ULongNumber.TypePrecision))]
        public void TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.ULongNumber.TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ULongNumber) + "." + nameof(ULongNumber.TypeMinValue))]
        public void TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.ULongNumber.TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ULongNumber) + "." + nameof(ULongNumber.TypeMaxValue))]
        public void TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.ULongNumber.TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(ULongNumber) + "." + nameof(ULongNumber.TypeDefaultValue))]
        public void TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.ULongNumber.TypeDefaultValue
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UShortNumber))]
    public partial class UShortNumberTester : XUnitOutputTester
        {
        public UShortNumberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~UShortNumberTester() { }

        [Fact]
        [Trait(Traits.TargetMember, "LCore.Numbers.UShortNumber.op_Implicit")]
        public void op_Implicit()
            {
            // TODO: Implement method test LCore.Numbers.UShortNumber.op_Implicit
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UShortNumber) + "." + nameof(UShortNumber.TypePrecision))]
        public void get_TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.UShortNumber.get_TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UShortNumber) + "." + nameof(UShortNumber.TypeMinValue))]
        public void get_TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.UShortNumber.get_TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UShortNumber) + "." + nameof(UShortNumber.TypeMaxValue))]
        public void get_TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.UShortNumber.get_TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UShortNumber) + "." + nameof(UShortNumber.TypeDefaultValue))]
        public void get_TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.UShortNumber.get_TypeDefaultValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UShortNumber) + "." + nameof(UShortNumber.GetValuePrecision))]
        public void GetValuePrecision()
            {
            // TODO: Implement method test LCore.Numbers.UShortNumber.GetValuePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UShortNumber) + "." + nameof(UShortNumber.Add))]
        public void Add_UInt16_UInt16_UInt16()
            {
            // TODO: Implement method test LCore.Numbers.UShortNumber.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UShortNumber) + "." + nameof(UShortNumber.Subtract))]
        public void Subtract_UInt16_UInt16_UInt16()
            {
            // TODO: Implement method test LCore.Numbers.UShortNumber.Subtract
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UShortNumber) + "." + nameof(UShortNumber.Multiply))]
        public void Multiply_UInt16_UInt16_UInt16()
            {
            // TODO: Implement method test LCore.Numbers.UShortNumber.Multiply
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UShortNumber) + "." + nameof(UShortNumber.Divide))]
        public void Divide_UInt16_UInt16_Object()
            {
            // TODO: Implement method test LCore.Numbers.UShortNumber.Divide
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UShortNumber) + "." + nameof(UShortNumber.New))]
        public void New_UInt16_Number_1()
            {
            // TODO: Implement method test LCore.Numbers.UShortNumber.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UShortNumber) + "." + nameof(UShortNumber.TypePrecision))]
        public void TypePrecision()
            {
            // TODO: Implement method test LCore.Numbers.UShortNumber.TypePrecision
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UShortNumber) + "." + nameof(UShortNumber.TypeMinValue))]
        public void TypeMinValue()
            {
            // TODO: Implement method test LCore.Numbers.UShortNumber.TypeMinValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UShortNumber) + "." + nameof(UShortNumber.TypeMaxValue))]
        public void TypeMaxValue()
            {
            // TODO: Implement method test LCore.Numbers.UShortNumber.TypeMaxValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Numbers) + "." + nameof(UShortNumber) + "." + nameof(UShortNumber.TypeDefaultValue))]
        public void TypeDefaultValue()
            {
            // TODO: Implement method test LCore.Numbers.UShortNumber.TypeDefaultValue
            }

        }
    }

namespace L_Tests.LCore.Naming
    {
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Naming) + "." + nameof(FriendlyNameAttribute))]
    public partial class FriendlyNameAttributeTester : XUnitOutputTester
        {
        public FriendlyNameAttributeTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~FriendlyNameAttributeTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Naming) + "." + nameof(FriendlyNameAttribute) + "." + nameof(FriendlyNameAttribute.FriendlyName))]
        public void get_FriendlyName()
            {
            // TODO: Implement method test LCore.Naming.FriendlyNameAttribute.get_FriendlyName
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Naming) + "." + nameof(FriendlyNameAttribute) + "." + nameof(FriendlyNameAttribute.FriendlyName))]
        public void set_FriendlyName()
            {
            // TODO: Implement method test LCore.Naming.FriendlyNameAttribute.set_FriendlyName
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Naming) + "." + nameof(FriendlyNameAttribute) + "." + nameof(FriendlyNameAttribute.FriendlyName))]
        public void FriendlyName()
            {
            // TODO: Implement method test LCore.Naming.FriendlyNameAttribute.FriendlyName
            }

        }
    }

namespace L_Tests.LCore.LUnit
    {
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestFailsAttribute))]
    public partial class TestFailsAttributeTester : XUnitOutputTester
        {
        public TestFailsAttributeTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~TestFailsAttributeTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestFailsAttribute) + "." + nameof(TestFailsAttribute.ExceptionType))]
        public void get_ExceptionType()
            {
            // TODO: Implement method test LCore.LUnit.TestFailsAttribute.get_ExceptionType
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestFailsAttribute) + "." + nameof(TestFailsAttribute.ExceptionType))]
        public void set_ExceptionType()
            {
            // TODO: Implement method test LCore.LUnit.TestFailsAttribute.set_ExceptionType
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestFailsAttribute) + "." + nameof(TestFailsAttribute.AdditionalChecks))]
        public void get_AdditionalChecks()
            {
            // TODO: Implement method test LCore.LUnit.TestFailsAttribute.get_AdditionalChecks
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestFailsAttribute) + "." + nameof(TestFailsAttribute.AdditionalChecks))]
        public void set_AdditionalChecks()
            {
            // TODO: Implement method test LCore.LUnit.TestFailsAttribute.set_AdditionalChecks
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestFailsAttribute) + "." + nameof(TestFailsAttribute.Parameters))]
        public void get_Parameters()
            {
            // TODO: Implement method test LCore.LUnit.TestFailsAttribute.get_Parameters
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestFailsAttribute) + "." + nameof(TestFailsAttribute.Parameters))]
        public void set_Parameters()
            {
            // TODO: Implement method test LCore.LUnit.TestFailsAttribute.set_Parameters
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestFailsAttribute) + "." + nameof(TestFailsAttribute.ExceptionType))]
        public void ExceptionType()
            {
            // TODO: Implement method test LCore.LUnit.TestFailsAttribute.ExceptionType
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestFailsAttribute) + "." + nameof(TestFailsAttribute.AdditionalChecks))]
        public void AdditionalChecks()
            {
            // TODO: Implement method test LCore.LUnit.TestFailsAttribute.AdditionalChecks
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestFailsAttribute) + "." + nameof(TestFailsAttribute.Parameters))]
        public void Parameters()
            {
            // TODO: Implement method test LCore.LUnit.TestFailsAttribute.Parameters
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestMethodGenericsAttribute))]
    public partial class TestMethodGenericsAttributeTester : XUnitOutputTester
        {
        public TestMethodGenericsAttributeTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~TestMethodGenericsAttributeTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestMethodGenericsAttribute) + "." + nameof(TestMethodGenericsAttribute.GenericTypes))]
        public void get_GenericTypes()
            {
            // TODO: Implement method test LCore.LUnit.TestMethodGenericsAttribute.get_GenericTypes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestMethodGenericsAttribute) + "." + nameof(TestMethodGenericsAttribute.GenericTypes))]
        public void GenericTypes()
            {
            // TODO: Implement method test LCore.LUnit.TestMethodGenericsAttribute.GenericTypes
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestBoundAttribute))]
    public partial class TestBoundAttributeTester : XUnitOutputTester
        {
        public TestBoundAttributeTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~TestBoundAttributeTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestBoundAttribute) + "." + nameof(TestBoundAttribute.Minimum))]
        public void get_Minimum()
            {
            // TODO: Implement method test LCore.LUnit.TestBoundAttribute.get_Minimum
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestBoundAttribute) + "." + nameof(TestBoundAttribute.Maximum))]
        public void get_Maximum()
            {
            // TODO: Implement method test LCore.LUnit.TestBoundAttribute.get_Maximum
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestBoundAttribute) + "." + nameof(TestBoundAttribute.ValueType))]
        public void get_ValueType()
            {
            // TODO: Implement method test LCore.LUnit.TestBoundAttribute.get_ValueType
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestBoundAttribute) + "." + nameof(TestBoundAttribute.Minimum))]
        public void Minimum()
            {
            // TODO: Implement method test LCore.LUnit.TestBoundAttribute.Minimum
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestBoundAttribute) + "." + nameof(TestBoundAttribute.Maximum))]
        public void Maximum()
            {
            // TODO: Implement method test LCore.LUnit.TestBoundAttribute.Maximum
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestBoundAttribute) + "." + nameof(TestBoundAttribute.ValueType))]
        public void ValueType()
            {
            // TODO: Implement method test LCore.LUnit.TestBoundAttribute.ValueType
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestResultAttribute))]
    public partial class TestResultAttributeTester : XUnitOutputTester
        {
        public TestResultAttributeTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~TestResultAttributeTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestResultAttribute) + "." + nameof(TestResultAttribute.Parameters))]
        public void get_Parameters()
            {
            // TODO: Implement method test LCore.LUnit.TestResultAttribute.get_Parameters
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestResultAttribute) + "." + nameof(TestResultAttribute.ExpectedResult))]
        public void get_ExpectedResult()
            {
            // TODO: Implement method test LCore.LUnit.TestResultAttribute.get_ExpectedResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestResultAttribute) + "." + nameof(TestResultAttribute.AdditionalResultChecks))]
        public void get_AdditionalResultChecks()
            {
            // TODO: Implement method test LCore.LUnit.TestResultAttribute.get_AdditionalResultChecks
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestResultAttribute) + "." + nameof(TestResultAttribute.GenericTypes))]
        public void get_GenericTypes()
            {
            // TODO: Implement method test LCore.LUnit.TestResultAttribute.get_GenericTypes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestResultAttribute) + "." + nameof(TestResultAttribute.GenericTypes))]
        public void set_GenericTypes()
            {
            // TODO: Implement method test LCore.LUnit.TestResultAttribute.set_GenericTypes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestResultAttribute) + "." + nameof(TestResultAttribute.Parameters))]
        public void Parameters()
            {
            // TODO: Implement method test LCore.LUnit.TestResultAttribute.Parameters
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestResultAttribute) + "." + nameof(TestResultAttribute.ExpectedResult))]
        public void ExpectedResult()
            {
            // TODO: Implement method test LCore.LUnit.TestResultAttribute.ExpectedResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestResultAttribute) + "." + nameof(TestResultAttribute.AdditionalResultChecks))]
        public void AdditionalResultChecks()
            {
            // TODO: Implement method test LCore.LUnit.TestResultAttribute.AdditionalResultChecks
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestResultAttribute) + "." + nameof(TestResultAttribute.GenericTypes))]
        public void GenericTypes()
            {
            // TODO: Implement method test LCore.LUnit.TestResultAttribute.GenericTypes
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestSourceAttribute))]
    public partial class TestSourceAttributeTester : XUnitOutputTester
        {
        public TestSourceAttributeTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~TestSourceAttributeTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestSourceAttribute) + "." + nameof(TestSourceAttribute.ExpectedSource))]
        public void get_ExpectedSource()
            {
            // TODO: Implement method test LCore.LUnit.TestSourceAttribute.get_ExpectedSource
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestSourceAttribute) + "." + nameof(TestSourceAttribute.AdditionalSourceChecks))]
        public void get_AdditionalSourceChecks()
            {
            // TODO: Implement method test LCore.LUnit.TestSourceAttribute.get_AdditionalSourceChecks
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestSourceAttribute) + "." + nameof(TestSourceAttribute.Parameters))]
        public void get_Parameters()
            {
            // TODO: Implement method test LCore.LUnit.TestSourceAttribute.get_Parameters
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestSourceAttribute) + "." + nameof(TestSourceAttribute.ExpectedSource))]
        public void ExpectedSource()
            {
            // TODO: Implement method test LCore.LUnit.TestSourceAttribute.ExpectedSource
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestSourceAttribute) + "." + nameof(TestSourceAttribute.AdditionalSourceChecks))]
        public void AdditionalSourceChecks()
            {
            // TODO: Implement method test LCore.LUnit.TestSourceAttribute.AdditionalSourceChecks
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestSourceAttribute) + "." + nameof(TestSourceAttribute.Parameters))]
        public void Parameters()
            {
            // TODO: Implement method test LCore.LUnit.TestSourceAttribute.Parameters
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestSucceedesAttribute))]
    public partial class TestSucceedesAttributeTester : XUnitOutputTester
        {
        public TestSucceedesAttributeTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~TestSucceedesAttributeTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestSucceedesAttribute) + "." + nameof(TestSucceedesAttribute.AdditionalChecks))]
        public void get_AdditionalChecks()
            {
            // TODO: Implement method test LCore.LUnit.TestSucceedesAttribute.get_AdditionalChecks
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestSucceedesAttribute) + "." + nameof(TestSucceedesAttribute.AdditionalChecks))]
        public void set_AdditionalChecks()
            {
            // TODO: Implement method test LCore.LUnit.TestSucceedesAttribute.set_AdditionalChecks
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestSucceedesAttribute) + "." + nameof(TestSucceedesAttribute.Parameters))]
        public void get_Parameters()
            {
            // TODO: Implement method test LCore.LUnit.TestSucceedesAttribute.get_Parameters
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestSucceedesAttribute) + "." + nameof(TestSucceedesAttribute.Parameters))]
        public void set_Parameters()
            {
            // TODO: Implement method test LCore.LUnit.TestSucceedesAttribute.set_Parameters
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestSucceedesAttribute) + "." + nameof(TestSucceedesAttribute.AdditionalChecks))]
        public void AdditionalChecks()
            {
            // TODO: Implement method test LCore.LUnit.TestSucceedesAttribute.AdditionalChecks
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestSucceedesAttribute) + "." + nameof(TestSucceedesAttribute.Parameters))]
        public void Parameters()
            {
            // TODO: Implement method test LCore.LUnit.TestSucceedesAttribute.Parameters
            }

        }
    }

namespace L_Tests.LCore.Extensions
    {
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class LTester : XUnitOutputTester
        {
        public LTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~LTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_15_Func_15()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_16_Func_16()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_17_Func_17()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_1()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_5()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_6()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_7()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_8()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_9()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_10()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_11()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_12()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_13()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_14()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_15()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_16()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_6()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_7()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_8()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_9()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_10()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_11()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_12()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_13()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_14()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_15()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_16()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_17()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_Action()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_1_Action_1()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_2_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_3_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_4_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_5_Action_5()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_6_Action_6()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_7_Action_7()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_8_Action_8()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_9_Action_9()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_10_Action_10()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_11_Action_11()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_12_Action_12()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_13_Action_13()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_14_Action_14()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_15_Action_15()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.A))]
        public void A_Action_16_Action_16()
            {
            // TODO: Implement method test LCore.Extensions.L.A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_1_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_2_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_3_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_4_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_5_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_6_Func_6()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_7_Func_7()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_8_Func_8()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_9_Func_9()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_10_Func_10()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_11_Func_11()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_12_Func_12()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_13_Func_13()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.F))]
        public void F_Func_14_Func_14()
            {
            // TODO: Implement method test LCore.Extensions.L.F
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class L_RefTester : XUnitOutputTester
        {
        public L_RefTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~L_RefTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ref) + "." + nameof(L.Ref.Constant))]
        public void Constant()
            {
            // TODO: Implement method test LCore.Extensions.L.Ref.Constant
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ref) + "." + nameof(L.Ref.Constructor))]
        public void Constructor()
            {
            // TODO: Implement method test LCore.Extensions.L.Ref.Constructor
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ref) + "." + nameof(L.Ref.FindType))]
        public void FindType()
            {
            // TODO: Implement method test LCore.Extensions.L.Ref.FindType
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ref) + "." + nameof(L.Ref.FindMember))]
        public void FindMember()
            {
            // TODO: Implement method test LCore.Extensions.L.Ref.FindMember
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ref) + "." + nameof(L.Ref.GetNamespaceTypes))]
        public void GetNamespaceTypes_String_Type_Type()
            {
            // TODO: Implement method test LCore.Extensions.L.Ref.GetNamespaceTypes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ref) + "." + nameof(L.Ref.GetNamespaceTypes))]
        public void GetNamespaceTypes_Type_String_Type_Type()
            {
            // TODO: Implement method test LCore.Extensions.L.Ref.GetNamespaceTypes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ref) + "." + nameof(L.Ref.GetNamespaceTypes))]
        public void GetNamespaceTypes_Assembly_String_Type_Type()
            {
            // TODO: Implement method test LCore.Extensions.L.Ref.GetNamespaceTypes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ref) + "." + nameof(L.Ref.Member))]
        public void Member()
            {
            // TODO: Implement method test LCore.Extensions.L.Ref.Member
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ref) + "." + nameof(L.Ref.Method))]
        public void Method()
            {
            // TODO: Implement method test LCore.Extensions.L.Ref.Method
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ref) + "." + nameof(L.Ref.StaticMethod))]
        public void StaticMethod()
            {
            // TODO: Implement method test LCore.Extensions.L.Ref.StaticMethod
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ref) + "." + nameof(L.Ref.Event))]
        public void Event()
            {
            // TODO: Implement method test LCore.Extensions.L.Ref.Event
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class L_NumTester : XUnitOutputTester
        {
        public L_NumTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~L_NumTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Num) + "." + nameof(L.Num.MostPreciseType))]
        public void get_MostPreciseType()
            {
            // TODO: Implement method test LCore.Extensions.L.Num.get_MostPreciseType
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Num) + "." + nameof(L.Num.NumberTypes))]
        public void get_NumberTypes()
            {
            // TODO: Implement method test LCore.Extensions.L.Num.get_NumberTypes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Num) + "." + nameof(L.Num.ScientificNotationToNumber))]
        public void ScientificNotationToNumber()
            {
            // TODO: Implement method test LCore.Extensions.L.Num.ScientificNotationToNumber
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Num) + "." + nameof(L.Num.NumberTypes))]
        public void NumberTypes()
            {
            // TODO: Implement method test LCore.Extensions.L.Num.NumberTypes
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class L_LoopTester : XUnitOutputTester
        {
        public L_LoopTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~L_LoopTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.While_T))]
        public void While_T_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.While_T
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_DoWhile))]
        public void L_DoWhile()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_DoWhile
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_Until))]
        public void L_Until()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Until
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_DoUntil))]
        public void L_DoUntil()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_DoUntil
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_Repeat_uint))]
        public void L_Repeat_uint()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Repeat_uint
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_Repeat_int))]
        public void L_Repeat_int()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Repeat_int
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.WhileI_T))]
        public void WhileI_T_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.WhileI_T
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.Until))]
        public void Until_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.Until
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.DoWhile))]
        public void DoWhile_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoWhile
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.DoUntil))]
        public void DoUntil_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoUntil
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_Collect))]
        public void L_Collect_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Collect
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_MergeLoop))]
        public void L_MergeLoop_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_MergeLoop
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_To))]
        public void L_To()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_To
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_ToI))]
        public void L_ToI()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_ToI
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Loop) + "." + nameof(L.Loop.L_For))]
        public void L_For()
            {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_For
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class L_ObjTester : XUnitOutputTester
        {
        public L_ObjTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~L_ObjTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Obj) + "." + nameof(L.Obj.As))]
        public void As()
            {
            // TODO: Implement method test LCore.Extensions.L.Obj.As
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Obj) + "." + nameof(L.Obj.Swap))]
        public void Swap()
            {
            // TODO: Implement method test LCore.Extensions.L.Obj.Swap
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Obj) + "." + nameof(L.Obj.SafeEquals))]
        public void SafeEquals()
            {
            // TODO: Implement method test LCore.Extensions.L.Obj.SafeEquals
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Obj) + "." + nameof(L.Obj.New))]
        public void New()
            {
            // TODO: Implement method test LCore.Extensions.L.Obj.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Obj) + "." + nameof(L.Obj.NewRandom))]
        public void NewRandom_Nullable_1_Nullable_1_T()
            {
            // TODO: Implement method test LCore.Extensions.L.Obj.NewRandom
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Obj) + "." + nameof(L.Obj.NewRandom))]
        public void NewRandom_Type_Object_Object_Object()
            {
            // TODO: Implement method test LCore.Extensions.L.Obj.NewRandom
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Obj) + "." + nameof(L.Obj.IsNull))]
        public void IsNull()
            {
            // TODO: Implement method test LCore.Extensions.L.Obj.IsNull
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Obj) + "." + nameof(L.Obj.IsA))]
        public void IsA()
            {
            // TODO: Implement method test LCore.Extensions.L.Obj.IsA
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Obj) + "." + nameof(L.Obj.HasProperty))]
        public void HasProperty()
            {
            // TODO: Implement method test LCore.Extensions.L.Obj.HasProperty
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Obj) + "." + nameof(L.Obj.GetProperty))]
        public void GetProperty()
            {
            // TODO: Implement method test LCore.Extensions.L.Obj.GetProperty
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Obj) + "." + nameof(L.Obj.SetProperty))]
        public void SetProperty()
            {
            // TODO: Implement method test LCore.Extensions.L.Obj.SetProperty
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class L_BoolTester : XUnitOutputTester
        {
        public L_BoolTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~L_BoolTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Bool) + "." + nameof(L.Bool.L_If_A))]
        public void L_If_A_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Bool) + "." + nameof(L.Bool.L_If_F))]
        public void L_If_F_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Bool) + "." + nameof(L.Bool.L_IfElse))]
        public void L_IfElse_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_IfElse
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class L_DateTester : XUnitOutputTester
        {
        public L_DateTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~L_DateTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Date) + "." + nameof(L.Date.MonthNumberGetName))]
        public void MonthNumberGetName()
            {
            // TODO: Implement method test LCore.Extensions.L.Date.MonthNumberGetName
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class L_FileTester : XUnitOutputTester
        {
        public L_FileTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~L_FileTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.File) + "." + nameof(L.File.BufferedMoveProgress))]
        public void add_BufferedMoveProgress()
            {
            // TODO: Implement method test LCore.Extensions.L.File.add_BufferedMoveProgress
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.File) + "." + nameof(L.File.BufferedMoveProgress))]
        public void remove_BufferedMoveProgress()
            {
            // TODO: Implement method test LCore.Extensions.L.File.remove_BufferedMoveProgress
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.File) + "." + nameof(L.File.BufferedMove))]
        public void BufferedMove()
            {
            // TODO: Implement method test LCore.Extensions.L.File.BufferedMove
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.File) + "." + nameof(L.File.CombinePaths))]
        public void CombinePaths_String_String()
            {
            // TODO: Implement method test LCore.Extensions.L.File.CombinePaths
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.File) + "." + nameof(L.File.CombinePaths))]
        public void CombinePaths_Char_String_String()
            {
            // TODO: Implement method test LCore.Extensions.L.File.CombinePaths
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.File) + "." + nameof(L.File.GetFileContents))]
        public void GetFileContents()
            {
            // TODO: Implement method test LCore.Extensions.L.File.GetFileContents
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.File) + "." + nameof(L.File.SafeCopyFile))]
        public void SafeCopyFile()
            {
            // TODO: Implement method test LCore.Extensions.L.File.SafeCopyFile
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.File) + "." + nameof(L.File.SafeMoveFile))]
        public void SafeMoveFile()
            {
            // TODO: Implement method test LCore.Extensions.L.File.SafeMoveFile
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.File) + "." + nameof(L.File.BufferedMoveProgress))]
        public void BufferedMoveProgress()
            {
            // TODO: Implement method test LCore.Extensions.L.File.BufferedMoveProgress
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class L_StrTester : XUnitOutputTester
        {
        public L_StrTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~L_StrTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Str) + "." + nameof(L.Str.Char))]
        public void Char()
            {
            // TODO: Implement method test LCore.Extensions.L.Str.Char
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Str) + "." + nameof(L.Str.JoinLines))]
        public void JoinLines()
            {
            // TODO: Implement method test LCore.Extensions.L.Str.JoinLines
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Str) + "." + nameof(L.Str.CompareNumberString))]
        public void CompareNumberString()
            {
            // TODO: Implement method test LCore.Extensions.L.Str.CompareNumberString
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Str) + "." + nameof(L.Str.NumericalCompare))]
        public void NumericalCompare()
            {
            // TODO: Implement method test LCore.Extensions.L.Str.NumericalCompare
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Str) + "." + nameof(L.Str.Pluralize))]
        public void Pluralize_String_Int32_String()
            {
            // TODO: Implement method test LCore.Extensions.L.Str.Pluralize
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Str) + "." + nameof(L.Str.Pluralize))]
        public void Pluralize_String_UInt32_String()
            {
            // TODO: Implement method test LCore.Extensions.L.Str.Pluralize
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Str) + "." + nameof(L.Str.RemoveChars))]
        public void RemoveChars()
            {
            // TODO: Implement method test LCore.Extensions.L.Str.RemoveChars
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Str) + "." + nameof(L.Str.ReplaceDouble))]
        public void ReplaceDouble()
            {
            // TODO: Implement method test LCore.Extensions.L.Str.ReplaceDouble
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Str) + "." + nameof(L.Str.Singularize))]
        public void Singularize()
            {
            // TODO: Implement method test LCore.Extensions.L.Str.Singularize
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Str) + "." + nameof(L.Str.Surround))]
        public void Surround()
            {
            // TODO: Implement method test LCore.Extensions.L.Str.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Str) + "." + nameof(L.Str.ToS))]
        public void ToS()
            {
            // TODO: Implement method test LCore.Extensions.L.Str.ToS
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class L_LogicTester : XUnitOutputTester
        {
        public L_LogicTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~L_LogicTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.New))]
        public void New_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.New))]
        public void New_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.New))]
        public void New_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_10()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_11()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_12()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_13()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_14()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_15()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_16()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do))]
        public void Do_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do))]
        public void Do_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do))]
        public void Do_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do))]
        public void Do_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do))]
        public void Do_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do))]
        public void Do_Func_6()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do))]
        public void Do_Func_7()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do))]
        public void Do_Func_8()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do))]
        public void Do_Func_9()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do))]
        public void Do_Func_10()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do))]
        public void Do_Func_11()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do))]
        public void Do_Func_12()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do))]
        public void Do_Func_13()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do))]
        public void Do_Func_14()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do))]
        public void Do_Func_15()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do))]
        public void Do_Func_16()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Do))]
        public void Do_Func_17()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_Action()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_1_Action_1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_2_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_3_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_4_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_5_Action_5()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_6_Action_6()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_7_Action_7()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_8_Action_8()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_9_Action_9()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_10_Action_10()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_11_Action_11()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_12_Action_12()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_13_Action_13()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_14_Action_14()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_15_Action_15()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_16_Action_16()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function))]
        public void Function_Func_1_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function))]
        public void Function_Func_2_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function))]
        public void Function_Func_3_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function))]
        public void Function_Func_4_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function))]
        public void Function_Func_5_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function))]
        public void Function_Func_6_Func_6()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function))]
        public void Function_Func_7_Func_7()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function))]
        public void Function_Func_8_Func_8()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function))]
        public void Function_Func_9_Func_9()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function))]
        public void Function_Func_10_Func_10()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function))]
        public void Function_Func_11_Func_11()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function))]
        public void Function_Func_12_Func_12()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function))]
        public void Function_Func_13_Func_13()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function))]
        public void Function_Func_14_Func_14()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function))]
        public void Function_Func_15_Func_15()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function))]
        public void Function_Func_16_Func_16()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Function))]
        public void Function_Func_17_Func_17()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Return))]
        public void Return_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Return
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Return))]
        public void Return_U_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Return
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Pass))]
        public void Pass()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Pass
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.New))]
        public void New_Object_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.New))]
        public void New_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.New))]
        public void New_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_F2))]
        public void L_ThenMissing_F_F2_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_F3))]
        public void L_ThenMissing_F_F3_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_F4))]
        public void L_ThenMissing_F_F4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge))]
        public void L_Merge()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_A_F))]
        public void L_Merge_A_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_A_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F_A))]
        public void L_Merge_F_A()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F_A1))]
        public void L_Merge_F_A1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A1
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F_A2))]
        public void L_Merge_F_A2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F_A3))]
        public void L_Merge_F_A3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F_A4))]
        public void L_Merge_F_A4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F1_A))]
        public void L_Merge_F1_A()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F1_A1))]
        public void L_Merge_F1_A1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_A1
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F1_A2))]
        public void L_Merge_F1_A2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_A2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F1_A3))]
        public void L_Merge_F1_A3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_A3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F2_A))]
        public void L_Merge_F2_A()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F2_A1))]
        public void L_Merge_F2_A1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_A1
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F2_A2))]
        public void L_Merge_F2_A2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_A2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F3_A))]
        public void L_Merge_F3_A_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F3_A1))]
        public void L_Merge_F3_A1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_A1
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F_F))]
        public void L_Merge_F_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F_F1))]
        public void L_Merge_F_F1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F1
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F_F2))]
        public void L_Merge_F_F2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F_F3))]
        public void L_Merge_F_F3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F_F4))]
        public void L_Merge_F_F4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F1_F))]
        public void L_Merge_F1_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F1_F1))]
        public void L_Merge_F1_F1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_F1
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F1_F2))]
        public void L_Merge_F1_F2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_F2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F1_F3))]
        public void L_Merge_F1_F3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_F3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F2_F))]
        public void L_Merge_F2_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F2_F1))]
        public void L_Merge_F2_F1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_F1
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F2_F2))]
        public void L_Merge_F2_F2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_F2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F3_F))]
        public void L_Merge_F3_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F3_F1))]
        public void L_Merge_F3_F1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_F1
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Merge_F4_F))]
        public void L_Merge_F4_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F4_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_A))]
        public void L_Supply_A_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_A2))]
        public void L_Supply_A2_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_A3))]
        public void L_Supply_A3_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_A4))]
        public void L_Supply_A4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_F))]
        public void L_Supply_F_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_F2))]
        public void L_Supply_F2_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_F3))]
        public void L_Supply_F3_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Supply_F4))]
        public void L_Supply_F4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_1()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_5()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_6()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_7()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_8()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Action))]
        public void Action_Action_9()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Cast_A))]
        public void L_Cast_A_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Cast_F))]
        public void L_Cast_F_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Then_A))]
        public void Then_A_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Then_A_F))]
        public void Then_A_F_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Then_F))]
        public void Then_F_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Then_F_F))]
        public void L_Then_F_F_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Then_F_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A))]
        public void L_ThenMissing_A_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A2))]
        public void L_ThenMissing_A2_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A3))]
        public void L_ThenMissing_A3_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A4))]
        public void L_ThenMissing_A4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A_F))]
        public void L_ThenMissing_A_F_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A_F2))]
        public void L_ThenMissing_A_F2_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A_F3))]
        public void L_ThenMissing_A_F3_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_A_F4))]
        public void L_ThenMissing_A_F4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_A))]
        public void L_ThenMissing_F_A_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_A2))]
        public void L_ThenMissing_F_A2_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_A3))]
        public void L_ThenMissing_F_A3_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_A4))]
        public void L_ThenMissing_F_A4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_ThenMissing_F_F))]
        public void L_ThenMissing_F_F_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Defaults_A))]
        public void L_Defaults_A_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Defaults_A))]
        public void L_Defaults_A_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Defaults_A))]
        public void L_Defaults_A_Func_6()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Defaults_F))]
        public void L_Defaults_F_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Defaults_F))]
        public void L_Defaults_F_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Defaults_F))]
        public void L_Defaults_F_Func_6()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require_A))]
        public void L_Require_A_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require2_A))]
        public void L_Require2_A_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require3_A))]
        public void L_Require3_A_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require3_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require4_A))]
        public void L_Require4_A()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require4_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require_F))]
        public void L_Require_F_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require2_F))]
        public void L_Require2_F_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require3_F))]
        public void L_Require3_F_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require3_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Require4_F))]
        public void L_Require4_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require4_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_RequireAll_A))]
        public void L_RequireAll_A_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_RequireAll_A))]
        public void L_RequireAll_A_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_RequireAll_A))]
        public void L_RequireAll_A_Func_6()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_RequireAll_F))]
        public void L_RequireAll_F_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_RequireAll_F))]
        public void L_RequireAll_F_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_RequireAll_F))]
        public void L_RequireAll_F_Func_6()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield_A))]
        public void L_Yield_A_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield2_A))]
        public void L_Yield2_A_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield3_A))]
        public void L_Yield3_A_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield3_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield4_A))]
        public void L_Yield4_A()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield4_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield_F))]
        public void L_Yield_F_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield2_F))]
        public void L_Yield2_F_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield3_F))]
        public void L_Yield3_F_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield3_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Yield4_F))]
        public void L_Yield4_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield4_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Execute_A))]
        public void L_Execute_A_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Execute_F))]
        public void L_Execute_F_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Do))]
        public void L_Do()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Do
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Cache))]
        public void L_Cache()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cache
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Cache))]
        public void Cache_Object_Func_1_T()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Cache
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.Cache))]
        public void Cache_T_Func_1_T()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.Cache
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.DataCaches))]
        public void get_DataCaches()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.get_DataCaches
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.GetCacheData))]
        public void GetCacheData()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.GetCacheData
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.ClearCache))]
        public void ClearCache()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.ClearCache
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_SetFunc_A))]
        public void L_SetFunc_A()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_SetFunc_F))]
        public void L_SetFunc_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_SetFunc_A2))]
        public void L_SetFunc_A2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_A2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_SetFunc_F2))]
        public void L_SetFunc_F2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_F2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_SetFunc_A3))]
        public void L_SetFunc_A3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_A3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_SetFunc_F3))]
        public void L_SetFunc_F3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_F3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_SetFunc_A4))]
        public void L_SetFunc_A4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_A4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_SetFunc_F4))]
        public void L_SetFunc_F4()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_F4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Set_A))]
        public void L_Set_A()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Set_F))]
        public void L_Set_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Set2_A))]
        public void L_Set2_A()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set2_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Set2_F))]
        public void L_Set2_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set2_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Set3_A))]
        public void L_Set3_A()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set3_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Set3_F))]
        public void L_Set3_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set3_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Set4_A))]
        public void L_Set4_A()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set4_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Set4_F))]
        public void L_Set4_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set4_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Return_A))]
        public void L_Return_A_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Return_F))]
        public void L_Return_F_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Rotate_A))]
        public void L_Rotate_A_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Rotate_F))]
        public void L_Rotate_F_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_RotateBack_A))]
        public void L_RotateBack_A_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_RotateBack_F))]
        public void L_RotateBack_F_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default_A))]
        public void L_Default_A_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default2_A))]
        public void L_Default2_A_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default3_A))]
        public void L_Default3_A_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default3_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default4_A))]
        public void L_Default4_A()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default4_A
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default_F))]
        public void L_Default_F_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default2_F))]
        public void L_Default2_F_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default3_F))]
        public void L_Default3_F_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default3_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.L_Default4_F))]
        public void L_Default4_F()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default4_F
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Logic) + "." + nameof(L.Logic.DataCaches))]
        public void DataCaches()
            {
            // TODO: Implement method test LCore.Extensions.L.Logic.DataCaches
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class L_AryTester : XUnitOutputTester
        {
        public L_AryTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~L_AryTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ary) + "." + nameof(L.Ary.Array))]
        public void Array_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.L.Ary.Array
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Ary) + "." + nameof(L.Ary.Array))]
        public void Array_T_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.L.Ary.Array
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L))]
    public partial class L_ListTester : XUnitOutputTester
        {
        public L_ListTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~L_ListTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.List) + "." + nameof(L.List.NewList))]
        public void NewList()
            {
            // TODO: Implement method test LCore.Extensions.L.List.NewList
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.List) + "." + nameof(L.List.ToList))]
        public void ToList_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.L.List.ToList
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.List) + "." + nameof(L.List.ToList))]
        public void ToList_T_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.L.List.ToList
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt))]
    public partial class ReflectionExtTester : XUnitOutputTester
        {
        public ReflectionExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~ReflectionExtTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.AlsoBaseTypes))]
        public void AlsoBaseTypes()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.AlsoBaseTypes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.BaseTypes))]
        public void BaseTypes()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.BaseTypes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.CanBeNull))]
        public void CanBeNull()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.CanBeNull
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.FindMethod))]
        public void FindMethod_Type_String_Type_MethodInfo()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.FindMethod
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.FindMethod))]
        public void FindMethod_Type_String_MethodInfo()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.FindMethod
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.FullyQualifiedName))]
        public void FullyQualifiedName_MemberInfo_String()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.FullyQualifiedName
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.FullyQualifiedName))]
        public void FullyQualifiedName_ParameterInfo_String()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.FullyQualifiedName
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetAssembly))]
        public void GetAssembly()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetAssembly
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetAttribute))]
        public void GetAttribute_ICustomAttributeProvider_T()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetAttribute))]
        public void GetAttribute_ICustomAttributeProvider_Boolean_T()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetAttributes))]
        public void GetAttributes()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetAttributes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetAttributeTypeName))]
        public void GetAttributeTypeName()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetAttributeTypeName
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetClassHierarchy))]
        public void GetClassHierarchy()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetClassHierarchy
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetComparer))]
        public void GetComparer_MemberInfo_IComparer()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetComparer
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetComparer))]
        public void GetComparer_MemberInfo_IComparer_1()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetComparer
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetExtensionMethods))]
        public void GetExtensionMethods()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetExtensionMethods
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetMemberType))]
        public void GetMemberType()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetMemberType
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetNamespace))]
        public void GetNamespace()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetNamespace
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetNestedNames))]
        public void GetNestedNames()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetNestedNames
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetSubClass))]
        public void GetSubClass()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetSubClass
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetSubClasses))]
        public void GetSubClasses()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetSubClasses
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetFriendlyTypeName))]
        public void GetFriendlyTypeName()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetFriendlyTypeName
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetValue))]
        public void GetValue()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetValues))]
        public void GetValues_Type_Object_Boolean_List_1()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetValues
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetValues))]
        public void GetValues_IEnumerable_1_Object_Boolean_List_1()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetValues
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetTypes))]
        public void GetTypes_IEnumerable_1_List_1()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetTypes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.GetTypes))]
        public void GetTypes_T_Type()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetTypes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.HasAttribute))]
        public void HasAttribute_ICustomAttributeProvider_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.HasAttribute))]
        public void HasAttribute_ICustomAttributeProvider_Boolean_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.HasAttribute))]
        public void HasAttribute_ICustomAttributeProvider_Type_Boolean_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.HasInterface))]
        public void HasInterface_Type_Type_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasInterface
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.HasInterface))]
        public void HasInterface_Type_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasInterface
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.HasIndexGetter))]
        public void HasIndexGetter_Type_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasIndexGetter
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.HasIndexSetter))]
        public void HasIndexSetter_Type_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasIndexSetter
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.HasSetter))]
        public void HasSetter()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasSetter
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.IndexGetter))]
        public void IndexGetter_Type_PropertyInfo()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IndexGetter
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.IndexSetter))]
        public void IndexSetter_Type_PropertyInfo()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IndexSetter
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.InstantiateValues))]
        public void InstantiateValues_Type_Object_Boolean_List_1()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.InstantiateValues
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.InstantiateValues))]
        public void InstantiateValues_IEnumerable_1_Object_List_1()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.InstantiateValues
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.IsExtensionMethod))]
        public void IsExtensionMethod()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsExtensionMethod
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.IsNullable))]
        public void IsNullable()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsNullable
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.IsOperator))]
        public void IsOperator()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsOperator
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.IsType))]
        public void IsType_Object_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsType
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.IsType))]
        public void IsType_Object_Type_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsType
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.IsType))]
        public void IsType_Type_Type_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsType
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.IsType))]
        public void IsType_Type_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsType
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.IsStatic))]
        public void IsStatic()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsStatic
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.MembersOfType))]
        public void MembersOfType()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.MembersOfType
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.MemberType))]
        public void MemberType()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.MemberType
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.New))]
        public void New_Type_Object_T()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.New))]
        public void New_Type_Object_Type_Object()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.New
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.NewRandom))]
        public void NewRandom()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.NewRandom
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.SetValue))]
        public void SetValue()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.SetValue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.ToInvocationSignature))]
        public void ToInvocationSignature()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.ToInvocationSignature
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.TypeEquals))]
        public void TypeEquals()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.TypeEquals
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.WithAttribute))]
        public void WithAttribute_IEnumerable_1_Boolean_List_1()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.WithAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.WithAttribute))]
        public void WithAttribute_IEnumerable_1_Type_Boolean_List_1()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.WithAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.WithoutAttribute))]
        public void WithoutAttribute_IEnumerable_1_Boolean_List_1()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.WithoutAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ReflectionExt) + "." + nameof(ReflectionExt.WithoutAttribute))]
        public void WithoutAttribute_IEnumerable_1_Type_Boolean_List_1()
            {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.WithoutAttribute
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt))]
    public partial class NumberExtTester : XUnitOutputTester
        {
        public NumberExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~NumberExtTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.AddEach))]
        public void AddEach()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.AddEach
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Abs))]
        public void Abs_Int32_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Abs
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Abs))]
        public void Abs_UInt32_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Abs
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Abs))]
        public void Abs_Int64_UInt64()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Abs
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Abs))]
        public void Abs_UInt64_UInt64()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Abs
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Abs))]
        public void Abs_Int16_UInt16()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Abs
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Abs))]
        public void Abs_UInt16_UInt16()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Abs
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Abs))]
        public void Abs_Double_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Abs
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Abs))]
        public void Abs_Single_Single()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Abs
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Abs))]
        public void Abs_SByte_Byte()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Abs
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Abs))]
        public void Abs_Byte_Byte()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Abs
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Abs))]
        public void Abs_Decimal_Decimal()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Abs
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.AsPercent))]
        public void AsPercent_Single_Int32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.AsPercent
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.AsPercent))]
        public void AsPercent_Double_Int32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.AsPercent
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Average))]
        public void Average_IEnumerable_1_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Average
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.ConvertToBestMatch))]
        public void ConvertToBestMatch()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.ConvertToBestMatch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces))]
        public void DecimalPlaces_Int32_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces))]
        public void DecimalPlaces_Int16_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces))]
        public void DecimalPlaces_Int64_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces))]
        public void DecimalPlaces_UInt32_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces))]
        public void DecimalPlaces_UInt16_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces))]
        public void DecimalPlaces_UInt64_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces))]
        public void DecimalPlaces_Char_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces))]
        public void DecimalPlaces_Byte_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces))]
        public void DecimalPlaces_SByte_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces))]
        public void DecimalPlaces_Decimal_UInt16()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces))]
        public void DecimalPlaces_Double_UInt16()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.DecimalPlaces))]
        public void DecimalPlaces_Single_UInt16()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Floor))]
        public void Floor_Single_Int32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Floor
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Floor))]
        public void Floor_Single_Int32_Single()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Floor
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Floor))]
        public void Floor_Double_Int64()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Floor
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Floor))]
        public void Floor_Double_Int32_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Floor
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.IsEven))]
        public void IsEven_Int32_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.IsEven
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.IsEven))]
        public void IsEven_Int64_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.IsEven
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.IsEven))]
        public void IsEven_Int16_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.IsEven
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.IsEven))]
        public void IsEven_UInt32_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.IsEven
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.IsEven))]
        public void IsEven_UInt64_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.IsEven
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.IsEven))]
        public void IsEven_Byte_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.IsEven
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.IsEven))]
        public void IsEven_SByte_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.IsEven
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.PercentageOf))]
        public void PercentageOf_Single_Single_Int32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.PercentageOf
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.PercentageOf))]
        public void PercentageOf_Double_Double_Int32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.PercentageOf
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.PercentageOf))]
        public void PercentageOf_Int32_Int32_Int32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.PercentageOf
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.PercentageOf))]
        public void PercentageOf_UInt32_UInt32_Int32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.PercentageOf
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.PercentageOf))]
        public void PercentageOf_Int16_Int16_Int32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.PercentageOf
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.PercentageOf))]
        public void PercentageOf_Int64_Int64_Int32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.PercentageOf
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Pow))]
        public void Pow_Double_Double_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Pow
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Pow))]
        public void Pow_Int32_Double_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Pow
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Pow))]
        public void Pow_UInt32_Double_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Pow
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Pow))]
        public void Pow_Int16_Double_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Pow
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Pow))]
        public void Pow_UInt16_Double_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Pow
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Pow))]
        public void Pow_Int64_Double_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Pow
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Pow))]
        public void Pow_UInt64_Double_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Pow
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Pow))]
        public void Pow_SByte_Double_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Pow
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Pow))]
        public void Pow_Byte_Double_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Pow
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Round))]
        public void Round_Single_Int32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Round
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Round))]
        public void Round_Single_Int32_Single()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Round
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Round))]
        public void Round_Double_Int64()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Round
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Round))]
        public void Round_Double_Int32_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Round
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Round))]
        public void Round_Decimal_Int64()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Round
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Round))]
        public void Round_Decimal_Int32_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Round
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sqrt))]
        public void Sqrt_Int32_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Sqrt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sqrt))]
        public void Sqrt_Int64_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Sqrt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sqrt))]
        public void Sqrt_Int16_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Sqrt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sqrt))]
        public void Sqrt_Double_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Sqrt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sqrt))]
        public void Sqrt_Single_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Sqrt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sqrt))]
        public void Sqrt_UInt32_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Sqrt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sqrt))]
        public void Sqrt_UInt64_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Sqrt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sqrt))]
        public void Sqrt_UInt16_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Sqrt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sqrt))]
        public void Sqrt_Byte_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Sqrt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sqrt))]
        public void Sqrt_SByte_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Sqrt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sqrt))]
        public void Sqrt_Decimal_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Sqrt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.SubtractEach))]
        public void SubtractEach()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.SubtractEach
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sum))]
        public void Sum_IEnumerable_1_Int32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Sum
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sum))]
        public void Sum_IEnumerable_1_Int64()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Sum
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sum))]
        public void Sum_IEnumerable_1_Single()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Sum
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Sum))]
        public void Sum_IEnumerable_1_Double()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Sum
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.To))]
        public void To_Int32_Int32_Int32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.To
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.To))]
        public void To_UInt32_UInt32_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.To
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Wrap))]
        public void Wrap_Nullable_1_Number()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Wrap
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Wrap))]
        public void Wrap_T_Number()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Wrap
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(NumberExt) + "." + nameof(NumberExt.Wrap))]
        public void Wrap_String_Number()
            {
            // TODO: Implement method test LCore.Extensions.NumberExt.Wrap
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(CommentExt))]
    public partial class CommentExtTester : XUnitOutputTester
        {
        public CommentExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~CommentExtTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(CommentExt) + "." + nameof(CommentExt.GetComments))]
        public void GetComments()
            {
            // TODO: Implement method test LCore.Extensions.CommentExt.GetComments
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumExt))]
    public partial class EnumExtTester : XUnitOutputTester
        {
        public EnumExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~EnumExtTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumExt) + "." + nameof(EnumExt.ParseEnum))]
        public void ParseEnum_String_Nullable_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumExt.ParseEnum
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumExt) + "." + nameof(EnumExt.ParseEnum))]
        public void ParseEnum_String_Type_Enum()
            {
            // TODO: Implement method test LCore.Extensions.EnumExt.ParseEnum
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumExt) + "." + nameof(EnumExt.ParseEnum))]
        public void ParseEnum_Enum_Nullable_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumExt.ParseEnum
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumExt) + "." + nameof(EnumExt.ParseEnum_FriendlyName))]
        public void ParseEnum_FriendlyName()
            {
            // TODO: Implement method test LCore.Extensions.EnumExt.ParseEnum_FriendlyName
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumExt) + "." + nameof(EnumExt.GetFriendlyName))]
        public void GetFriendlyName()
            {
            // TODO: Implement method test LCore.Extensions.EnumExt.GetFriendlyName
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LoopExt))]
    public partial class LoopExtTester : XUnitOutputTester
        {
        public LoopExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~LoopExtTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LoopExt) + "." + nameof(LoopExt.To))]
        public void To_Int32_Int32_Func_1_List_1()
            {
            // TODO: Implement method test LCore.Extensions.LoopExt.To
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LoopExt) + "." + nameof(LoopExt.To))]
        public void To_Int32_Int32_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.LoopExt.To
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt))]
    public partial class ExceptionExtTester : XUnitOutputTester
        {
        public ExceptionExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~ExceptionExtTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Fail))]
        public void Fail_Action_3_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Fail))]
        public void Fail_Action_4_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Fail))]
        public void Fail_Func_1_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Fail))]
        public void Fail_Func_2_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Fail))]
        public void Fail_Func_3_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Fail))]
        public void Fail_Func_4_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Fail))]
        public void Fail_Func_5_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Throw))]
        public void Throw_Action_String_Action()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Throw))]
        public void Throw_Action_1_String_Action_1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Throw))]
        public void Throw_Action_2_String_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Throw))]
        public void Throw_Action_3_String_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Throw))]
        public void Throw_Action_4_String_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Throw))]
        public void Throw_Func_1_String_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Throw))]
        public void Throw_Func_2_String_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Throw))]
        public void Throw_Func_3_String_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Throw))]
        public void Throw_Func_4_String_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Throw))]
        public void Throw_Func_5_String_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report))]
        public void Report_Action_String_E_Action()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report))]
        public void Report_Action_1_String_E_Action_1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report))]
        public void Report_Action_2_String_E_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report))]
        public void Report_Action_3_String_E_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report))]
        public void Report_Action_4_String_E_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report))]
        public void Report_Func_1_String_E_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report))]
        public void Report_Func_2_String_E_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report))]
        public void Report_Func_3_String_E_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report))]
        public void Report_Func_4_String_E_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report))]
        public void Report_Func_5_String_E_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report))]
        public void Report_Action_E_Action()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report))]
        public void Report_Action_1_E_Action_1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report))]
        public void Report_Action_2_E_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report))]
        public void Report_Action_3_E_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report))]
        public void Report_Action_4_E_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report))]
        public void Report_Func_1_E_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report))]
        public void Report_Func_2_E_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report))]
        public void Report_Func_3_E_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report))]
        public void Report_Func_4_E_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Report))]
        public void Report_Func_5_E_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Handle))]
        public void Handle_Action_Action()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Handle))]
        public void Handle_Action_1_Action_1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Handle))]
        public void Handle_Action_2_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Handle))]
        public void Handle_Action_3_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Handle))]
        public void Handle_Action_4_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Handle))]
        public void Handle_Func_1_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Handle))]
        public void Handle_Func_2_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Handle))]
        public void Handle_Func_3_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Handle))]
        public void Handle_Func_4_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Handle))]
        public void Handle_Func_5_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Try))]
        public void Try_Action_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Try))]
        public void Try_Action_1_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Try))]
        public void Try_Action_2_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Try))]
        public void Try_Action_3_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Try))]
        public void Try_Action_4_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Try))]
        public void Try_Func_1_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Try))]
        public void Try_Func_2_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Try))]
        public void Try_Func_3_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Try))]
        public void Try_Func_4_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Try))]
        public void Try_Func_5_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Action_Action_1_Action()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Action_1_Action_1_Action_1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Action_2_Action_1_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Action_3_Action_1_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Action_4_Action_1_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Func_1_Action_1_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Func_2_Action_1_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Func_3_Action_1_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Func_4_Action_1_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Func_5_Action_1_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Func_1_Func_2_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Func_2_Func_2_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Func_3_Func_2_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Func_4_Func_2_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Func_5_Func_2_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Action_Action()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Action_1_Action_1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Action_2_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Action_3_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Action_4_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Func_1_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Func_2_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Func_3_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Func_4_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Catch))]
        public void Catch_Func_5_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Retry))]
        public void Retry_Action_Int32_Action()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Retry))]
        public void Retry_Action_1_Int32_Action_1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Retry))]
        public void Retry_Action_2_Int32_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Retry))]
        public void Retry_Action_3_Int32_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Retry))]
        public void Retry_Action_4_Int32_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Retry))]
        public void Retry_Func_1_Int32_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Retry))]
        public void Retry_Func_2_Int32_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Retry))]
        public void Retry_Func_3_Int32_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Retry))]
        public void Retry_Func_4_Int32_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Retry))]
        public void Retry_Func_5_Int32_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Debug))]
        public void Debug_Action_1_Action_1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Debug))]
        public void Debug_Action_2_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Debug))]
        public void Debug_Action_3_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Debug))]
        public void Debug_Action_4_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Debug))]
        public void Debug_Func_2_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Debug))]
        public void Debug_Func_3_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Debug))]
        public void Debug_Func_4_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Debug))]
        public void Debug_Func_5_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Fail))]
        public void Fail_Action_Action()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Fail))]
        public void Fail_Action_1_Action_1()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ExceptionExt) + "." + nameof(ExceptionExt.Fail))]
        public void Fail_Action_2_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ConvertibleExt))]
    public partial class ConvertibleExtTester : XUnitOutputTester
        {
        public ConvertibleExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~ConvertibleExtTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ConvertibleExt) + "." + nameof(ConvertibleExt.CanConvertTo))]
        public void CanConvertTo_IConvertible_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ConvertibleExt.CanConvertTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ConvertibleExt) + "." + nameof(ConvertibleExt.CanConvertTo))]
        public void CanConvertTo_IConvertible_Type_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.ConvertibleExt.CanConvertTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ConvertibleExt) + "." + nameof(ConvertibleExt.CanConvertToString))]
        public void CanConvertToString()
            {
            // TODO: Implement method test LCore.Extensions.ConvertibleExt.CanConvertToString
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ConvertibleExt) + "." + nameof(ConvertibleExt.ConvertTo))]
        public void ConvertTo_IConvertible_Type_Object()
            {
            // TODO: Implement method test LCore.Extensions.ConvertibleExt.ConvertTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ConvertibleExt) + "." + nameof(ConvertibleExt.ConvertTo))]
        public void ConvertTo_IConvertible_Nullable_1()
            {
            // TODO: Implement method test LCore.Extensions.ConvertibleExt.ConvertTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ConvertibleExt) + "." + nameof(ConvertibleExt.ConvertToString))]
        public void ConvertToString()
            {
            // TODO: Implement method test LCore.Extensions.ConvertibleExt.ConvertToString
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ConvertibleExt) + "." + nameof(ConvertibleExt.TryConvertTo))]
        public void TryConvertTo()
            {
            // TODO: Implement method test LCore.Extensions.ConvertibleExt.TryConvertTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(ConvertibleExt) + "." + nameof(ConvertibleExt.TryConvertToString))]
        public void TryConvertToString()
            {
            // TODO: Implement method test LCore.Extensions.ConvertibleExt.TryConvertToString
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.ObjectExt))]
    public partial class ObjectExtTester : XUnitOutputTester
        {
        public ObjectExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~ObjectExtTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.ObjectExt) + "." + nameof(global::LCore.Extensions.ObjectExt.HasProperty))]
        public void HasProperty()
            {
            // TODO: Implement method test LCore.Extensions.ObjectExt.HasProperty
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.ObjectExt) + "." + nameof(global::LCore.Extensions.ObjectExt.Objects_ToString))]
        public void Objects_ToString()
            {
            // TODO: Implement method test LCore.Extensions.ObjectExt.Objects_ToString
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.ObjectExt) + "." + nameof(global::LCore.Extensions.ObjectExt.GetProperty))]
        public void GetProperty()
            {
            // TODO: Implement method test LCore.Extensions.ObjectExt.GetProperty
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.ObjectExt) + "." + nameof(global::LCore.Extensions.ObjectExt.SetProperty))]
        public void SetProperty()
            {
            // TODO: Implement method test LCore.Extensions.ObjectExt.SetProperty
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.ObjectExt) + "." + nameof(global::LCore.Extensions.ObjectExt.Type))]
        public void Type()
            {
            // TODO: Implement method test LCore.Extensions.ObjectExt.Type
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt))]
    public partial class DictionaryExtTester : XUnitOutputTester
        {
        public DictionaryExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~DictionaryExtTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.Flip))]
        public void Flip()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flip
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.Merge))]
        public void Merge()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Merge
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.AddRange))]
        public void AddRange()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.AddRange
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.GetAllValues))]
        public void GetAllValues()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.GetAllValues
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.SafeAdd))]
        public void SafeAdd()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.SafeAdd
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.SafeSet))]
        public void SafeSet()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.SafeSet
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.SafeGet))]
        public void SafeGet()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.SafeGet
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.SafeRemove))]
        public void SafeRemove()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.SafeRemove
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.ToDictionary))]
        public void ToDictionary_IEnumerable_1_Dictionary_2()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DateExt))]
    public partial class DateExtTester : XUnitOutputTester
        {
        public DateExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~DateExtTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DateExt) + "." + nameof(DateExt.Average))]
        public void Average()
            {
            // TODO: Implement method test LCore.Extensions.DateExt.Average
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DateExt) + "." + nameof(DateExt.DayOfWeekNumber))]
        public void DayOfWeekNumber()
            {
            // TODO: Implement method test LCore.Extensions.DateExt.DayOfWeekNumber
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DateExt) + "." + nameof(DateExt.CleanDateString))]
        public void CleanDateString()
            {
            // TODO: Implement method test LCore.Extensions.DateExt.CleanDateString
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DateExt) + "." + nameof(DateExt.ToSpecification))]
        public void ToSpecification()
            {
            // TODO: Implement method test LCore.Extensions.DateExt.ToSpecification
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DateExt) + "." + nameof(DateExt.GetMonthName))]
        public void GetMonthName()
            {
            // TODO: Implement method test LCore.Extensions.DateExt.GetMonthName
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DateExt) + "." + nameof(DateExt.ToTimeString))]
        public void ToTimeString()
            {
            // TODO: Implement method test LCore.Extensions.DateExt.ToTimeString
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DateExt) + "." + nameof(DateExt.TimeDifference))]
        public void TimeDifference()
            {
            // TODO: Implement method test LCore.Extensions.DateExt.TimeDifference
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DateExt) + "." + nameof(DateExt.IsPast))]
        public void IsPast()
            {
            // TODO: Implement method test LCore.Extensions.DateExt.IsPast
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DateExt) + "." + nameof(DateExt.IsFuture))]
        public void IsFuture()
            {
            // TODO: Implement method test LCore.Extensions.DateExt.IsFuture
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(FileExt))]
    public partial class FileExtTester : XUnitOutputTester
        {
        public FileExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~FileExtTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(FileExt) + "." + nameof(FileExt.CleanFileName))]
        public void CleanFileName()
            {
            // TODO: Implement method test LCore.Extensions.FileExt.CleanFileName
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(FileExt) + "." + nameof(FileExt.EnsurePathExists))]
        public void EnsurePathExists()
            {
            // TODO: Implement method test LCore.Extensions.FileExt.EnsurePathExists
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(FileExt) + "." + nameof(FileExt.EveryOtherByte))]
        public void EveryOtherByte()
            {
            // TODO: Implement method test LCore.Extensions.FileExt.EveryOtherByte
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(FileExt) + "." + nameof(FileExt.GetFileStream))]
        public void GetFileStream()
            {
            // TODO: Implement method test LCore.Extensions.FileExt.GetFileStream
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(FileExt) + "." + nameof(FileExt.GetFileHash))]
        public void GetFileHash()
            {
            // TODO: Implement method test LCore.Extensions.FileExt.GetFileHash
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(FileExt) + "." + nameof(FileExt.GetMemoryStream))]
        public void GetMemoryStream()
            {
            // TODO: Implement method test LCore.Extensions.FileExt.GetMemoryStream
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(FileExt) + "." + nameof(FileExt.GetStreamHash))]
        public void GetStreamHash()
            {
            // TODO: Implement method test LCore.Extensions.FileExt.GetStreamHash
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(FileExt) + "." + nameof(FileExt.GetStringHash))]
        public void GetStringHash()
            {
            // TODO: Implement method test LCore.Extensions.FileExt.GetStringHash
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(FileExt) + "." + nameof(FileExt.ReadAllBytes))]
        public void ReadAllBytes()
            {
            // TODO: Implement method test LCore.Extensions.FileExt.ReadAllBytes
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt))]
    public partial class StringExtTester : XUnitOutputTester
        {
        public StringExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~StringExtTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Add))]
        public void Add_String_Char_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Add))]
        public void Add_String_IEnumerable_1_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.After))]
        public void After()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.After
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.AfterLast))]
        public void AfterLast()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.AfterLast
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.AlignCenter))]
        public void AlignCenter_String_Int32_Char_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.AlignCenter
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.AlignCenter))]
        public void AlignCenter_String_UInt32_Char_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.AlignCenter
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.AlignLeft))]
        public void AlignLeft_String_Int32_Char_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.AlignLeft
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.AlignLeft))]
        public void AlignLeft_String_UInt32_Char_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.AlignLeft
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.AlignRight))]
        public void AlignRight_String_Int32_Char_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.AlignRight
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.AlignRight))]
        public void AlignRight_String_UInt32_Char_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.AlignRight
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Before))]
        public void Before()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Before
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.BeforeLast))]
        public void BeforeLast()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.BeforeLast
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.ByteArrayToString))]
        public void ByteArrayToString()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.ByteArrayToString
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.CleanCrlf))]
        public void CleanCrlf()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.CleanCrlf
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.UnCleanCrlf))]
        public void UnCleanCrlf()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.UnCleanCrlf
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Combine))]
        public void Combine()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Combine
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Concatenate))]
        public void Concatenate()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Concatenate
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.ContainsAny))]
        public void ContainsAny()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.ContainsAny
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Count))]
        public void Count()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Count
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Fill))]
        public void Fill_Char_Int32_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Fill
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Fill))]
        public void Fill_Char_UInt32_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Fill
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.FirstCaps))]
        public void FirstCaps()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.FirstCaps
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.FormatFileSize))]
        public void FormatFileSize_Int64_Int32_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.FormatFileSize
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.FormatFileSize))]
        public void FormatFileSize_Int32_Int32_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.FormatFileSize
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.HasMatch))]
        public void HasMatch()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.HasMatch
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Humanize))]
        public void Humanize()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Humanize
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.IsEmpty))]
        public void IsEmpty()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.IsEmpty
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.IsNumber))]
        public void IsNumber()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.IsNumber
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.IsSymmetrical))]
        public void IsSymmetrical()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.IsSymmetrical
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.JoinLines))]
        public void JoinLines()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.JoinLines
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Like))]
        public void Like()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Like
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Lines))]
        public void Lines()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Lines
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Matches))]
        public void Matches()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Matches
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Pad))]
        public void Pad_String_Int32_Align_Char_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Pad
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Pad))]
        public void Pad_String_UInt32_Align_Char_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Pad
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Pluralize))]
        public void Pluralize_String_Int32_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Pluralize
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Pluralize))]
        public void Pluralize_String_UInt32_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Pluralize
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Pluralize))]
        public void Pluralize_String_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Pluralize
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.RemoveAll))]
        public void RemoveAll()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.RemoveAll
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.ReplaceAll))]
        public void ReplaceAll_String_String_String_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.ReplaceAll
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.ReplaceAll))]
        public void ReplaceAll_String_IDictionary_2_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.ReplaceAll
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.ReplaceLineEndings))]
        public void ReplaceLineEndings()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.ReplaceLineEndings
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Reverse))]
        public void Reverse()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Reverse
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Singularize))]
        public void Singularize()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Singularize
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Split))]
        public void Split()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Split
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.SplitWithQuotes))]
        public void SplitWithQuotes()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.SplitWithQuotes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Sub))]
        public void Sub_String_Int32_Nullable_1_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Sub
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Sub))]
        public void Sub_String_UInt32_Nullable_1_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Sub
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Surround))]
        public void Surround()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Symmetry))]
        public void Symmetry()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Symmetry
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Times))]
        public void Times_String_Int32_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Times
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Times))]
        public void Times_String_UInt32_String()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Times
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.ToByteArray))]
        public void ToByteArray()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.ToByteArray
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.ToHexString))]
        public void ToHexString()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.ToHexString
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.ToStream))]
        public void ToStream()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.ToStream
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.ToUrlSlug))]
        public void ToUrlSlug()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.ToUrlSlug
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Trim))]
        public void Trim()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Trim
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.TrimEnd))]
        public void TrimEnd()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.TrimEnd
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.TrimStart))]
        public void TrimStart()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.TrimStart
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.Words))]
        public void Words()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.Words
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(StringExt) + "." + nameof(StringExt.XmlClean))]
        public void XmlClean()
            {
            // TODO: Implement method test LCore.Extensions.StringExt.XmlClean
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt))]
    public partial class LogicExtTester : XUnitOutputTester
        {
        public LogicExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~LogicExtTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Cast))]
        public void Cast_Func_5_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Cast
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_5_Action_1_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_1_Action_2_Action_1()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2))]
        public void Enclose2_Func_1_Action_2_Action_1()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_2_Action_2_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2))]
        public void Enclose2_Func_2_Action_2_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_3_Action_2_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2))]
        public void Enclose2_Func_3_Action_2_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_4_Action_2_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2))]
        public void Enclose2_Func_4_Action_2_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_1_Action_3_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2))]
        public void Enclose2_Func_1_Action_3_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose3))]
        public void Enclose3_Func_1_Action_3_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_2_Action_3_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2))]
        public void Enclose2_Func_2_Action_3_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose3))]
        public void Enclose3_Func_2_Action_3_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_3_Action_3_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2))]
        public void Enclose2_Func_3_Action_3_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose3))]
        public void Enclose3_Func_3_Action_3_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_1_Action_4_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2))]
        public void Enclose2_Func_1_Action_4_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose3))]
        public void Enclose3_Func_1_Action_4_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose4))]
        public void Enclose4_Func_1_Action_4_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_2_Action_4_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2))]
        public void Enclose2_Func_2_Action_4_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose3))]
        public void Enclose3_Func_2_Action_4_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose4))]
        public void Enclose4_Func_2_Action_4_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_1_Func_2_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_2_Func_2_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_3_Func_2_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_4_Func_2_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_5_Func_2_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_1_Func_3_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2))]
        public void Enclose2_Func_1_Func_3_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_2_Func_3_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2))]
        public void Enclose2_Func_2_Func_3_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_3_Func_3_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2))]
        public void Enclose2_Func_3_Func_3_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_4_Func_3_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2))]
        public void Enclose2_Func_4_Func_3_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_1_Func_4_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2))]
        public void Enclose2_Func_1_Func_4_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose3))]
        public void Enclose3_Func_1_Func_4_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_2_Func_4_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2))]
        public void Enclose2_Func_2_Func_4_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose3))]
        public void Enclose3_Func_2_Func_4_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_3_Func_4_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2))]
        public void Enclose2_Func_3_Func_4_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose3))]
        public void Enclose3_Func_3_Func_4_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_1_Func_5_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2))]
        public void Enclose2_Func_1_Func_5_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose3))]
        public void Enclose3_Func_1_Func_5_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose4))]
        public void Enclose4_Func_1_Func_5_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_2_Func_5_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose2))]
        public void Enclose2_Func_2_Func_5_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose3))]
        public void Enclose3_Func_2_Func_5_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose4))]
        public void Enclose4_Func_2_Func_5_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Cast))]
        public void Cast_Action_1_Action_1()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Cast
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Cast))]
        public void Cast_Action_2_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Cast
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Cast))]
        public void Cast_Action_3_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Cast
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Cast))]
        public void Cast_Action_4_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Cast
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Cast))]
        public void Cast_Func_1_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Cast
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Cast))]
        public void Cast_Func_2_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Cast
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Cast))]
        public void Cast_Func_3_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Cast
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Cast))]
        public void Cast_Func_4_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Cast
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Action_1_Func_1_Action()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Action_1_Func_2_Action_1()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Action_1_Func_3_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Action_1_Func_4_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Action_1_Func_5_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Action_2_Func_1_Action_1()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2))]
        public void Surround2_Action_2_Func_1_Action_1()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Action_2_Func_2_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2))]
        public void Surround2_Action_2_Func_2_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Action_2_Func_3_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2))]
        public void Surround2_Action_2_Func_3_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Action_2_Func_4_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2))]
        public void Surround2_Action_2_Func_4_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Action_3_Func_1_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2))]
        public void Surround2_Action_3_Func_1_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround3))]
        public void Surround3_Action_3_Func_1_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Action_3_Func_2_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2))]
        public void Surround2_Action_3_Func_2_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround3))]
        public void Surround3_Action_3_Func_2_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Action_3_Func_3_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2))]
        public void Surround2_Action_3_Func_3_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround3))]
        public void Surround3_Action_3_Func_3_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Action_4_Func_1_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2))]
        public void Surround2_Action_4_Func_1_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround3))]
        public void Surround3_Action_4_Func_1_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround4))]
        public void Surround4_Action_4_Func_1_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Action_4_Func_2_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2))]
        public void Surround2_Action_4_Func_2_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround3))]
        public void Surround3_Action_4_Func_2_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround4))]
        public void Surround4_Action_4_Func_2_Action_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Func_2_Func_1_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Func_2_Func_2_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Func_2_Func_3_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Func_2_Func_4_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Func_2_Func_5_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Func_3_Func_1_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2))]
        public void Surround2_Func_3_Func_1_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Func_3_Func_2_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2))]
        public void Surround2_Func_3_Func_2_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Func_3_Func_3_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2))]
        public void Surround2_Func_3_Func_3_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Func_3_Func_4_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2))]
        public void Surround2_Func_3_Func_4_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Func_4_Func_1_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2))]
        public void Surround2_Func_4_Func_1_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround3))]
        public void Surround3_Func_4_Func_1_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Func_4_Func_2_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2))]
        public void Surround2_Func_4_Func_2_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround3))]
        public void Surround3_Func_4_Func_2_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Func_4_Func_3_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2))]
        public void Surround2_Func_4_Func_3_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround3))]
        public void Surround3_Func_4_Func_3_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Func_5_Func_1_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2))]
        public void Surround2_Func_5_Func_1_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround3))]
        public void Surround3_Func_5_Func_1_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround4))]
        public void Surround4_Func_5_Func_1_Func_4()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround))]
        public void Surround_Func_5_Func_2_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround2))]
        public void Surround2_Func_5_Func_2_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround3))]
        public void Surround3_Func_5_Func_2_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround3
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Surround4))]
        public void Surround4_Func_5_Func_2_Func_5()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Surround4
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_1_Action_1_Action()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_2_Action_1_Action_1()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_3_Action_1_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(LogicExt) + "." + nameof(LogicExt.Enclose))]
        public void Enclose_Func_4_Action_1_Action_3()
            {
            // TODO: Implement method test LCore.Extensions.LogicExt.Enclose
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt))]
    public partial class EnumerableExtTester : XUnitOutputTester
        {
        public EnumerableExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~EnumerableExtTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.RemoveDuplicates))]
        public void RemoveDuplicates_T_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveDuplicates
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.RemoveDuplicates))]
        public void RemoveDuplicates_IEnumerable_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveDuplicates
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Mirror))]
        public void Mirror_T_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Mirror
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Mirror))]
        public void Mirror_IEnumerable_1_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Mirror
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Mirror))]
        public void Mirror_IEnumerable_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Mirror
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Select))]
        public void Select_T_Func_2_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Select
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Select))]
        public void Select_IEnumerable_1_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Select
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Select))]
        public void Select_IEnumerable_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Select
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Select))]
        public void Select_IEnumerable_Func_3_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Select
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Select))]
        public void Select_T_Func_3_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Select
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Select))]
        public void Select_List_1_Func_3_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Select
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Select))]
        public void Select_IEnumerable_1_Func_3_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Select
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.SetAt))]
        public void SetAt_IEnumerable_Int32_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.SetAt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.SetAt))]
        public void SetAt_IEnumerable_UInt32_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.SetAt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.SetAt))]
        public void SetAt_IEnumerable_1_Int32_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.SetAt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.SetAt))]
        public void SetAt_IEnumerable_1_UInt32_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.SetAt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Shuffle))]
        public void Shuffle_IEnumerable_1_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Shuffle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Shuffle))]
        public void Shuffle_T_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Shuffle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Shuffle))]
        public void Shuffle_IEnumerable_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Shuffle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Sort))]
        public void Sort_IList()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Sort
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Sort))]
        public void Sort_IList_1_Func_3()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Sort
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Sort))]
        public void Sort_IList_1_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Sort
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Swap))]
        public void Swap_T_Int32_Int32()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Swap
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Swap))]
        public void Swap_IList_Int32_Int32()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Swap
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.TotalCount))]
        public void TotalCount()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.TotalCount
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.While))]
        public void While_IEnumerable_Func_2_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.While))]
        public void While_IEnumerable_Func_3_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.While))]
        public void While_IEnumerable_1_Func_2_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.While))]
        public void While_IEnumerable_1_Func_3_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.While))]
        public void While_Action_1_Func_1_IEnumerable_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.First))]
        public void First_IEnumerable_1_Int32_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.First))]
        public void First_IEnumerable_1_UInt32_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.First))]
        public void First_T_Int32_Func_2_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.First))]
        public void First_T_UInt32_Func_2_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.First))]
        public void First_IEnumerable_T_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Flatten))]
        public void Flatten()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Flatten
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.GetAt))]
        public void GetAt_IEnumerable_Int32_Object()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GetAt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.GetAt))]
        public void GetAt_IEnumerable_UInt32_Object()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GetAt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.GetAt))]
        public void GetAt_IEnumerable_1_Int32_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GetAt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.GetAt))]
        public void GetAt_IEnumerable_1_UInt32_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GetAt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.GetAtIndices))]
        public void GetAtIndices_T_Int32_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GetAtIndices
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.GetAtIndices))]
        public void GetAtIndices_IEnumerable_Int32_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GetAtIndices
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.GetAtIndices))]
        public void GetAtIndices_IEnumerable_1_Int32_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GetAtIndices
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Group))]
        public void Group_IEnumerable_1_Dictionary_2()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Group
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Group))]
        public void Group_IEnumerable_1_Func_2_Dictionary_2()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Group
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.GroupTwice))]
        public void GroupTwice()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GroupTwice
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Has))]
        public void Has_IEnumerable_T_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Has
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Has))]
        public void Has_IEnumerable_Int32_T_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Has
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Has))]
        public void Has_IEnumerable_UInt32_T_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Has
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.HasAny))]
        public void HasAny_IEnumerable_IEnumerable_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.HasAny
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.HasAny))]
        public void HasAny_IEnumerable_1_IEnumerable_1_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.HasAny
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.HasAny))]
        public void HasAny_IEnumerable_Object_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.HasAny
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.HasAny))]
        public void HasAny_IEnumerable_1_T_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.HasAny
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Has))]
        public void Has_IEnumerable_Func_2_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Has
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Has))]
        public void Has_IEnumerable_1_Func_2_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Has
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.HasIndex))]
        public void HasIndex_IEnumerable_Int32_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.HasIndex
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.HasIndex))]
        public void HasIndex_IEnumerable_UInt32_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.HasIndex
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Index))]
        public void Index_IEnumerable_Func_2_Dictionary_2()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Index
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Index))]
        public void Index_IEnumerable_1_Func_2_Dictionary_2()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Index
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.IndexTwice))]
        public void IndexTwice()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.IndexTwice
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.IndexOf))]
        public void IndexOf_IEnumerable_Func_2_Nullable_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.IndexOf
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.IndexOf))]
        public void IndexOf_IEnumerable_1_Func_2_Nullable_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.IndexOf
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.IsEmpty))]
        public void IsEmpty()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.IsEmpty
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Last))]
        public void Last_IEnumerable_Func_2_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Last))]
        public void Last_T_Func_2_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Last))]
        public void Last_IEnumerable_1_Func_2_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Last))]
        public void Last_IEnumerable_Int32_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Last))]
        public void Last_IEnumerable_UInt32_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Last))]
        public void Last_IEnumerable_1_Int32_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Last))]
        public void Last_IEnumerable_1_UInt32_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Last))]
        public void Last_T_Int32_Func_2_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Last))]
        public void Last_T_UInt32_Func_2_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Last))]
        public void Last_IEnumerable_T_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.List))]
        public void List_IEnumerable_Boolean_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.List
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.List))]
        public void List_IEnumerable_1_Boolean_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.List
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Move))]
        public void Move_T_Int32_Int32()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Move
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Move))]
        public void Move_IList_Int32_Int32()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Move
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Named))]
        public void Named_IEnumerable_String_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Named
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Named))]
        public void Named_T_String_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Named
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Named))]
        public void Named_IEnumerable_1_String_IEnumerable_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Named
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Named))]
        public void Named_IEnumerable_String_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Named
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Named))]
        public void Named_IEnumerable_1_String_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Named
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Named))]
        public void Named_T_String_Func_2_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Named
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Random))]
        public void Random_IEnumerable_1_Int32_Boolean_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Random
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Random))]
        public void Random_IEnumerable_1_UInt32_Boolean_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Random
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Random))]
        public void Random_T_Int32_Boolean_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Random
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Random))]
        public void Random_T_UInt32_Boolean_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Random
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Random))]
        public void Random_IEnumerable_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Random
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Remove))]
        public void Remove_IEnumerable_1_T_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Remove
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Remove))]
        public void Remove_IEnumerable_1_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Remove
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Remove))]
        public void Remove_IEnumerable_1_Func_3_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Remove
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.RemoveAt))]
        public void RemoveAt_IEnumerable_1_Int32_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveAt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.RemoveAt))]
        public void RemoveAt_T_Int32_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveAt
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.RemoveDuplicate))]
        public void RemoveDuplicate_IEnumerable_1_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveDuplicate
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.RemoveDuplicate))]
        public void RemoveDuplicate_T_Func_2_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveDuplicate
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.RemoveDuplicate))]
        public void RemoveDuplicate_IEnumerable_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveDuplicate
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.RemoveDuplicates))]
        public void RemoveDuplicates_IEnumerable_1_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveDuplicates
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Add))]
        public void Add_T_IEnumerable_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Add))]
        public void Add_T_T_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Add))]
        public void Add_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Add))]
        public void Add_List_1_IEnumerable_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Add
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.AddTo))]
        public void AddTo()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.AddTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.All))]
        public void All_IEnumerable_Func_2_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.All
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.All))]
        public void All_IEnumerable_1_Func_2_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.All
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.All))]
        public void All_IEnumerable_Func_3_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.All
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.All))]
        public void All_IEnumerable_1_Func_3_Boolean()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.All
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Append))]
        public void Append()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Append
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Array))]
        public void Array_IEnumerable_Object()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Array
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Array))]
        public void Array_IEnumerable_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Array
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Array))]
        public void Array_IEnumerable_1_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Array
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Array))]
        public void Array_IEnumerable_1_U()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Array
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Collect))]
        public void Collect_IEnumerable_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Collect
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Collect))]
        public void Collect_IEnumerable_1_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Collect
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Collect))]
        public void Collect_T_Func_2_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Collect
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Collect))]
        public void Collect_List_1_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Collect
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Collect))]
        public void Collect_IEnumerable_Func_3_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Collect
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Collect))]
        public void Collect_IEnumerable_1_Func_3_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Collect
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Collect))]
        public void Collect_T_Func_3_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Collect
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Collect))]
        public void Collect_List_1_Func_3_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Collect
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Collect))]
        public void Collect_Func_1_Int32_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Collect
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Collect))]
        public void Collect_Func_2_Int32_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Collect
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.CollectStr))]
        public void CollectStr_String_Func_2_String()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.CollectStr
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.CollectStr))]
        public void CollectStr_List_1_Func_3_String()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.CollectStr
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.CollectStr))]
        public void CollectStr_T_Func_3_String()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.CollectStr
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.CollectStr))]
        public void CollectStr_U_Func_3_String()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.CollectStr
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Combine))]
        public void Combine_IEnumerable_1_String()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Combine
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Combine))]
        public void Combine_IEnumerable_1_Char_String()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Combine
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Combine))]
        public void Combine_IEnumerable_1_String_String()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Combine
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Convert))]
        public void Convert_IEnumerable_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Convert))]
        public void Convert_T_Func_2_U()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Convert))]
        public void Convert_List_1_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Convert))]
        public void Convert_IEnumerable_1_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.ConvertAll))]
        public void ConvertAll_IEnumerable_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.ConvertAll
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.ConvertAll))]
        public void ConvertAll_IEnumerable_1_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.ConvertAll
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.ConvertAll))]
        public void ConvertAll_T_Func_2_U()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.ConvertAll
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.ConvertAll))]
        public void ConvertAll_List_1_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.ConvertAll
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Convert))]
        public void Convert_IEnumerable_Func_3_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Convert))]
        public void Convert_T_Func_3_U()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Convert))]
        public void Convert_List_1_Func_3_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Convert))]
        public void Convert_IEnumerable_1_Func_3_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Count))]
        public void Count_T_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Count
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Count))]
        public void Count_IEnumerable_1_T_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Count
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Count))]
        public void Count_IEnumerable_1_Func_2_UInt32()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Count
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Cycle))]
        public void Cycle_IEnumerable_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Cycle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Cycle))]
        public void Cycle_IEnumerable_1_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Cycle
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Each))]
        public void Each_IEnumerable_Action_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Each
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Each))]
        public void Each_IEnumerable_1_Action_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Each
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Each))]
        public void Each_IEnumerable_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Each
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Each))]
        public void Each_IEnumerable_1_Action_2()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Each
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Each))]
        public void Each_Action_1_IEnumerable_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Each
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Equivalent))]
        public void Equivalent()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Equivalent
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Fill))]
        public void Fill_T_T_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Fill
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Fill))]
        public void Fill_List_1_T_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Fill
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Fill))]
        public void Fill_T_Func_2_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Fill
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Filter))]
        public void Filter_IEnumerable_Boolean_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Filter
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Filter))]
        public void Filter_T_Boolean_U()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Filter
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.Filter))]
        public void Filter_List_1_Boolean_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Filter
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.First))]
        public void First_IEnumerable_Func_2_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.First))]
        public void First_T_Func_2_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.First))]
        public void First_IEnumerable_1_Func_2_T()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.First))]
        public void First_IEnumerable_Int32_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(EnumerableExt) + "." + nameof(EnumerableExt.First))]
        public void First_IEnumerable_UInt32_Func_2_List_1()
            {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Comment))]
    public partial class L_Comment_TestTester : XUnitOutputTester
        {
        public L_Comment_TestTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~L_Comment_TestTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Comment) + "." + nameof(L.Comment.Test) + "." + nameof(L.Comment.Test.TestMethod))]
        public void TestMethod()
            {
            // TODO: Implement method test LCore.Extensions.L.Comment.Test.TestMethod
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Comment) + "." + nameof(L.Comment.Test) + "." + nameof(L.Comment.Test.TestMethod2))]
        public void TestMethod2()
            {
            // TODO: Implement method test LCore.Extensions.L.Comment.Test.TestMethod2
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Comment) + "." + nameof(L.Comment.Test) + "." + nameof(L.Comment.Test.TestProperty))]
        public void get_TestProperty()
            {
            // TODO: Implement method test LCore.Extensions.L.Comment.Test.get_TestProperty
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Comment) + "." + nameof(L.Comment.Test) + "." + nameof(L.Comment.Test.TestProperty))]
        public void set_TestProperty()
            {
            // TODO: Implement method test LCore.Extensions.L.Comment.Test.set_TestProperty
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(L) + "." + nameof(L.Comment) + "." + nameof(L.Comment.Test) + "." + nameof(L.Comment.Test.TestProperty))]
        public void TestProperty()
            {
            // TODO: Implement method test LCore.Extensions.L.Comment.Test.TestProperty
            }

        }
    }

namespace L_Tests.LCore.Extensions.Optional
    {
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt))]
    public partial class ObjectExtTester : XUnitOutputTester
        {
        public ObjectExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        ~ObjectExtTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.CopyFieldsTo))]
        public void CopyFieldsTo_T_Object()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.CopyFieldsTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.CopyFieldsTo))]
        public void CopyFieldsTo_T_Object_Dictionary_2()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.CopyFieldsTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.CopyFieldsTo))]
        public void CopyFieldsTo_T_Object_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.CopyFieldsTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.Details))]
        public void Details()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.Details
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.FN_CreateArray))]
        public void FN_CreateArray_T_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_CreateArray
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.FN_CreateArray))]
        public void FN_CreateArray_T_Int32_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_CreateArray
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.FN_CreateList))]
        public void FN_CreateList_T_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_CreateList
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.FN_CreateList))]
        public void FN_CreateList_T_Int32_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_CreateList
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.FN_Func))]
        public void FN_Func()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_Func
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.FN_If))]
        public void FN_If()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_If
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.InitProperties))]
        public void InitProperties()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.InitProperties
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.IsNull))]
        public void IsNull()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.IsNull
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.SafeEquals))]
        public void SafeEquals()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.SafeEquals
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.SupplyTo))]
        public void SupplyTo_T_Action_1_Action()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.SupplyTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.SupplyTo))]
        public void SupplyTo_T_Func_2_Func_1()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.SupplyTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.ToS))]
        public void ToS()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.ToS
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.Traverse))]
        public void Traverse_Object_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.Traverse
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.Traverse))]
        public void Traverse_T_Func_2()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.Traverse
            }

        }
    }
