// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.Extensions;
namespace L_Tests.LCore.Extensions
{
    ///<summary>
    /// Covering class: LCore.Extensions.ComparableExt
    ///
    ///LUnit has Autogenerated 10 method stubs:
    ///</summary>
    public partial class ComparableExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ComparableExt)+ "." + nameof(ComparableExt.IsEqualTo) + "(IComparable, IComparable) => Boolean")]
        public void IsEqualTo()
        {
            // TODO: Implement method test LCore.Extensions.ComparableExt.IsEqualTo
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ComparableExt)+ "." + nameof(ComparableExt.IsNotEqualTo) + "(IComparable, IComparable) => Boolean")]
        public void IsNotEqualTo()
        {
            // TODO: Implement method test LCore.Extensions.ComparableExt.IsNotEqualTo
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ComparableExt)+ "." + nameof(ComparableExt.IsLessThan) + "(IComparable, IComparable) => Boolean")]
        public void IsLessThan()
        {
            // TODO: Implement method test LCore.Extensions.ComparableExt.IsLessThan
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ComparableExt)+ "." + nameof(ComparableExt.IsLessThanOrEqual) + "(IComparable, IComparable) => Boolean")]
        public void IsLessThanOrEqual()
        {
            // TODO: Implement method test LCore.Extensions.ComparableExt.IsLessThanOrEqual
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ComparableExt)+ "." + nameof(ComparableExt.IsGreaterThan) + "(IComparable, IComparable) => Boolean")]
        public void IsGreaterThan()
        {
            // TODO: Implement method test LCore.Extensions.ComparableExt.IsGreaterThan
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ComparableExt)+ "." + nameof(ComparableExt.IsGreaterThanOrEqual) + "(IComparable, IComparable) => Boolean")]
        public void IsGreaterThanOrEqual()
        {
            // TODO: Implement method test LCore.Extensions.ComparableExt.IsGreaterThanOrEqual
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ComparableExt)+ "." + nameof(ComparableExt.Max) + "(T, T[]) => T")]
        public void Max()
        {
            // TODO: Implement method test LCore.Extensions.ComparableExt.Max
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ComparableExt)+ "." + nameof(ComparableExt.Max) + "(IEnumerable<T>, Func<T, IComparable>) => T")]
        public void Max()
        {
            // TODO: Implement method test LCore.Extensions.ComparableExt.Max
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ComparableExt)+ "." + nameof(ComparableExt.Min) + "(T, T[]) => T")]
        public void Min()
        {
            // TODO: Implement method test LCore.Extensions.ComparableExt.Min
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ComparableExt)+ "." + nameof(ComparableExt.Min) + "(IEnumerable<T>, Func<T, IComparable>) => T")]
        public void Min()
        {
            // TODO: Implement method test LCore.Extensions.ComparableExt.Min
        }

    }
}
