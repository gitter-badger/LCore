/*
Covering Assembly: L

Cover application using naming conventions.

LUnit has Autogenerated 19 Classes and 612 Methods:
*/
using JetBrains.Annotations;
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.Extensions;
using LCore.Tools;

namespace L_Tests.LCore.Tools
{
    [Trait(Traits.TargetClass,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown))]
    public partial class GitHubMarkdownTester : XUnitOutputTester, IDisposable
    {
        public GitHubMarkdownTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.BlankLine) + "()")]
        public void BlankLine()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.BlankLine
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.HorizontalRule) + "()")]
        public void HorizontalRule()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.HorizontalRule
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Header) + "(String, Int32)")]
        public void Header()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Header
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.HeaderUnderline) + "(String, Int32)")]
        public void HeaderUnderline()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.HeaderUnderline
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.OrderedList) + "(String[])")]
        public void OrderedList_String()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.OrderedList
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.OrderedList) + "(Tuple`2[])")]
        public void OrderedList_Tuple_2()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.OrderedList
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.OrderedList) + "(Set`2[])")]
        public void OrderedList_Set_2()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.OrderedList
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.UnorderedList) + "(String[])")]
        public void UnorderedList_String()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.UnorderedList
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.UnorderedList) + "(Tuple`2[])")]
        public void UnorderedList_Tuple_2()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.UnorderedList
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.UnorderedList) + "(Set`2[])")]
        public void UnorderedList_Set_2()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.UnorderedList
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Strikethrough) + "(String)")]
        public void Strikethrough()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Strikethrough
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Highlight) + "(String)")]
        public void Highlight()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Highlight
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Link) + "(String, String, String)")]
        public void Link()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Link
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Image) + "(String, String)")]
        public void Image()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Image
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Code) + "(String[], String)")]
        public void Code()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Code
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Table) + "(String[,], Boolean)")]
        public void Table_String_Boolean()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Table
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Table) + "(IEnumerable`1<IEnumerable`1<String>>, Boolean)")]
        public void Table_IEnumerable_1_IEnumerable_1_String_Boolean()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Table
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.BlockQuote) + "(String[])")]
        public void BlockQuote()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.BlockQuote
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Lines) + "(String[])")]
        public void Lines()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Lines
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Line) + "(String)")]
        public void Line()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Line
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Glyph) + "(GlyphIcon) => String")]
        public void Glyph()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Glyph
         }
         
    }
}

namespace L_Tests.LCore.Extensions
{
    [Trait(Traits.TargetClass,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L))]
   public partial class L_RefTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Ref)+ "." + nameof(L.Ref.Constant) + "(String) => FieldInfo")]
        public void Constant()
         {
            // TODO: Implement method test LCore.Extensions.L.Ref.Constant
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Ref)+ "." + nameof(L.Ref.Event) + "(String) => EventInfo")]
        public void Event()
         {
            // TODO: Implement method test LCore.Extensions.L.Ref.Event
         }
         
    }
    [Trait(Traits.TargetClass,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L))]
    public partial class L_LoopTester : XUnitOutputTester, IDisposable
    {
        public L_LoopTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.While_T) + "() => Func`3<Action`1<T1>, Func`2<T1, Boolean>, Action`1<T1>>")]
        public void While_T_Func_3_Action_1_T1_Func_2_T1_Boolean_Action_1_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.While_T
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.While_T) + "() => Func`3<Action`2<T1, T2>, Func`3<T1, T2, Boolean>, Action`2<T1, T2>>")]
        public void While_T_Func_3_Action_2_T1_T2_Func_3_T1_T2_Boolean_Action_2_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.While_T
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.While_T) + "() => Func`3<Action`3<T1, T2, T3>, Func`4<T1, T2, T3, Boolean>, Action`3<T1, T2, T3>>")]
        public void While_T_Func_3_Action_3_T1_T2_T3_Func_4_T1_T2_T3_Boolean_Action_3_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.While_T
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.While_T) + "() => Func`3<Action`4<T1, T2, T3, T4>, Func`5<T1, T2, T3, T4, Boolean>, Action`4<T1, T2, T3, T4>>")]
        public void While_T_Func_3_Action_4_T1_T2_T3_T4_Func_5_T1_T2_T3_T4_Boolean_Action_4_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.While_T
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_DoWhile) + "() => Func`3<Action, Func`1<Boolean>, Action>")]
        public void L_DoWhile()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_DoWhile
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Until) + "() => Func`3<Func`1<U>, Func`1<Boolean>, Func`1<U>>")]
        public void L_Until()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Until
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_DoUntil) + "() => Func`3<Func`1<U>, Func`1<Boolean>, Func`1<U>>")]
        public void L_DoUntil()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_DoUntil
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Repeat_uint) + "() => Func`3<Action, UInt32, Action>")]
        public void L_Repeat_uint()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Repeat_uint
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Repeat_int) + "() => Func`3<Action, Int32, Action>")]
        public void L_Repeat_int()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Repeat_int
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.WhileI_T) + "() => Func`3<Action`2<Int32, T1>, Func`3<Int32, T1, Boolean>, Action`1<T1>>")]
        public void WhileI_T_Func_3_Action_2_Int32_T1_Func_3_Int32_T1_Boolean_Action_1_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.WhileI_T
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.WhileI_T) + "() => Func`3<Action`3<Int32, T1, T2>, Func`4<Int32, T1, T2, Boolean>, Action`2<T1, T2>>")]
        public void WhileI_T_Func_3_Action_3_Int32_T1_T2_Func_4_Int32_T1_T2_Boolean_Action_2_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.WhileI_T
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.WhileI_T) + "() => Func`3<Action`4<Int32, T1, T2, T3>, Func`5<Int32, T1, T2, T3, Boolean>, Action`3<T1, T2, T3>>")]
        public void WhileI_T_Func_3_Action_4_Int32_T1_T2_T3_Func_5_Int32_T1_T2_T3_Boolean_Action_3_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.WhileI_T
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.Until) + "() => Func`3<Func`2<Int32, U>, Func`2<Int32, Boolean>, Func`1<U>>")]
        public void Until_Func_3_Func_2_Int32_U_Func_2_Int32_Boolean_Func_1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.Until
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.Until) + "() => Func`3<Func`3<Int32, T1, U>, Func`3<Int32, T1, Boolean>, Func`2<T1, U>>")]
        public void Until_Func_3_Func_3_Int32_T1_U_Func_3_Int32_T1_Boolean_Func_2_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.Until
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.Until) + "() => Func`3<Func`4<Int32, T1, T2, U>, Func`4<Int32, T1, T2, Boolean>, Func`3<T1, T2, U>>")]
        public void Until_Func_3_Func_4_Int32_T1_T2_U_Func_4_Int32_T1_T2_Boolean_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.Until
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.Until) + "() => Func`3<Func`5<Int32, T1, T2, T3, U>, Func`5<Int32, T1, T2, T3, Boolean>, Func`4<T1, T2, T3, U>>")]
        public void Until_Func_3_Func_5_Int32_T1_T2_T3_U_Func_5_Int32_T1_T2_T3_Boolean_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.Until
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoWhile) + "() => Func`3<Action`1<Int32>, Func`2<Int32, Boolean>, Action>")]
        public void DoWhile_Func_3_Action_1_Int32_Func_2_Int32_Boolean_Action()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoWhile
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoWhile) + "() => Func`3<Action`2<Int32, T1>, Func`3<Int32, T1, Boolean>, Action`1<T1>>")]
        public void DoWhile_Func_3_Action_2_Int32_T1_Func_3_Int32_T1_Boolean_Action_1_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoWhile
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoWhile) + "() => Func`3<Action`3<Int32, T1, T2>, Func`4<Int32, T1, T2, Boolean>, Action`2<T1, T2>>")]
        public void DoWhile_Func_3_Action_3_Int32_T1_T2_Func_4_Int32_T1_T2_Boolean_Action_2_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoWhile
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoWhile) + "() => Func`3<Action`4<Int32, T1, T2, T3>, Func`5<Int32, T1, T2, T3, Boolean>, Action`3<T1, T2, T3>>")]
        public void DoWhile_Func_3_Action_4_Int32_T1_T2_T3_Func_5_Int32_T1_T2_T3_Boolean_Action_3_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoWhile
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoUntil) + "() => Func`3<Func`2<Int32, U>, Func`2<Int32, Boolean>, Func`1<U>>")]
        public void DoUntil_Func_3_Func_2_Int32_U_Func_2_Int32_Boolean_Func_1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoUntil
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoUntil) + "() => Func`3<Func`3<Int32, T1, U>, Func`3<Int32, T1, Boolean>, Func`2<T1, U>>")]
        public void DoUntil_Func_3_Func_3_Int32_T1_U_Func_3_Int32_T1_Boolean_Func_2_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoUntil
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoUntil) + "() => Func`3<Func`4<Int32, T1, T2, U>, Func`4<Int32, T1, T2, Boolean>, Func`3<T1, T2, U>>")]
        public void DoUntil_Func_3_Func_4_Int32_T1_T2_U_Func_4_Int32_T1_T2_Boolean_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoUntil
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoUntil) + "() => Func`3<Func`5<Int32, T1, T2, T3, U>, Func`5<Int32, T1, T2, T3, Boolean>, Func`4<T1, T2, T3, U>>")]
        public void DoUntil_Func_3_Func_5_Int32_T1_T2_T3_U_Func_5_Int32_T1_T2_T3_Boolean_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoUntil
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Collect) + "() => Func`3<Func`1<U>, UInt32, Func`1<List`1<U>>>")]
        public void L_Collect_Func_3_Func_1_U_UInt32_Func_1_List_1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Collect
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Collect) + "() => Func`3<Func`2<T1, U>, UInt32, Func`2<T1, List`1<U>>>")]
        public void L_Collect_Func_3_Func_2_T1_U_UInt32_Func_2_T1_List_1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Collect
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Collect) + "() => Func`3<Func`3<T1, T2, U>, UInt32, Func`3<T1, T2, List`1<U>>>")]
        public void L_Collect_Func_3_Func_3_T1_T2_U_UInt32_Func_3_T1_T2_List_1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Collect
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Collect) + "() => Func`3<Func`4<T1, T2, T3, U>, UInt32, Func`4<T1, T2, T3, List`1<U>>>")]
        public void L_Collect_Func_3_Func_4_T1_T2_T3_U_UInt32_Func_4_T1_T2_T3_List_1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Collect
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Collect) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, UInt32, Func`5<T1, T2, T3, T4, List`1<U>>>")]
        public void L_Collect_Func_3_Func_5_T1_T2_T3_T4_U_UInt32_Func_5_T1_T2_T3_T4_List_1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Collect
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_MergeLoop) + "() => Func`2<Action, Func`2<Int32, Boolean>>")]
        public void L_MergeLoop_Func_2_Action_Func_2_Int32_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_MergeLoop
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_MergeLoop) + "() => Func`2<Action`1<T1>, Func`3<Int32, T1, Boolean>>")]
        public void L_MergeLoop_Func_2_Action_1_T1_Func_3_Int32_T1_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_MergeLoop
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_MergeLoop) + "() => Func`2<Action`2<T1, T2>, Func`4<Int32, T1, T2, Boolean>>")]
        public void L_MergeLoop_Func_2_Action_2_T1_T2_Func_4_Int32_T1_T2_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_MergeLoop
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_MergeLoop) + "() => Func`2<Action`3<T1, T2, T3>, Func`5<Int32, T1, T2, T3, Boolean>>")]
        public void L_MergeLoop_Func_2_Action_3_T1_T2_T3_Func_5_Int32_T1_T2_T3_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_MergeLoop
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_To) + "() => Func`4<Int32, Int32, Action, Action>")]
        public void L_To()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_To
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_ToI) + "() => Func`4<Int32, Int32, Action`1<Int32>, Action>")]
        public void L_ToI()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_ToI
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_For) + "() => Func`4<Int32, Int32, Func`2<Int32, Boolean>, Action>")]
        public void L_For()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_For
         }
         
    }
    [Trait(Traits.TargetClass,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L))]
    public partial class L_ThreadTester : XUnitOutputTester, IDisposable
    {
        public L_ThreadTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Thread)+ "." + nameof(L.Thread.MethodProfileData_Get) + "(String) => MethodProfileData")]
        public void MethodProfileData_Get()
         {
            // TODO: Implement method test LCore.Extensions.L.Thread.MethodProfileData_Get
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Thread)+ "." + nameof(L.Thread.MethodProfileData_Remove) + "(String)")]
        public void MethodProfileData_Remove()
         {
            // TODO: Implement method test LCore.Extensions.L.Thread.MethodProfileData_Remove
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Thread)+ "." + nameof(L.Thread.MethodProfileData_Add) + "(String, MethodProfileData)")]
        public void MethodProfileData_Add()
         {
            // TODO: Implement method test LCore.Extensions.L.Thread.MethodProfileData_Add
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Thread)+ "." + nameof(L.Thread.MethodProfileData_Has) + "(String) => Boolean")]
        public void MethodProfileData_Has()
         {
            // TODO: Implement method test LCore.Extensions.L.Thread.MethodProfileData_Has
         }
         
    }
    [Trait(Traits.TargetClass,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L))]
   public partial class L_ObjTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Obj)+ "." + nameof(L.Obj.NewRandom) + "(Nullable`1<T>, Nullable`1<T>) => T")]
        public void NewRandom_Nullable_1_T_Nullable_1_T_T()
         {
            // TODO: Implement method test LCore.Extensions.L.Obj.NewRandom
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Obj)+ "." + nameof(L.Obj.NewRandom) + "(Type, Object, Object) => Object")]
        public void NewRandom_Type_Object_Object_Object()
         {
            // TODO: Implement method test LCore.Extensions.L.Obj.NewRandom
         }
         
    }
    [Trait(Traits.TargetClass,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L))]
    public partial class L_BoolTester : XUnitOutputTester, IDisposable
    {
        public L_BoolTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_A) + "() => Func`3<Func`1<Boolean>, Action, Func`1<Boolean>>")]
        public void L_If_A_Func_3_Func_1_Boolean_Action_Func_1_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_A) + "() => Func`3<Func`2<T1, Boolean>, Action`1<T1>, Func`2<T1, Boolean>>")]
        public void L_If_A_Func_3_Func_2_T1_Boolean_Action_1_T1_Func_2_T1_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_A) + "() => Func`3<Func`3<T1, T2, Boolean>, Action`2<T1, T2>, Func`3<T1, T2, Boolean>>")]
        public void L_If_A_Func_3_Func_3_T1_T2_Boolean_Action_2_T1_T2_Func_3_T1_T2_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_A) + "() => Func`3<Func`4<T1, T2, T3, Boolean>, Action`3<T1, T2, T3>, Func`4<T1, T2, T3, Boolean>>")]
        public void L_If_A_Func_3_Func_4_T1_T2_T3_Boolean_Action_3_T1_T2_T3_Func_4_T1_T2_T3_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_A) + "() => Func`3<Func`5<T1, T2, T3, T4, Boolean>, Action`4<T1, T2, T3, T4>, Func`5<T1, T2, T3, T4, Boolean>>")]
        public void L_If_A_Func_3_Func_5_T1_T2_T3_T4_Boolean_Action_4_T1_T2_T3_T4_Func_5_T1_T2_T3_T4_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_F) + "() => Func`3<Func`1<Boolean>, Func`1<U>, Func`1<U>>")]
        public void L_If_F_Func_3_Func_1_Boolean_Func_1_U_Func_1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_F) + "() => Func`3<Func`2<T1, Boolean>, Func`2<T1, U>, Func`2<T1, U>>")]
        public void L_If_F_Func_3_Func_2_T1_Boolean_Func_2_T1_U_Func_2_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_F) + "() => Func`3<Func`3<T1, T2, Boolean>, Func`3<T1, T2, U>, Func`3<T1, T2, U>>")]
        public void L_If_F_Func_3_Func_3_T1_T2_Boolean_Func_3_T1_T2_U_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_F) + "() => Func`3<Func`4<T1, T2, T3, Boolean>, Func`4<T1, T2, T3, U>, Func`4<T1, T2, T3, U>>")]
        public void L_If_F_Func_3_Func_4_T1_T2_T3_Boolean_Func_4_T1_T2_T3_U_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_F) + "() => Func`3<Func`5<T1, T2, T3, T4, Boolean>, Func`5<T1, T2, T3, T4, U>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_If_F_Func_3_Func_5_T1_T2_T3_T4_Boolean_Func_5_T1_T2_T3_T4_U_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_IfElse) + "() => Func`4<Func`1<Boolean>, Action, Action, Action>")]
        public void L_IfElse_Func_4_Func_1_Boolean_Action_Action_Action()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_IfElse
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_IfElse) + "() => Func`4<Func`2<T1, Boolean>, Action`1<T1>, Action`1<T1>, Action`1<T1>>")]
        public void L_IfElse_Func_4_Func_2_T1_Boolean_Action_1_T1_Action_1_T1_Action_1_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_IfElse
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_IfElse) + "() => Func`4<Func`3<T1, T2, Boolean>, Action`2<T1, T2>, Action`2<T1, T2>, Action`2<T1, T2>>")]
        public void L_IfElse_Func_4_Func_3_T1_T2_Boolean_Action_2_T1_T2_Action_2_T1_T2_Action_2_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_IfElse
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_IfElse) + "() => Func`4<Func`4<T1, T2, T3, Boolean>, Action`3<T1, T2, T3>, Action`3<T1, T2, T3>, Action`3<T1, T2, T3>>")]
        public void L_IfElse_Func_4_Func_4_T1_T2_T3_Boolean_Action_3_T1_T2_T3_Action_3_T1_T2_T3_Action_3_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_IfElse
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_IfElse) + "() => Func`4<Func`5<T1, T2, T3, T4, Boolean>, Action`4<T1, T2, T3, T4>, Action`4<T1, T2, T3, T4>, Action`4<T1, T2, T3, T4>>")]
        public void L_IfElse_Func_4_Func_5_T1_T2_T3_T4_Boolean_Action_4_T1_T2_T3_T4_Action_4_T1_T2_T3_T4_Action_4_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_IfElse
         }
         
    }
    [Trait(Traits.TargetClass,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L))]
    public partial class L_FileTester : XUnitOutputTester, IDisposable
    {
        public L_FileTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.File)+ "." + nameof(L.File.BufferedMove) + "(String, String, Boolean, Int32)")]
        public void BufferedMove()
         {
            // TODO: Implement method test LCore.Extensions.L.File.BufferedMove
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.File)+ "." + nameof(L.File.CombinePaths) + "(String[]) => String")]
        public void CombinePaths_String_String()
         {
            // TODO: Implement method test LCore.Extensions.L.File.CombinePaths
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.File)+ "." + nameof(L.File.CombinePaths) + "(Char, String[]) => String")]
        public void CombinePaths_Char_String_String()
         {
            // TODO: Implement method test LCore.Extensions.L.File.CombinePaths
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.File)+ "." + nameof(L.File.GetFileContents) + "(String) => Byte[]")]
        public void GetFileContents()
         {
            // TODO: Implement method test LCore.Extensions.L.File.GetFileContents
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.File)+ "." + nameof(L.File.SafeCopyFile) + "(String, String, Int32, Boolean) => Boolean")]
        public void SafeCopyFile()
         {
            // TODO: Implement method test LCore.Extensions.L.File.SafeCopyFile
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.File)+ "." + nameof(L.File.SafeMoveFile) + "(String, String, Int32, Boolean, Boolean) => Boolean")]
        public void SafeMoveFile()
         {
            // TODO: Implement method test LCore.Extensions.L.File.SafeMoveFile
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.File)+ "." + nameof(L.File.BufferedMoveProgress))]
        public void BufferedMoveProgress()
         {
            // TODO: Implement method test LCore.Extensions.L.File.BufferedMoveProgress
         }
         
    }
    [Trait(Traits.TargetClass,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L))]
   public partial class L_StrTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Str)+ "." + nameof(L.Str.Char) + "(String, Int32) => Char")]
        public void Char()
         {
            // TODO: Implement method test LCore.Extensions.L.Str.Char
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Str)+ "." + nameof(L.Str.JoinLines) + "(IEnumerable`1<String>, String) => String")]
        public void JoinLines()
         {
            // TODO: Implement method test LCore.Extensions.L.Str.JoinLines
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Str)+ "." + nameof(L.Str.NumericalCompare) + "(String, String) => Int32")]
        public void NumericalCompare()
         {
            // TODO: Implement method test LCore.Extensions.L.Str.NumericalCompare
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Str)+ "." + nameof(L.Str.Pluralize) + "(String, Int32) => String")]
        public void Pluralize_String_Int32_String()
         {
            // TODO: Implement method test LCore.Extensions.L.Str.Pluralize
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Str)+ "." + nameof(L.Str.Pluralize) + "(String, UInt32) => String")]
        public void Pluralize_String_UInt32_String()
         {
            // TODO: Implement method test LCore.Extensions.L.Str.Pluralize
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Str)+ "." + nameof(L.Str.RemoveChars) + "(String, Char[]) => String")]
        public void RemoveChars()
         {
            // TODO: Implement method test LCore.Extensions.L.Str.RemoveChars
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Str)+ "." + nameof(L.Str.ReplaceDouble) + "(String, Char) => String")]
        public void ReplaceDouble()
         {
            // TODO: Implement method test LCore.Extensions.L.Str.ReplaceDouble
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Str)+ "." + nameof(L.Str.Singularize) + "(String) => String")]
        public void Singularize()
         {
            // TODO: Implement method test LCore.Extensions.L.Str.Singularize
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Str)+ "." + nameof(L.Str.Surround) + "(String, String, String) => String")]
        public void Surround()
         {
            // TODO: Implement method test LCore.Extensions.L.Str.Surround
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Str)+ "." + nameof(L.Str.ToS) + "(Object) => String")]
        public void ToS()
         {
            // TODO: Implement method test LCore.Extensions.L.Str.ToS
         }
         
    }
    [Trait(Traits.TargetClass,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L))]
    public partial class L_LogicTester : XUnitOutputTester, IDisposable
    {
        public L_LogicTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.New) + "() => Func`3<T1, T2, U>")]
        public void New_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.New) + "() => Func`4<T1, T2, T3, U>")]
        public void New_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.New) + "() => Func`5<T1, T2, T3, T4, U>")]
        public void New_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "() => Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>")]
        public void Action_Action_10_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "() => Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>")]
        public void Action_Action_11_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "() => Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>")]
        public void Action_Action_12_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "() => Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>")]
        public void Action_Action_13_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "() => Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>")]
        public void Action_Action_14_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "() => Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>")]
        public void Action_Action_15_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "() => Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>")]
        public void Action_Action_16_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_T16()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func`1<U>")]
        public void Do_Func_1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func`2<T1, U>")]
        public void Do_Func_2_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func`3<T1, T2, U>")]
        public void Do_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func`4<T1, T2, T3, U>")]
        public void Do_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func`5<T1, T2, T3, T4, U>")]
        public void Do_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func`6<T1, T2, T3, T4, T5, U>")]
        public void Do_Func_6_T1_T2_T3_T4_T5_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func`7<T1, T2, T3, T4, T5, T6, U>")]
        public void Do_Func_7_T1_T2_T3_T4_T5_T6_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func`8<T1, T2, T3, T4, T5, T6, T7, U>")]
        public void Do_Func_8_T1_T2_T3_T4_T5_T6_T7_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func`9<T1, T2, T3, T4, T5, T6, T7, T8, U>")]
        public void Do_Func_9_T1_T2_T3_T4_T5_T6_T7_T8_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, U>")]
        public void Do_Func_10_T1_T2_T3_T4_T5_T6_T7_T8_T9_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, U>")]
        public void Do_Func_11_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, U>")]
        public void Do_Func_12_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, U>")]
        public void Do_Func_13_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, U>")]
        public void Do_Func_14_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, U>")]
        public void Do_Func_15_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, U>")]
        public void Do_Func_16_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, U>")]
        public void Do_Func_17_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_T16_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "(Action) => Action")]
        public void Action_Action_Action()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "(Action`1<T1>) => Action`1<T1>")]
        public void Action_Action_1_T1_Action_1_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "(Action`2<T1, T2>) => Action`2<T1, T2>")]
        public void Action_Action_2_T1_T2_Action_2_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "(Action`3<T1, T2, T3>) => Action`3<T1, T2, T3>")]
        public void Action_Action_3_T1_T2_T3_Action_3_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "(Action`4<T1, T2, T3, T4>) => Action`4<T1, T2, T3, T4>")]
        public void Action_Action_4_T1_T2_T3_T4_Action_4_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "(Action`5<T1, T2, T3, T4, T5>) => Action`5<T1, T2, T3, T4, T5>")]
        public void Action_Action_5_T1_T2_T3_T4_T5_Action_5_T1_T2_T3_T4_T5()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "(Action`6<T1, T2, T3, T4, T5, T6>) => Action`6<T1, T2, T3, T4, T5, T6>")]
        public void Action_Action_6_T1_T2_T3_T4_T5_T6_Action_6_T1_T2_T3_T4_T5_T6()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "(Action`7<T1, T2, T3, T4, T5, T6, T7>) => Action`7<T1, T2, T3, T4, T5, T6, T7>")]
        public void Action_Action_7_T1_T2_T3_T4_T5_T6_T7_Action_7_T1_T2_T3_T4_T5_T6_T7()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "(Action`8<T1, T2, T3, T4, T5, T6, T7, T8>) => Action`8<T1, T2, T3, T4, T5, T6, T7, T8>")]
        public void Action_Action_8_T1_T2_T3_T4_T5_T6_T7_T8_Action_8_T1_T2_T3_T4_T5_T6_T7_T8()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "(Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>) => Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>")]
        public void Action_Action_9_T1_T2_T3_T4_T5_T6_T7_T8_T9_Action_9_T1_T2_T3_T4_T5_T6_T7_T8_T9()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "(Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>) => Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>")]
        public void Action_Action_10_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_Action_10_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "(Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>) => Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>")]
        public void Action_Action_11_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_Action_11_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "(Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>) => Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>")]
        public void Action_Action_12_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_Action_12_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "(Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>) => Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>")]
        public void Action_Action_13_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_Action_13_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "(Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>) => Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>")]
        public void Action_Action_14_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_Action_14_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "(Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>) => Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>")]
        public void Action_Action_15_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_Action_15_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "(Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>) => Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>")]
        public void Action_Action_16_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_T16_Action_16_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_T16()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Function) + "(Func`1<U>) => Func`1<U>")]
        public void Function_Func_1_U_Func_1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Function) + "(Func`2<T1, U>) => Func`2<T1, U>")]
        public void Function_Func_2_T1_U_Func_2_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Function) + "(Func`3<T1, T2, U>) => Func`3<T1, T2, U>")]
        public void Function_Func_3_T1_T2_U_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Function) + "(Func`4<T1, T2, T3, U>) => Func`4<T1, T2, T3, U>")]
        public void Function_Func_4_T1_T2_T3_U_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Function) + "(Func`5<T1, T2, T3, T4, U>) => Func`5<T1, T2, T3, T4, U>")]
        public void Function_Func_5_T1_T2_T3_T4_U_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Function) + "(Func`6<T1, T2, T3, T4, T5, U>) => Func`6<T1, T2, T3, T4, T5, U>")]
        public void Function_Func_6_T1_T2_T3_T4_T5_U_Func_6_T1_T2_T3_T4_T5_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Function) + "(Func`7<T1, T2, T3, T4, T5, T6, U>) => Func`7<T1, T2, T3, T4, T5, T6, U>")]
        public void Function_Func_7_T1_T2_T3_T4_T5_T6_U_Func_7_T1_T2_T3_T4_T5_T6_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Function) + "(Func`8<T1, T2, T3, T4, T5, T6, T7, U>) => Func`8<T1, T2, T3, T4, T5, T6, T7, U>")]
        public void Function_Func_8_T1_T2_T3_T4_T5_T6_T7_U_Func_8_T1_T2_T3_T4_T5_T6_T7_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Function) + "(Func`9<T1, T2, T3, T4, T5, T6, T7, T8, U>) => Func`9<T1, T2, T3, T4, T5, T6, T7, T8, U>")]
        public void Function_Func_9_T1_T2_T3_T4_T5_T6_T7_T8_U_Func_9_T1_T2_T3_T4_T5_T6_T7_T8_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Function) + "(Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, U>) => Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, U>")]
        public void Function_Func_10_T1_T2_T3_T4_T5_T6_T7_T8_T9_U_Func_10_T1_T2_T3_T4_T5_T6_T7_T8_T9_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Function) + "(Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, U>) => Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, U>")]
        public void Function_Func_11_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_U_Func_11_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Function) + "(Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, U>) => Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, U>")]
        public void Function_Func_12_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_U_Func_12_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Function) + "(Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, U>) => Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, U>")]
        public void Function_Func_13_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_U_Func_13_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Function) + "(Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, U>) => Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, U>")]
        public void Function_Func_14_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_U_Func_14_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Function) + "(Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, U>) => Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, U>")]
        public void Function_Func_15_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_U_Func_15_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Function) + "(Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, U>) => Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, U>")]
        public void Function_Func_16_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_U_Func_16_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Function) + "(Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, U>) => Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, U>")]
        public void Function_Func_17_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_T16_U_Func_17_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_T16_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Function
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Return) + "() => Func`1<U>")]
        public void Return_Func_1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Return
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Return) + "(U) => Func`1<U>")]
        public void Return_U_Func_1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Return
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Pass) + "() => Func`2<T1, T1>")]
        public void Pass()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Pass
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.New) + "(Object[]) => Func`1<U>")]
        public void New_Object_Func_1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.New) + "() => Func`1<U>")]
        public void New_Func_1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.New) + "() => Func`2<T1, U>")]
        public void New_Func_2_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F2) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Func`3[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_F2_Func_3_Func_5_T1_T2_T3_T4_U_Func_3_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F3) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Func`2[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_F3_Func_3_Func_5_T1_T2_T3_T4_U_Func_2_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F4) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Func`1[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_F4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F4
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge) + "() => Func`3<Action, Action, Action>")]
        public void L_Merge()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_A_F) + "() => Func`3<Action, Func`1<U>, Func`1<U>>")]
        public void L_Merge_A_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_A_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_A) + "() => Func`3<Func`1<U>, Action, Func`1<U>>")]
        public void L_Merge_F_A()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_A1) + "() => Func`3<Func`1<U>, Action`1<T1>, Func`2<T1, U>>")]
        public void L_Merge_F_A1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A1
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_A2) + "() => Func`3<Func`1<U>, Action`2<T1, T2>, Func`3<T1, T2, U>>")]
        public void L_Merge_F_A2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_A3) + "() => Func`3<Func`1<U>, Action`3<T1, T2, T3>, Func`4<T1, T2, T3, U>>")]
        public void L_Merge_F_A3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_A4) + "() => Func`3<Func`1<U>, Action`4<T1, T2, T3, T4>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Merge_F_A4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A4
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_A) + "() => Func`3<Func`2<T1, U>, Action, Func`2<T1, U>>")]
        public void L_Merge_F1_A()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_A1) + "() => Func`3<Func`2<T1, U>, Action`1<T2>, Func`3<T1, T2, U>>")]
        public void L_Merge_F1_A1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_A1
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_A2) + "() => Func`3<Func`2<T1, U>, Action`2<T2, T3>, Func`4<T1, T2, T3, U>>")]
        public void L_Merge_F1_A2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_A3) + "() => Func`3<Func`2<T1, U>, Action`3<T2, T3, T4>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Merge_F1_A3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_A3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F2_A) + "() => Func`3<Func`3<T1, T2, U>, Action, Func`3<T1, T2, U>>")]
        public void L_Merge_F2_A()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F2_A1) + "() => Func`3<Func`3<T1, T2, U>, Action`1<T3>, Func`4<T1, T2, T3, U>>")]
        public void L_Merge_F2_A1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_A1
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F2_A2) + "() => Func`3<Func`3<T1, T2, U>, Action`2<T3, T4>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Merge_F2_A2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F3_A) + "() => Func`3<Func`4<T1, T2, T3, U>, Action, Func`4<T1, T2, T3, U>>")]
        public void L_Merge_F3_A_Func_3_Func_4_T1_T2_T3_U_Action_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F3_A1) + "() => Func`3<Func`4<T1, T2, T3, U>, Action`1<T4>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Merge_F3_A1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_A1
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F3_A) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Action, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Merge_F3_A_Func_3_Func_5_T1_T2_T3_T4_U_Action_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_F) + "() => Func`3<Func`1<U>, Func`1<U>, Func`1<U>>")]
        public void L_Merge_F_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_F1) + "() => Func`3<Func`1<U>, Func`2<T1, U>, Func`2<T1, U>>")]
        public void L_Merge_F_F1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F1
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_F2) + "() => Func`3<Func`1<U>, Func`3<T1, T2, U>, Func`3<T1, T2, U>>")]
        public void L_Merge_F_F2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_F3) + "() => Func`3<Func`1<U>, Func`4<T1, T2, T3, U>, Func`4<T1, T2, T3, U>>")]
        public void L_Merge_F_F3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_F4) + "() => Func`3<Func`1<U>, Func`5<T1, T2, T3, T4, U>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Merge_F_F4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F4
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_F) + "() => Func`3<Func`2<T1, U>, Func`1<U>, Func`2<T1, U>>")]
        public void L_Merge_F1_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_F1) + "() => Func`3<Func`2<T1, U>, Func`2<T3, U>, Func`3<T1, T3, U>>")]
        public void L_Merge_F1_F1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_F1
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_F2) + "() => Func`3<Func`2<T1, U>, Func`3<T3, T4, U>, Func`4<T1, T3, T4, U>>")]
        public void L_Merge_F1_F2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_F3) + "() => Func`3<Func`2<T1, U>, Func`4<T2, T3, T4, U>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Merge_F1_F3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_F3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F2_F) + "() => Func`3<Func`3<T1, T2, U>, Func`1<U>, Func`3<T1, T2, U>>")]
        public void L_Merge_F2_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F2_F1) + "() => Func`3<Func`3<T1, T2, U>, Func`2<T4, U>, Func`4<T1, T2, T4, U>>")]
        public void L_Merge_F2_F1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_F1
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F2_F2) + "() => Func`3<Func`3<T1, T2, U>, Func`3<T3, T4, U>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Merge_F2_F2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F3_F) + "() => Func`3<Func`4<T1, T2, T3, U>, Func`1<U>, Func`4<T1, T2, T3, U>>")]
        public void L_Merge_F3_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F3_F1) + "() => Func`3<Func`4<T1, T2, T3, U>, Func`2<T4, U>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Merge_F3_F1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_F1
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F4_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Func`1<U>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Merge_F4_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F4_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A) + "() => Func`3<Action`1<T1>, T1, Action>")]
        public void L_Supply_A_Func_3_Action_1_T1_T1_Action()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A) + "() => Func`3<Action`2<T1, T2>, T1, Action`1<T2>>")]
        public void L_Supply_A_Func_3_Action_2_T1_T2_T1_Action_1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A2) + "() => Func`3<Action`2<T1, T2>, T2, Action`1<T1>>")]
        public void L_Supply_A2_Func_3_Action_2_T1_T2_T2_Action_1_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A) + "() => Func`3<Action`3<T1, T2, T3>, T1, Action`2<T2, T3>>")]
        public void L_Supply_A_Func_3_Action_3_T1_T2_T3_T1_Action_2_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A2) + "() => Func`3<Action`3<T1, T2, T3>, T2, Action`2<T1, T3>>")]
        public void L_Supply_A2_Func_3_Action_3_T1_T2_T3_T2_Action_2_T1_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A3) + "() => Func`3<Action`3<T1, T2, T3>, T3, Action`2<T1, T2>>")]
        public void L_Supply_A3_Func_3_Action_3_T1_T2_T3_T3_Action_2_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, T1, Action`3<T2, T3, T4>>")]
        public void L_Supply_A_Func_3_Action_4_T1_T2_T3_T4_T1_Action_3_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A2) + "() => Func`3<Action`4<T1, T2, T3, T4>, T2, Action`3<T1, T3, T4>>")]
        public void L_Supply_A2_Func_3_Action_4_T1_T2_T3_T4_T2_Action_3_T1_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A3) + "() => Func`3<Action`4<T1, T2, T3, T4>, T3, Action`3<T1, T2, T4>>")]
        public void L_Supply_A3_Func_3_Action_4_T1_T2_T3_T4_T3_Action_3_T1_T2_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A4) + "() => Func`3<Action`4<T1, T2, T3, T4>, T4, Action`3<T1, T2, T3>>")]
        public void L_Supply_A4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A4
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F) + "() => Func`3<Func`2<T1, U>, T1, Func`1<U>>")]
        public void L_Supply_F_Func_3_Func_2_T1_U_T1_Func_1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F) + "() => Func`3<Func`3<T1, T2, U>, T1, Func`2<T2, U>>")]
        public void L_Supply_F_Func_3_Func_3_T1_T2_U_T1_Func_2_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F2) + "() => Func`3<Func`3<T1, T2, U>, T2, Func`2<T1, U>>")]
        public void L_Supply_F2_Func_3_Func_3_T1_T2_U_T2_Func_2_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F) + "() => Func`3<Func`4<T1, T2, T3, U>, T1, Func`3<T2, T3, U>>")]
        public void L_Supply_F_Func_3_Func_4_T1_T2_T3_U_T1_Func_3_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F2) + "() => Func`3<Func`4<T1, T2, T3, U>, T2, Func`3<T1, T3, U>>")]
        public void L_Supply_F2_Func_3_Func_4_T1_T2_T3_U_T2_Func_3_T1_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F3) + "() => Func`3<Func`4<T1, T2, T3, U>, T3, Func`3<T1, T2, U>>")]
        public void L_Supply_F3_Func_3_Func_4_T1_T2_T3_U_T3_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, T1, Func`4<T2, T3, T4, U>>")]
        public void L_Supply_F_Func_3_Func_5_T1_T2_T3_T4_U_T1_Func_4_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F2) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, T2, Func`4<T1, T3, T4, U>>")]
        public void L_Supply_F2_Func_3_Func_5_T1_T2_T3_T4_U_T2_Func_4_T1_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F3) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, T3, Func`4<T1, T2, T4, U>>")]
        public void L_Supply_F3_Func_3_Func_5_T1_T2_T3_T4_U_T3_Func_4_T1_T2_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F4) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, T4, Func`4<T1, T2, T3, U>>")]
        public void L_Supply_F4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F4
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "() => Action`1<T1>")]
        public void Action_Action_1_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "() => Action`2<T1, T2>")]
        public void Action_Action_2_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "() => Action`3<T1, T2, T3>")]
        public void Action_Action_3_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "() => Action`4<T1, T2, T3, T4>")]
        public void Action_Action_4_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "() => Action`5<T1, T2, T3, T4, T5>")]
        public void Action_Action_5_T1_T2_T3_T4_T5()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "() => Action`6<T1, T2, T3, T4, T5, T6>")]
        public void Action_Action_6_T1_T2_T3_T4_T5_T6()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "() => Action`7<T1, T2, T3, T4, T5, T6, T7>")]
        public void Action_Action_7_T1_T2_T3_T4_T5_T6_T7()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "() => Action`8<T1, T2, T3, T4, T5, T6, T7, T8>")]
        public void Action_Action_8_T1_T2_T3_T4_T5_T6_T7_T8()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Action) + "() => Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>")]
        public void Action_Action_9_T1_T2_T3_T4_T5_T6_T7_T8_T9()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Action
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_A) + "() => Func`2<Action`3<T1, T2, T3>, Action`3<U1, U2, U3>>")]
        public void L_Cast_A_Func_2_Action_3_T1_T2_T3_Action_3_U1_U2_U3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_A) + "() => Func`2<Action`4<T1, T2, T3, T4>, Action`4<U1, U2, U3, U4>>")]
        public void L_Cast_A_Func_2_Action_4_T1_T2_T3_T4_Action_4_U1_U2_U3_U4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_F) + "() => Func`2<Func`1<U1>, Func`1<U2>>")]
        public void L_Cast_F_Func_2_Func_1_U1_Func_1_U2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_F) + "() => Func`2<Func`2<T1, U1>, Func`2<T2, U2>>")]
        public void L_Cast_F_Func_2_Func_2_T1_U1_Func_2_T2_U2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_F) + "() => Func`2<Func`3<T1, T2, U1>, Func`3<T3, T4, U2>>")]
        public void L_Cast_F_Func_2_Func_3_T1_T2_U1_Func_3_T3_T4_U2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_F) + "() => Func`2<Func`4<T1, T2, T3, U1>, Func`4<T4, T5, T6, U2>>")]
        public void L_Cast_F_Func_2_Func_4_T1_T2_T3_U1_Func_4_T4_T5_T6_U2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_F) + "() => Func`2<Func`5<T1, T2, T3, T4, U1>, Func`5<T5, T6, T7, T8, U2>>")]
        public void L_Cast_F_Func_2_Func_5_T1_T2_T3_T4_U1_Func_5_T5_T6_T7_T8_U2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A) + "() => Func`3<Action, Action[], Action>")]
        public void Then_A_Func_3_Action_Action_Action()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A) + "() => Func`3<Action`1<T1>, Action`1[], Action`1<T1>>")]
        public void Then_A_Func_3_Action_1_T1_Action_1_Action_1_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A) + "() => Func`3<Action`2<T1, T2>, Action`2[], Action`2<T1, T2>>")]
        public void Then_A_Func_3_Action_2_T1_T2_Action_2_Action_2_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A) + "() => Func`3<Action`3<T1, T2, T3>, Action`3[], Action`3<T1, T2, T3>>")]
        public void Then_A_Func_3_Action_3_T1_T2_T3_Action_3_Action_3_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, Action`4[], Action`4<T1, T2, T3, T4>>")]
        public void Then_A_Func_3_Action_4_T1_T2_T3_T4_Action_4_Action_4_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A_F) + "() => Func`3<Action, Func`1[], Func`1<U>>")]
        public void Then_A_F_Func_3_Action_Func_1_Func_1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A_F) + "() => Func`3<Action`1<T1>, Func`2[], Func`2<T1, U>>")]
        public void Then_A_F_Func_3_Action_1_T1_Func_2_Func_2_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A_F) + "() => Func`3<Action`2<T1, T2>, Func`3[], Func`3<T1, T2, U>>")]
        public void Then_A_F_Func_3_Action_2_T1_T2_Func_3_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A_F) + "() => Func`3<Action`3<T1, T2, T3>, Func`4[], Func`4<T1, T2, T3, U>>")]
        public void Then_A_F_Func_3_Action_3_T1_T2_T3_Func_4_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A_F) + "() => Func`3<Action`4<T1, T2, T3, T4>, Func`5[], Func`5<T1, T2, T3, T4, U>>")]
        public void Then_A_F_Func_3_Action_4_T1_T2_T3_T4_Func_5_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_F) + "() => Func`3<Func`1<U>, Action[], Func`1<U>>")]
        public void Then_F_Func_3_Func_1_U_Action_Func_1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_F) + "() => Func`3<Func`2<T1, U>, Action`1[], Func`2<T1, U>>")]
        public void Then_F_Func_3_Func_2_T1_U_Action_1_Func_2_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_F) + "() => Func`3<Func`3<T1, T2, U>, Action`2[], Func`3<T1, T2, U>>")]
        public void Then_F_Func_3_Func_3_T1_T2_U_Action_2_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_F) + "() => Func`3<Func`4<T1, T2, T3, U>, Action`3[], Func`4<T1, T2, T3, U>>")]
        public void Then_F_Func_3_Func_4_T1_T2_T3_U_Action_3_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Action`4[], Func`5<T1, T2, T3, T4, U>>")]
        public void Then_F_Func_3_Func_5_T1_T2_T3_T4_U_Action_4_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Then_F_F) + "() => Func`3<Func`1<U>, Func`1[], Func`1<U>>")]
        public void L_Then_F_F_Func_3_Func_1_U_Func_1_Func_1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Then_F_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Then_F_F) + "() => Func`3<Func`2<T1, U>, Func`2[], Func`2<T1, U>>")]
        public void L_Then_F_F_Func_3_Func_2_T1_U_Func_2_Func_2_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Then_F_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Then_F_F) + "() => Func`3<Func`3<T1, T2, U>, Func`3[], Func`3<T1, T2, U>>")]
        public void L_Then_F_F_Func_3_Func_3_T1_T2_U_Func_3_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Then_F_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Then_F_F) + "() => Func`3<Func`4<T1, T2, T3, U>, Func`4[], Func`4<T1, T2, T3, U>>")]
        public void L_Then_F_F_Func_3_Func_4_T1_T2_T3_U_Func_4_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Then_F_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Then_F_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Func`5[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_Then_F_F_Func_3_Func_5_T1_T2_T3_T4_U_Func_5_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Then_F_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A) + "() => Func`3<Action`1<T1>, Action[], Action`1<T1>>")]
        public void L_ThenMissing_A_Func_3_Action_1_T1_Action_Action_1_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A) + "() => Func`3<Action`2<T1, T2>, Action`1[], Action`2<T1, T2>>")]
        public void L_ThenMissing_A_Func_3_Action_2_T1_T2_Action_1_Action_2_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A2) + "() => Func`3<Action`2<T1, T2>, Action[], Action`2<T1, T2>>")]
        public void L_ThenMissing_A2_Func_3_Action_2_T1_T2_Action_Action_2_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A) + "() => Func`3<Action`3<T1, T2, T3>, Action`2[], Action`3<T1, T2, T3>>")]
        public void L_ThenMissing_A_Func_3_Action_3_T1_T2_T3_Action_2_Action_3_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A2) + "() => Func`3<Action`3<T1, T2, T3>, Action`1[], Action`3<T1, T2, T3>>")]
        public void L_ThenMissing_A2_Func_3_Action_3_T1_T2_T3_Action_1_Action_3_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A3) + "() => Func`3<Action`3<T1, T2, T3>, Action[], Action`3<T1, T2, T3>>")]
        public void L_ThenMissing_A3_Func_3_Action_3_T1_T2_T3_Action_Action_3_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, Action`3[], Action`4<T1, T2, T3, T4>>")]
        public void L_ThenMissing_A_Func_3_Action_4_T1_T2_T3_T4_Action_3_Action_4_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A2) + "() => Func`3<Action`4<T1, T2, T3, T4>, Action`2[], Action`4<T1, T2, T3, T4>>")]
        public void L_ThenMissing_A2_Func_3_Action_4_T1_T2_T3_T4_Action_2_Action_4_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A3) + "() => Func`3<Action`4<T1, T2, T3, T4>, Action`1[], Action`4<T1, T2, T3, T4>>")]
        public void L_ThenMissing_A3_Func_3_Action_4_T1_T2_T3_T4_Action_1_Action_4_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A4) + "() => Func`3<Action`4<T1, T2, T3, T4>, Action[], Action`4<T1, T2, T3, T4>>")]
        public void L_ThenMissing_A4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A4
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F) + "() => Func`3<Action`1<T1>, Func`1[], Func`2<T1, U>>")]
        public void L_ThenMissing_A_F_Func_3_Action_1_T1_Func_1_Func_2_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F) + "() => Func`3<Action`2<T1, T2>, Func`2[], Func`3<T1, T2, U>>")]
        public void L_ThenMissing_A_F_Func_3_Action_2_T1_T2_Func_2_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F) + "() => Func`3<Action`3<T1, T2, T3>, Func`3[], Func`4<T1, T2, T3, U>>")]
        public void L_ThenMissing_A_F_Func_3_Action_3_T1_T2_T3_Func_3_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F2) + "() => Func`3<Action`2<T1, T2>, Func`1[], Func`3<T1, T2, U>>")]
        public void L_ThenMissing_A_F2_Func_3_Action_2_T1_T2_Func_1_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F3) + "() => Func`3<Action`3<T1, T2, T3>, Func`1[], Func`4<T1, T2, T3, U>>")]
        public void L_ThenMissing_A_F3_Func_3_Action_3_T1_T2_T3_Func_1_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F2) + "() => Func`3<Action`3<T1, T2, T3>, Func`2[], Func`4<T1, T2, T3, U>>")]
        public void L_ThenMissing_A_F2_Func_3_Action_3_T1_T2_T3_Func_2_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F) + "() => Func`3<Action`4<T1, T2, T3, T4>, Func`4[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_A_F_Func_3_Action_4_T1_T2_T3_T4_Func_4_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F2) + "() => Func`3<Action`4<T1, T2, T3, T4>, Func`3[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_A_F2_Func_3_Action_4_T1_T2_T3_T4_Func_3_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F3) + "() => Func`3<Action`4<T1, T2, T3, T4>, Func`2[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_A_F3_Func_3_Action_4_T1_T2_T3_T4_Func_2_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F4) + "() => Func`3<Action`4<T1, T2, T3, T4>, Func`1[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_A_F4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F4
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A) + "() => Func`3<Func`2<T1, U>, Action[], Func`2<T1, U>>")]
        public void L_ThenMissing_F_A_Func_3_Func_2_T1_U_Action_Func_2_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A) + "() => Func`3<Func`3<T1, T2, U>, Action`1[], Func`3<T1, T2, U>>")]
        public void L_ThenMissing_F_A_Func_3_Func_3_T1_T2_U_Action_1_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A2) + "() => Func`3<Func`3<T1, T2, U>, Action[], Func`3<T1, T2, U>>")]
        public void L_ThenMissing_F_A2_Func_3_Func_3_T1_T2_U_Action_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A) + "() => Func`3<Func`4<T1, T2, T3, U>, Action`2[], Func`4<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_A_Func_3_Func_4_T1_T2_T3_U_Action_2_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A2) + "() => Func`3<Func`4<T1, T2, T3, U>, Action`1[], Func`4<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_A2_Func_3_Func_4_T1_T2_T3_U_Action_1_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A3) + "() => Func`3<Func`4<T1, T2, T3, U>, Action[], Func`4<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_A3_Func_3_Func_4_T1_T2_T3_U_Action_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Action`3[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_A_Func_3_Func_5_T1_T2_T3_T4_U_Action_3_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A2) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Action`2[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_A2_Func_3_Func_5_T1_T2_T3_T4_U_Action_2_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A3) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Action`1[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_A3_Func_3_Func_5_T1_T2_T3_T4_U_Action_1_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A4) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Action[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_A4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A4
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F) + "() => Func`3<Func`2<T1, U>, Func`1[], Func`2<T1, U>>")]
        public void L_ThenMissing_F_F_Func_3_Func_2_T1_U_Func_1_Func_2_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F) + "() => Func`3<Func`3<T1, T2, U>, Func`2[], Func`3<T1, T2, U>>")]
        public void L_ThenMissing_F_F_Func_3_Func_3_T1_T2_U_Func_2_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F2) + "() => Func`3<Func`3<T1, T2, U>, Func`1[], Func`3<T1, T2, U>>")]
        public void L_ThenMissing_F_F2_Func_3_Func_3_T1_T2_U_Func_1_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F2) + "() => Func`3<Func`4<T1, T2, T3, U>, Func`2[], Func`4<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_F2_Func_3_Func_4_T1_T2_T3_U_Func_2_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F3) + "() => Func`3<Func`4<T1, T2, T3, U>, Func`1[], Func`4<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_F3_Func_3_Func_4_T1_T2_T3_U_Func_1_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F) + "() => Func`3<Func`4<T1, T2, T3, U>, Func`3[], Func`4<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_F_Func_3_Func_4_T1_T2_T3_U_Func_3_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Func`4[], Func`5<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_F_Func_3_Func_5_T1_T2_T3_T4_U_Func_4_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Defaults_A) + "() => Func`4<Action`2<T1, T2>, T1, T2, Action`2<T1, T2>>")]
        public void L_Defaults_A_Func_4_Action_2_T1_T2_T1_T2_Action_2_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Defaults_A) + "() => Func`5<Action`3<T1, T2, T3>, T1, T2, T3, Action`3<T1, T2, T3>>")]
        public void L_Defaults_A_Func_5_Action_3_T1_T2_T3_T1_T2_T3_Action_3_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Defaults_A) + "() => Func`6<Action`4<T1, T2, T3, T4>, T1, T2, T3, T4, Action`4<T1, T2, T3, T4>>")]
        public void L_Defaults_A_Func_6_Action_4_T1_T2_T3_T4_T1_T2_T3_T4_Action_4_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Defaults_F) + "() => Func`4<Func`3<T1, T2, U>, T1, T2, Func`3<T1, T2, U>>")]
        public void L_Defaults_F_Func_4_Func_3_T1_T2_U_T1_T2_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Defaults_F) + "() => Func`5<Func`4<T1, T2, T3, U>, T1, T2, T3, Func`4<T1, T2, T3, U>>")]
        public void L_Defaults_F_Func_5_Func_4_T1_T2_T3_U_T1_T2_T3_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Defaults_F) + "() => Func`6<Func`5<T1, T2, T3, T4, U>, T1, T2, T3, T4, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Defaults_F_Func_6_Func_5_T1_T2_T3_T4_U_T1_T2_T3_T4_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_A) + "() => Func`3<Action`1<T1>, String, Action`1<T1>>")]
        public void L_Require_A_Func_3_Action_1_T1_String_Action_1_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_A) + "() => Func`3<Action`2<T1, T2>, String, Action`2<T1, T2>>")]
        public void L_Require_A_Func_3_Action_2_T1_T2_String_Action_2_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require2_A) + "() => Func`3<Action`2<T1, T2>, String, Action`2<T1, T2>>")]
        public void L_Require2_A_Func_3_Action_2_T1_T2_String_Action_2_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_A) + "() => Func`3<Action`3<T1, T2, T3>, String, Action`3<T1, T2, T3>>")]
        public void L_Require_A_Func_3_Action_3_T1_T2_T3_String_Action_3_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require2_A) + "() => Func`3<Action`3<T1, T2, T3>, String, Action`3<T1, T2, T3>>")]
        public void L_Require2_A_Func_3_Action_3_T1_T2_T3_String_Action_3_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require3_A) + "() => Func`3<Action`3<T1, T2, T3>, String, Action`3<T1, T2, T3>>")]
        public void L_Require3_A_Func_3_Action_3_T1_T2_T3_String_Action_3_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require3_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, String, Action`4<T1, T2, T3, T4>>")]
        public void L_Require_A_Func_3_Action_4_T1_T2_T3_T4_String_Action_4_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require2_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, String, Action`4<T1, T2, T3, T4>>")]
        public void L_Require2_A_Func_3_Action_4_T1_T2_T3_T4_String_Action_4_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require3_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, String, Action`4<T1, T2, T3, T4>>")]
        public void L_Require3_A_Func_3_Action_4_T1_T2_T3_T4_String_Action_4_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require3_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require4_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, String, Action`4<T1, T2, T3, T4>>")]
        public void L_Require4_A()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require4_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_F) + "() => Func`3<Func`2<T1, U>, String, Func`2<T1, U>>")]
        public void L_Require_F_Func_3_Func_2_T1_U_String_Func_2_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_F) + "() => Func`3<Func`3<T1, T2, U>, String, Func`3<T1, T2, U>>")]
        public void L_Require_F_Func_3_Func_3_T1_T2_U_String_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require2_F) + "() => Func`3<Func`3<T1, T2, U>, String, Func`3<T1, T2, U>>")]
        public void L_Require2_F_Func_3_Func_3_T1_T2_U_String_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_F) + "() => Func`3<Func`4<T1, T2, T3, U>, String, Func`4<T1, T2, T3, U>>")]
        public void L_Require_F_Func_3_Func_4_T1_T2_T3_U_String_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require2_F) + "() => Func`3<Func`4<T1, T2, T3, U>, String, Func`4<T1, T2, T3, U>>")]
        public void L_Require2_F_Func_3_Func_4_T1_T2_T3_U_String_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require3_F) + "() => Func`3<Func`4<T1, T2, T3, U>, String, Func`4<T1, T2, T3, U>>")]
        public void L_Require3_F_Func_3_Func_4_T1_T2_T3_U_String_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require3_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, String, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Require_F_Func_3_Func_5_T1_T2_T3_T4_U_String_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require2_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, String, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Require2_F_Func_3_Func_5_T1_T2_T3_T4_U_String_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require3_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, String, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Require3_F_Func_3_Func_5_T1_T2_T3_T4_U_String_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require3_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require4_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, String, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Require4_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require4_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RequireAll_A) + "() => Func`4<Action`2<T1, T2>, String, String, Action`2<T1, T2>>")]
        public void L_RequireAll_A_Func_4_Action_2_T1_T2_String_String_Action_2_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RequireAll_A) + "() => Func`5<Action`3<T1, T2, T3>, String, String, String, Action`3<T1, T2, T3>>")]
        public void L_RequireAll_A_Func_5_Action_3_T1_T2_T3_String_String_String_Action_3_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RequireAll_A) + "() => Func`6<Action`4<T1, T2, T3, T4>, String, String, String, String, Action`4<T1, T2, T3, T4>>")]
        public void L_RequireAll_A_Func_6_Action_4_T1_T2_T3_T4_String_String_String_String_Action_4_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RequireAll_F) + "() => Func`4<Func`3<T1, T2, U>, String, String, Func`3<T1, T2, U>>")]
        public void L_RequireAll_F_Func_4_Func_3_T1_T2_U_String_String_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RequireAll_F) + "() => Func`5<Func`4<T1, T2, T3, U>, String, String, String, Func`4<T1, T2, T3, U>>")]
        public void L_RequireAll_F_Func_5_Func_4_T1_T2_T3_U_String_String_String_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RequireAll_F) + "() => Func`6<Func`5<T1, T2, T3, T4, U>, String, String, String, String, Func`5<T1, T2, T3, T4, U>>")]
        public void L_RequireAll_F_Func_6_Func_5_T1_T2_T3_T4_U_String_String_String_String_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_A) + "() => Func`2<Action`1<U>, Func`2<U, U>>")]
        public void L_Yield_A_Func_2_Action_1_U_Func_2_U_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_A) + "() => Func`2<Action`2<U, T1>, Func`3<U, T1, U>>")]
        public void L_Yield_A_Func_2_Action_2_U_T1_Func_3_U_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield2_A) + "() => Func`2<Action`2<T1, U>, Func`3<T1, U, U>>")]
        public void L_Yield2_A_Func_2_Action_2_T1_U_Func_3_T1_U_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_A) + "() => Func`2<Action`3<U, T1, T2>, Func`4<U, T1, T2, U>>")]
        public void L_Yield_A_Func_2_Action_3_U_T1_T2_Func_4_U_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield2_A) + "() => Func`2<Action`3<T1, U, T2>, Func`4<T1, U, T2, U>>")]
        public void L_Yield2_A_Func_2_Action_3_T1_U_T2_Func_4_T1_U_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield3_A) + "() => Func`2<Action`3<T1, T2, U>, Func`4<T1, T2, U, U>>")]
        public void L_Yield3_A_Func_2_Action_3_T1_T2_U_Func_4_T1_T2_U_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield3_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_A) + "() => Func`2<Action`4<U, T1, T2, T3>, Func`5<U, T1, T2, T3, U>>")]
        public void L_Yield_A_Func_2_Action_4_U_T1_T2_T3_Func_5_U_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield2_A) + "() => Func`2<Action`4<T1, U, T2, T3>, Func`5<T1, U, T2, T3, U>>")]
        public void L_Yield2_A_Func_2_Action_4_T1_U_T2_T3_Func_5_T1_U_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield3_A) + "() => Func`2<Action`4<T1, T2, U, T3>, Func`5<T1, T2, U, T3, U>>")]
        public void L_Yield3_A_Func_2_Action_4_T1_T2_U_T3_Func_5_T1_T2_U_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield3_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield4_A) + "() => Func`2<Action`4<T1, T2, T3, U>, Func`5<T1, T2, T3, U, U>>")]
        public void L_Yield4_A()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield4_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_F) + "() => Func`2<Func`2<U, U>, Func`2<U, U>>")]
        public void L_Yield_F_Func_2_Func_2_U_U_Func_2_U_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_F) + "() => Func`2<Func`3<U, T1, U>, Func`3<U, T1, U>>")]
        public void L_Yield_F_Func_2_Func_3_U_T1_U_Func_3_U_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield2_F) + "() => Func`2<Func`3<T1, U, U>, Func`3<T1, U, U>>")]
        public void L_Yield2_F_Func_2_Func_3_T1_U_U_Func_3_T1_U_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_F) + "() => Func`2<Func`4<U, T1, T2, U>, Func`4<U, T1, T2, U>>")]
        public void L_Yield_F_Func_2_Func_4_U_T1_T2_U_Func_4_U_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield2_F) + "() => Func`2<Func`4<T1, U, T2, U>, Func`4<T1, U, T2, U>>")]
        public void L_Yield2_F_Func_2_Func_4_T1_U_T2_U_Func_4_T1_U_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield3_F) + "() => Func`2<Func`4<T1, T2, U, U>, Func`4<T1, T2, U, U>>")]
        public void L_Yield3_F_Func_2_Func_4_T1_T2_U_U_Func_4_T1_T2_U_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield3_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_F) + "() => Func`2<Func`5<U, T1, T2, T3, U>, Func`5<U, T1, T2, T3, U>>")]
        public void L_Yield_F_Func_2_Func_5_U_T1_T2_T3_U_Func_5_U_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield2_F) + "() => Func`2<Func`5<T1, U, T2, T3, U>, Func`5<T1, U, T2, T3, U>>")]
        public void L_Yield2_F_Func_2_Func_5_T1_U_T2_T3_U_Func_5_T1_U_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield3_F) + "() => Func`2<Func`5<T1, T2, U, T3, U>, Func`5<T1, T2, U, T3, U>>")]
        public void L_Yield3_F_Func_2_Func_5_T1_T2_U_T3_U_Func_5_T1_T2_U_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield3_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield4_F) + "() => Func`2<Func`5<T1, T2, T3, U, U>, Func`5<T1, T2, T3, U, U>>")]
        public void L_Yield4_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield4_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_A) + "() => Func`2<Func`1<Action>, Action>")]
        public void L_Execute_A_Func_2_Func_1_Action_Action()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_A) + "() => Func`2<Func`1<Action`1<T1>>, Action`1<T1>>")]
        public void L_Execute_A_Func_2_Func_1_Action_1_T1_Action_1_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_A) + "() => Func`2<Func`1<Action`2<T1, T2>>, Action`2<T1, T2>>")]
        public void L_Execute_A_Func_2_Func_1_Action_2_T1_T2_Action_2_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_A) + "() => Func`2<Func`1<Action`3<T1, T2, T3>>, Action`3<T1, T2, T3>>")]
        public void L_Execute_A_Func_2_Func_1_Action_3_T1_T2_T3_Action_3_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_A) + "() => Func`2<Func`1<Action`4<T1, T2, T3, T4>>, Action`4<T1, T2, T3, T4>>")]
        public void L_Execute_A_Func_2_Func_1_Action_4_T1_T2_T3_T4_Action_4_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_F) + "() => Func`2<Func`1<Func`1<U>>, Func`1<U>>")]
        public void L_Execute_F_Func_2_Func_1_Func_1_U_Func_1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_F) + "() => Func`2<Func`1<Func`2<T1, U>>, Func`2<T1, U>>")]
        public void L_Execute_F_Func_2_Func_1_Func_2_T1_U_Func_2_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_F) + "() => Func`2<Func`1<Func`3<T1, T2, U>>, Func`3<T1, T2, U>>")]
        public void L_Execute_F_Func_2_Func_1_Func_3_T1_T2_U_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_F) + "() => Func`2<Func`1<Func`4<T1, T2, T3, U>>, Func`4<T1, T2, T3, U>>")]
        public void L_Execute_F_Func_2_Func_1_Func_4_T1_T2_T3_U_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_F) + "() => Func`2<Func`1<Func`5<T1, T2, T3, T4, U>>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Execute_F_Func_2_Func_1_Func_5_T1_T2_T3_T4_U_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_A) + "() => Func`2<Action`1<T1>, Action`1<U1>>")]
        public void L_Cast_A_Func_2_Action_1_T1_Action_1_U1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_A) + "() => Func`2<Action`2<T1, T2>, Action`2<U1, U2>>")]
        public void L_Cast_A_Func_2_Action_2_T1_T2_Action_2_U1_U2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Do) + "() => Func`2<Func`1<U>, Action>")]
        public void L_Do()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cache) + "() => Func`3<Func`1<U>, String, Func`1<U>>")]
        public void L_Cache()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cache
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Cache) + "(Object&, Func`1<T>) => T")]
        public void Cache_Object_Func_1_T_T()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Cache
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Cache) + "(T&, Func`1<T>) => T")]
        public void Cache_T_Func_1_T_T()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Cache
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.GetCacheData) + "(String) => Dictionary`2<String, CacheData>")]
        public void GetCacheData()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.GetCacheData
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.ClearCache) + "(String)")]
        public void ClearCache()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.ClearCache
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_A) + "() => Func`3<Action`1<T1>, Func`1<T1>, Action`1<T1>>")]
        public void L_SetFunc_A()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_F) + "() => Func`3<Func`2<T1, U>, Func`1<T1>, Func`2<T1, U>>")]
        public void L_SetFunc_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_A2) + "() => Func`3<Action`2<T1, T2>, Func`1<T2>, Action`2<T1, T2>>")]
        public void L_SetFunc_A2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_F2) + "() => Func`3<Func`3<T1, T2, U>, Func`1<T2>, Func`3<T1, T2, U>>")]
        public void L_SetFunc_F2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_A3) + "() => Func`3<Action`3<T1, T2, T3>, Func`1<T3>, Action`3<T1, T2, T3>>")]
        public void L_SetFunc_A3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_A3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_F3) + "() => Func`3<Func`4<T1, T2, T3, U>, Func`1<T3>, Func`4<T1, T2, T3, U>>")]
        public void L_SetFunc_F3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_F3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_A4) + "() => Func`3<Action`4<T1, T2, T3, T4>, Func`1<T4>, Action`4<T1, T2, T3, T4>>")]
        public void L_SetFunc_A4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_A4
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_F4) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, Func`1<T4>, Func`5<T1, T2, T3, T4, U>>")]
        public void L_SetFunc_F4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_F4
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set_A) + "() => Func`3<Action`1<T1>, T1, Action`1<T1>>")]
        public void L_Set_A()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set_F) + "() => Func`3<Func`2<T1, U>, T1, Func`2<T1, U>>")]
        public void L_Set_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set2_A) + "() => Func`3<Action`2<T1, T2>, T2, Action`2<T1, T2>>")]
        public void L_Set2_A()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set2_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set2_F) + "() => Func`3<Func`3<T1, T2, U>, T2, Func`3<T1, T2, U>>")]
        public void L_Set2_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set2_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set3_A) + "() => Func`3<Action`3<T1, T2, T3>, T3, Action`3<T1, T2, T3>>")]
        public void L_Set3_A()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set3_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set3_F) + "() => Func`3<Func`4<T1, T2, T3, U>, T3, Func`4<T1, T2, T3, U>>")]
        public void L_Set3_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set3_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set4_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, T4, Action`4<T1, T2, T3, T4>>")]
        public void L_Set4_A()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set4_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set4_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, T4, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Set4_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set4_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_A) + "() => Func`3<Action, U, Func`1<U>>")]
        public void L_Return_A_Func_3_Action_U_Func_1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_A) + "() => Func`3<Action`1<T1>, U, Func`2<T1, U>>")]
        public void L_Return_A_Func_3_Action_1_T1_U_Func_2_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_A) + "() => Func`3<Action`2<T1, T2>, U, Func`3<T1, T2, U>>")]
        public void L_Return_A_Func_3_Action_2_T1_T2_U_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_A) + "() => Func`3<Action`3<T1, T2, T3>, U, Func`4<T1, T2, T3, U>>")]
        public void L_Return_A_Func_3_Action_3_T1_T2_T3_U_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, U, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Return_A_Func_3_Action_4_T1_T2_T3_T4_U_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_F) + "() => Func`3<Func`1<U>, U, Func`1<U>>")]
        public void L_Return_F_Func_3_Func_1_U_U_Func_1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_F) + "() => Func`3<Func`2<T1, U>, U, Func`2<T1, U>>")]
        public void L_Return_F_Func_3_Func_2_T1_U_U_Func_2_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_F) + "() => Func`3<Func`3<T1, T2, U>, U, Func`3<T1, T2, U>>")]
        public void L_Return_F_Func_3_Func_3_T1_T2_U_U_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_F) + "() => Func`3<Func`4<T1, T2, T3, U>, U, Func`4<T1, T2, T3, U>>")]
        public void L_Return_F_Func_3_Func_4_T1_T2_T3_U_U_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, U, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Return_F_Func_3_Func_5_T1_T2_T3_T4_U_U_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Rotate_A) + "() => Func`2<Action`2<T1, T2>, Action`2<T2, T1>>")]
        public void L_Rotate_A_Func_2_Action_2_T1_T2_Action_2_T2_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Rotate_A) + "() => Func`2<Action`3<T1, T2, T3>, Action`3<T3, T1, T2>>")]
        public void L_Rotate_A_Func_2_Action_3_T1_T2_T3_Action_3_T3_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Rotate_A) + "() => Func`2<Action`4<T1, T2, T3, T4>, Action`4<T4, T1, T2, T3>>")]
        public void L_Rotate_A_Func_2_Action_4_T1_T2_T3_T4_Action_4_T4_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Rotate_F) + "() => Func`2<Func`3<T1, T2, U>, Func`3<T2, T1, U>>")]
        public void L_Rotate_F_Func_2_Func_3_T1_T2_U_Func_3_T2_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Rotate_F) + "() => Func`2<Func`4<T1, T2, T3, U>, Func`4<T3, T1, T2, U>>")]
        public void L_Rotate_F_Func_2_Func_4_T1_T2_T3_U_Func_4_T3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Rotate_F) + "() => Func`2<Func`5<T1, T2, T3, T4, U>, Func`5<T4, T1, T2, T3, U>>")]
        public void L_Rotate_F_Func_2_Func_5_T1_T2_T3_T4_U_Func_5_T4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RotateBack_A) + "() => Func`2<Action`2<T1, T2>, Action`2<T2, T1>>")]
        public void L_RotateBack_A_Func_2_Action_2_T1_T2_Action_2_T2_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RotateBack_A) + "() => Func`2<Action`3<T1, T2, T3>, Action`3<T2, T3, T1>>")]
        public void L_RotateBack_A_Func_2_Action_3_T1_T2_T3_Action_3_T2_T3_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RotateBack_A) + "() => Func`2<Action`4<T1, T2, T3, T4>, Action`4<T2, T3, T4, T1>>")]
        public void L_RotateBack_A_Func_2_Action_4_T1_T2_T3_T4_Action_4_T2_T3_T4_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RotateBack_F) + "() => Func`2<Func`3<T1, T2, U>, Func`3<T2, T1, U>>")]
        public void L_RotateBack_F_Func_2_Func_3_T1_T2_U_Func_3_T2_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RotateBack_F) + "() => Func`2<Func`4<T1, T2, T3, U>, Func`4<T2, T3, T1, U>>")]
        public void L_RotateBack_F_Func_2_Func_4_T1_T2_T3_U_Func_4_T2_T3_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RotateBack_F) + "() => Func`2<Func`5<T1, T2, T3, T4, U>, Func`5<T2, T3, T4, T1, U>>")]
        public void L_RotateBack_F_Func_2_Func_5_T1_T2_T3_T4_U_Func_5_T2_T3_T4_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_A) + "() => Func`3<Action`1<T1>, T1, Action`1<T1>>")]
        public void L_Default_A_Func_3_Action_1_T1_T1_Action_1_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_A) + "() => Func`3<Action`2<T1, T2>, T1, Action`2<T1, T2>>")]
        public void L_Default_A_Func_3_Action_2_T1_T2_T1_Action_2_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default2_A) + "() => Func`3<Action`2<T1, T2>, T2, Action`2<T1, T2>>")]
        public void L_Default2_A_Func_3_Action_2_T1_T2_T2_Action_2_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_A) + "() => Func`3<Action`3<T1, T2, T3>, T1, Action`3<T1, T2, T3>>")]
        public void L_Default_A_Func_3_Action_3_T1_T2_T3_T1_Action_3_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default2_A) + "() => Func`3<Action`3<T1, T2, T3>, T2, Action`3<T1, T2, T3>>")]
        public void L_Default2_A_Func_3_Action_3_T1_T2_T3_T2_Action_3_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default3_A) + "() => Func`3<Action`3<T1, T2, T3>, T3, Action`3<T1, T2, T3>>")]
        public void L_Default3_A_Func_3_Action_3_T1_T2_T3_T3_Action_3_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default3_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, T1, Action`4<T1, T2, T3, T4>>")]
        public void L_Default_A_Func_3_Action_4_T1_T2_T3_T4_T1_Action_4_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default2_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, T2, Action`4<T1, T2, T3, T4>>")]
        public void L_Default2_A_Func_3_Action_4_T1_T2_T3_T4_T2_Action_4_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default3_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, T3, Action`4<T1, T2, T3, T4>>")]
        public void L_Default3_A_Func_3_Action_4_T1_T2_T3_T4_T3_Action_4_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default3_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default4_A) + "() => Func`3<Action`4<T1, T2, T3, T4>, T4, Action`4<T1, T2, T3, T4>>")]
        public void L_Default4_A()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default4_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_F) + "() => Func`3<Func`2<T1, U>, T1, Func`2<T1, U>>")]
        public void L_Default_F_Func_3_Func_2_T1_U_T1_Func_2_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_F) + "() => Func`3<Func`3<T1, T2, U>, T1, Func`3<T1, T2, U>>")]
        public void L_Default_F_Func_3_Func_3_T1_T2_U_T1_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default2_F) + "() => Func`3<Func`3<T1, T2, U>, T2, Func`3<T1, T2, U>>")]
        public void L_Default2_F_Func_3_Func_3_T1_T2_U_T2_Func_3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_F) + "() => Func`3<Func`4<T1, T2, T3, U>, T1, Func`4<T1, T2, T3, U>>")]
        public void L_Default_F_Func_3_Func_4_T1_T2_T3_U_T1_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default2_F) + "() => Func`3<Func`4<T1, T2, T3, U>, T2, Func`4<T1, T2, T3, U>>")]
        public void L_Default2_F_Func_3_Func_4_T1_T2_T3_U_T2_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default3_F) + "() => Func`3<Func`4<T1, T2, T3, U>, T3, Func`4<T1, T2, T3, U>>")]
        public void L_Default3_F_Func_3_Func_4_T1_T2_T3_U_T3_Func_4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default3_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, T1, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Default_F_Func_3_Func_5_T1_T2_T3_T4_U_T1_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default2_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, T2, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Default2_F_Func_3_Func_5_T1_T2_T3_T4_U_T2_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default3_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, T3, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Default3_F_Func_3_Func_5_T1_T2_T3_T4_U_T3_Func_5_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default3_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default4_F) + "() => Func`3<Func`5<T1, T2, T3, T4, U>, T4, Func`5<T1, T2, T3, T4, U>>")]
        public void L_Default4_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default4_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.DataCaches))]
        public void DataCaches()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.DataCaches
         }
         
    }
    [Trait(Traits.TargetClass,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ComparableExt))]
   public partial class ComparableExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ComparableExt)+ "." + nameof(ComparableExt.IsEqualTo) + "(IComparable, IComparable) => Boolean")]
        public void IsEqualTo()
         {
            // TODO: Implement method test LCore.Extensions.ComparableExt.IsEqualTo
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ComparableExt)+ "." + nameof(ComparableExt.IsNotEqualTo) + "(IComparable, IComparable) => Boolean")]
        public void IsNotEqualTo()
         {
            // TODO: Implement method test LCore.Extensions.ComparableExt.IsNotEqualTo
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ComparableExt)+ "." + nameof(ComparableExt.IsLessThan) + "(IComparable, IComparable) => Boolean")]
        public void IsLessThan()
         {
            // TODO: Implement method test LCore.Extensions.ComparableExt.IsLessThan
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ComparableExt)+ "." + nameof(ComparableExt.IsLessThanOrEqual) + "(IComparable, IComparable) => Boolean")]
        public void IsLessThanOrEqual()
         {
            // TODO: Implement method test LCore.Extensions.ComparableExt.IsLessThanOrEqual
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ComparableExt)+ "." + nameof(ComparableExt.IsGreaterThan) + "(IComparable, IComparable) => Boolean")]
        public void IsGreaterThan()
         {
            // TODO: Implement method test LCore.Extensions.ComparableExt.IsGreaterThan
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ComparableExt)+ "." + nameof(ComparableExt.IsGreaterThanOrEqual) + "(IComparable, IComparable) => Boolean")]
        public void IsGreaterThanOrEqual()
         {
            // TODO: Implement method test LCore.Extensions.ComparableExt.IsGreaterThanOrEqual
         }
         
    }
    [Trait(Traits.TargetClass,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt))]
   public partial class ReflectionExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.CanBeNull) + "(ParameterInfo) => Boolean")]
        public void CanBeNull()
         {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.CanBeNull
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetAssembly) + "(MemberInfo) => Assembly")]
        public void GetAssembly()
         {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetAssembly
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetNamespace) + "(MemberInfo) => String")]
        public void GetNamespace()
         {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetNamespace
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetNestedNames) + "(Type) => String")]
        public void GetNestedNames()
         {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetNestedNames
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsExtensionMethod) + "(MethodInfo) => Boolean")]
        public void IsExtensionMethod()
         {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsExtensionMethod
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsOperator) + "(MethodInfo) => Boolean")]
        public void IsOperator()
         {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsOperator
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsStatic) + "(Type) => Boolean")]
        public void IsStatic()
         {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsStatic
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.NewRandom) + "(Type, Object, Object) => Object")]
        public void NewRandom()
         {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.NewRandom
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.ToParameterSignature) + "(MethodInfo) => String")]
        public void ToParameterSignature()
         {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.ToParameterSignature
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetGenericName) + "(Type) => String")]
        public void GetGenericName()
         {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetGenericName
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsPropertyGetterOrSetter) + "(MethodInfo) => Boolean")]
        public void IsPropertyGetterOrSetter()
         {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsPropertyGetterOrSetter
         }
         
    }
    [Trait(Traits.TargetClass,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt))]
   public partial class NumberExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.AddEach) + "(IEnumerable`1<Int32>, Int32) => List`1<Int32>")]
        public void AddEach()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Abs) + "(Int32) => UInt32")]
        public void Abs_Int32_UInt32()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Abs) + "(UInt32) => UInt32")]
        public void Abs_UInt32_UInt32()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Abs) + "(Int64) => UInt64")]
        public void Abs_Int64_UInt64()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Abs) + "(UInt64) => UInt64")]
        public void Abs_UInt64_UInt64()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Abs) + "(Int16) => UInt16")]
        public void Abs_Int16_UInt16()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Abs) + "(UInt16) => UInt16")]
        public void Abs_UInt16_UInt16()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Abs) + "(Double) => Double")]
        public void Abs_Double_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Abs) + "(Single) => Single")]
        public void Abs_Single_Single()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Abs) + "(SByte) => Byte")]
        public void Abs_SByte_Byte()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Abs) + "(Byte) => Byte")]
        public void Abs_Byte_Byte()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Abs) + "(Decimal) => Decimal")]
        public void Abs_Decimal_Decimal()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.AsPercent) + "(Single) => Int32")]
        public void AsPercent_Single_Int32()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.AsPercent) + "(Double) => Int32")]
        public void AsPercent_Double_Int32()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Average) + "(IEnumerable`1<Int32>) => Double")]
        public void Average_IEnumerable_1_Int32_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Average) + "(IEnumerable`1<UInt32>) => Double")]
        public void Average_IEnumerable_1_UInt32_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Average) + "(IEnumerable`1<Int64>) => Double")]
        public void Average_IEnumerable_1_Int64_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Average) + "(IEnumerable`1<UInt64>) => Double")]
        public void Average_IEnumerable_1_UInt64_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Average) + "(IEnumerable`1<Single>) => Double")]
        public void Average_IEnumerable_1_Single_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Average) + "(IEnumerable`1<Double>) => Double")]
        public void Average_IEnumerable_1_Double_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Floor) + "(Single) => Int32")]
        public void Floor_Single_Int32()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Floor) + "(Single, Int32) => Single")]
        public void Floor_Single_Int32_Single()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Floor) + "(Double) => Int64")]
        public void Floor_Double_Int64()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Floor) + "(Double, Int32) => Double")]
        public void Floor_Double_Int32_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.IsEven) + "(Int32) => Boolean")]
        public void IsEven_Int32_Boolean()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.IsEven) + "(Int64) => Boolean")]
        public void IsEven_Int64_Boolean()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.IsEven) + "(Int16) => Boolean")]
        public void IsEven_Int16_Boolean()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.IsEven) + "(UInt32) => Boolean")]
        public void IsEven_UInt32_Boolean()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.IsEven) + "(UInt64) => Boolean")]
        public void IsEven_UInt64_Boolean()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.IsEven) + "(Byte) => Boolean")]
        public void IsEven_Byte_Boolean()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.IsEven) + "(SByte) => Boolean")]
        public void IsEven_SByte_Boolean()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.PercentageOf) + "(Single, Single) => Int32")]
        public void PercentageOf_Single_Single_Int32()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.PercentageOf) + "(Double, Double) => Int32")]
        public void PercentageOf_Double_Double_Int32()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.PercentageOf) + "(Int32, Int32) => Int32")]
        public void PercentageOf_Int32_Int32_Int32()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.PercentageOf) + "(UInt32, UInt32) => Int32")]
        public void PercentageOf_UInt32_UInt32_Int32()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.PercentageOf) + "(Int16, Int16) => Int32")]
        public void PercentageOf_Int16_Int16_Int32()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.PercentageOf) + "(Int64, Int64) => Int32")]
        public void PercentageOf_Int64_Int64_Int32()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Pow) + "(Double, Double) => Double")]
        public void Pow_Double_Double_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Pow) + "(Int32, Double) => Double")]
        public void Pow_Int32_Double_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Pow) + "(UInt32, Double) => Double")]
        public void Pow_UInt32_Double_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Pow) + "(Int16, Double) => Double")]
        public void Pow_Int16_Double_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Pow) + "(UInt16, Double) => Double")]
        public void Pow_UInt16_Double_Double()
         {
            // TODO: Implement method test LCore.Extensions.NumberExt.Pow
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Pow) + "(Int64, Double) => Double")]
        public void Pow_Int64_Double_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Pow) + "(UInt64, Double) => Double")]
        public void Pow_UInt64_Double_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Pow) + "(SByte, Double) => Double")]
        public void Pow_SByte_Double_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Pow) + "(Byte, Double) => Double")]
        public void Pow_Byte_Double_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Round) + "(Single) => Int32")]
        public void Round_Single_Int32()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Round) + "(Single, Int32) => Single")]
        public void Round_Single_Int32_Single()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Round) + "(Double) => Int64")]
        public void Round_Double_Int64()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Round) + "(Double, Int32) => Double")]
        public void Round_Double_Int32_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Round) + "(Decimal) => Int64")]
        public void Round_Decimal_Int64()
         {
            // TODO: Implement method test LCore.Extensions.NumberExt.Round
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Round) + "(Decimal, Int32) => Double")]
        public void Round_Decimal_Int32_Double()
         {
            // TODO: Implement method test LCore.Extensions.NumberExt.Round
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sqrt) + "(Int32) => Double")]
        public void Sqrt_Int32_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sqrt) + "(Int64) => Double")]
        public void Sqrt_Int64_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sqrt) + "(Int16) => Double")]
        public void Sqrt_Int16_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sqrt) + "(Double) => Double")]
        public void Sqrt_Double_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sqrt) + "(Single) => Double")]
        public void Sqrt_Single_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sqrt) + "(UInt32) => Double")]
        public void Sqrt_UInt32_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sqrt) + "(UInt64) => Double")]
        public void Sqrt_UInt64_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sqrt) + "(UInt16) => Double")]
        public void Sqrt_UInt16_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sqrt) + "(Byte) => Double")]
        public void Sqrt_Byte_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sqrt) + "(SByte) => Double")]
        public void Sqrt_SByte_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sqrt) + "(Decimal) => Double")]
        public void Sqrt_Decimal_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.SubtractEach) + "(List`1<Int32>, Int32) => List`1<Int32>")]
        public void SubtractEach()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sum) + "(IEnumerable`1<Int32>) => Int32")]
        public void Sum_IEnumerable_1_Int32_Int32()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sum) + "(IEnumerable`1<UInt32>) => UInt32")]
        public void Sum_IEnumerable_1_UInt32_UInt32()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sum) + "(IEnumerable`1<Int64>) => Int64")]
        public void Sum_IEnumerable_1_Int64_Int64()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sum) + "(IEnumerable`1<UInt64>) => UInt64")]
        public void Sum_IEnumerable_1_UInt64_UInt64()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sum) + "(IEnumerable`1<Single>) => Single")]
        public void Sum_IEnumerable_1_Single_Single()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sum) + "(IEnumerable`1<Double>) => Double")]
        public void Sum_IEnumerable_1_Double_Double()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.To) + "(Int32, Int32) => Int32[]")]
        public void To_Int32_Int32_Int32()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.To) + "(UInt32, UInt32) => UInt32[]")]
        public void To_UInt32_UInt32_UInt32()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Wrap) + "(Nullable`1<T>) => Number")]
        public void Wrap_Nullable_1_T_Number()
         {
            // TODO: Implement method test LCore.Extensions.NumberExt.Wrap
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Wrap) + "(T) => Number")]
        public void Wrap_T_Number()
         {
            // TODO: Implement method test LCore.Extensions.NumberExt.Wrap
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Wrap) + "(String) => Number")]
        public void Wrap_String_Number()
         {
            // TODO: Implement method test LCore.Extensions.NumberExt.Wrap
         }
         
    }
    [Trait(Traits.TargetClass,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ConvertibleExt))]
   public partial class ConvertibleExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ConvertibleExt)+ "." + nameof(ConvertibleExt.CanConvertToString) + "(IConvertible) => Boolean")]
        public void CanConvertToString()
         {
            // TODO: Implement method test LCore.Extensions.ConvertibleExt.CanConvertToString
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ConvertibleExt)+ "." + nameof(ConvertibleExt.ConvertToString) + "(IConvertible) => String")]
        public void ConvertToString()
         {
            // TODO: Implement method test LCore.Extensions.ConvertibleExt.ConvertToString
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ConvertibleExt)+ "." + nameof(ConvertibleExt.TryConvertToString) + "(IConvertible) => IConvertible")]
        public void TryConvertToString()
         {
            // TODO: Implement method test LCore.Extensions.ConvertibleExt.TryConvertToString
         }
         
    }
    [Trait(Traits.TargetClass,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(global::LCore.Extensions.ObjectExt))]
   public partial class ObjectExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(global::LCore.Extensions.ObjectExt)+ "." + nameof(global::LCore.Extensions.ObjectExt.Objects_ToString) + "(IEnumerable`1<Object>) => String")]
        public void Objects_ToString()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(global::LCore.Extensions.ObjectExt)+ "." + nameof(global::LCore.Extensions.ObjectExt.Type) + "(T) => Type")]
        public void Type()
         {
            // Attribute Tests Implemented
         }
         
    }
    [Trait(Traits.TargetClass,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt))]
   public partial class BooleanExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.And) + "(IEnumerable`1<Func`1<Boolean>>) => Func`1<Boolean>")]
        public void And_IEnumerable_1_Func_1_Boolean_Func_1_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.BooleanExt.And
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.And) + "(IEnumerable`1<Func`2<T1, Boolean>>) => Func`2<T1, Boolean>")]
        public void And_IEnumerable_1_Func_2_T1_Boolean_Func_2_T1_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.BooleanExt.And
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.And) + "(IEnumerable`1<Func`3<T1, T2, Boolean>>) => Func`3<T1, T2, Boolean>")]
        public void And_IEnumerable_1_Func_3_T1_T2_Boolean_Func_3_T1_T2_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.BooleanExt.And
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.And) + "(IEnumerable`1<Func`4<T1, T2, T3, Boolean>>) => Func`4<T1, T2, T3, Boolean>")]
        public void And_IEnumerable_1_Func_4_T1_T2_T3_Boolean_Func_4_T1_T2_T3_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.BooleanExt.And
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.And) + "(IEnumerable`1<Func`5<T1, T2, T3, T4, Boolean>>) => Func`5<T1, T2, T3, T4, Boolean>")]
        public void And_IEnumerable_1_Func_5_T1_T2_T3_T4_Boolean_Func_5_T1_T2_T3_T4_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.BooleanExt.And
         }
         
    }
    [Trait(Traits.TargetClass,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt))]
   public partial class DictionaryExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.Flip) + "(Dictionary`2<TKey, TValue>) => Dictionary`2<TValue, TKey>")]
        public void Flip()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flip
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.SafeRemove) + "(Dictionary`2<TKey, TValue>, TKey)")]
        public void SafeRemove()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.SafeRemove
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable`1<Tuple`2<TKey, TValue>>) => Dictionary`2<TKey, List`1<TValue>>")]
        public void ToDictionary_IEnumerable_1_Tuple_2_TKey_TValue_Dictionary_2_TKey_List_1_TValue()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable`1<Tuple`3<TKey, TKey2, TValue>>) => Dictionary`2<TKey, Dictionary`2<TKey2, List`1<TValue>>>")]
        public void ToDictionary_IEnumerable_1_Tuple_3_TKey_TKey2_TValue_Dictionary_2_TKey_Dictionary_2_TKey2_List_1_TValue()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable`1<Tuple`4<TKey, TKey2, TKey3, TValue>>) => Dictionary`2<TKey, Dictionary`2<TKey2, Dictionary`2<TKey3, List`1<TValue>>>>")]
        public void ToDictionary_IEnumerable_1_Tuple_4_TKey_TKey2_TKey3_TValue_Dictionary_2_TKey_Dictionary_2_TKey2_Dictionary_2_TKey3_List_1_TValue()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable`1<Tuple`5<TKey, TKey2, TKey3, TKey4, TValue>>) => Dictionary`2<TKey, Dictionary`2<TKey2, Dictionary`2<TKey3, Dictionary`2<TKey4, List`1<TValue>>>>>")]
        public void ToDictionary_IEnumerable_1_Tuple_5_TKey_TKey2_TKey3_TKey4_TValue_Dictionary_2_TKey_Dictionary_2_TKey2_Dictionary_2_TKey3_Dictionary_2_TKey4_List_1_TValue()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable`1<Tuple`6<TKey, TKey2, TKey3, TKey4, TKey5, TValue>>) => Dictionary`2<TKey, Dictionary`2<TKey2, Dictionary`2<TKey3, Dictionary`2<TKey4, Dictionary`2<TKey5, List`1<TValue>>>>>>")]
        public void ToDictionary_IEnumerable_1_Tuple_6_TKey_TKey2_TKey3_TKey4_TKey5_TValue_Dictionary_2_TKey_Dictionary_2_TKey2_Dictionary_2_TKey3_Dictionary_2_TKey4_Dictionary_2_TKey5_List_1_TValue()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable`1<Tuple`7<TKey, TKey2, TKey3, TKey4, TKey5, TKey6, TValue>>) => Dictionary`2<TKey, Dictionary`2<TKey2, Dictionary`2<TKey3, Dictionary`2<TKey4, Dictionary`2<TKey5, Dictionary`2<TKey6, List`1<TValue>>>>>>>")]
        public void ToDictionary_IEnumerable_1_Tuple_7_TKey_TKey2_TKey3_TKey4_TKey5_TKey6_TValue_Dictionary_2_TKey_Dictionary_2_TKey2_Dictionary_2_TKey3_Dictionary_2_TKey4_Dictionary_2_TKey5_Dictionary_2_TKey6_List_1_TValue()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable`1<Tuple`8<TKey, TKey2, TKey3, TKey4, TKey5, TKey6, TKey7, TValue>>) => Dictionary`2<TKey, Dictionary`2<TKey2, Dictionary`2<TKey3, Dictionary`2<TKey4, Dictionary`2<TKey5, Dictionary`2<TKey6, Dictionary`2<TKey7, List`1<TValue>>>>>>>>")]
        public void ToDictionary_IEnumerable_1_Tuple_8_TKey_TKey2_TKey3_TKey4_TKey5_TKey6_TKey7_TValue_Dictionary_2_TKey_Dictionary_2_TKey2_Dictionary_2_TKey3_Dictionary_2_TKey4_Dictionary_2_TKey5_Dictionary_2_TKey6_Dictionary_2_TKey7_List_1_TValue()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
         }
         
    }
    [Trait(Traits.TargetClass,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(FileExt))]
   public partial class FileExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(FileExt)+ "." + nameof(FileExt.CleanFileName) + "(String) => String")]
        public void CleanFileName()
         {
            // TODO: Implement method test LCore.Extensions.FileExt.CleanFileName
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(FileExt)+ "." + nameof(FileExt.EveryOtherByte) + "(Byte[]) => Byte[]")]
        public void EveryOtherByte()
         {
            // TODO: Implement method test LCore.Extensions.FileExt.EveryOtherByte
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(FileExt)+ "." + nameof(FileExt.GetFileStream) + "(String) => FileStream")]
        public void GetFileStream()
         {
            // TODO: Implement method test LCore.Extensions.FileExt.GetFileStream
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(FileExt)+ "." + nameof(FileExt.GetStreamHash) + "(Stream) => Byte[]")]
        public void GetStreamHash()
         {
            // TODO: Implement method test LCore.Extensions.FileExt.GetStreamHash
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(FileExt)+ "." + nameof(FileExt.GetStringHash) + "(String) => Byte[]")]
        public void GetStringHash()
         {
            // TODO: Implement method test LCore.Extensions.FileExt.GetStringHash
         }
         
    }
    [Trait(Traits.TargetClass,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt))]
   public partial class StringExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Add) + "(String, Char[]) => String")]
        public void Add_String_Char_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Add) + "(String, IEnumerable`1<Char>) => String")]
        public void Add_String_IEnumerable_1_Char_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.After) + "(String, String) => String")]
        public void After()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.AfterLast) + "(String, String) => String")]
        public void AfterLast()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.AlignCenter) + "(String, Int32, Char) => String")]
        public void AlignCenter_String_Int32_Char_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.AlignCenter) + "(String, UInt32, Char) => String")]
        public void AlignCenter_String_UInt32_Char_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.AlignLeft) + "(String, Int32, Char) => String")]
        public void AlignLeft_String_Int32_Char_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.AlignLeft) + "(String, UInt32, Char) => String")]
        public void AlignLeft_String_UInt32_Char_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.AlignRight) + "(String, Int32, Char) => String")]
        public void AlignRight_String_Int32_Char_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.AlignRight) + "(String, UInt32, Char) => String")]
        public void AlignRight_String_UInt32_Char_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Before) + "(String, String) => String")]
        public void Before()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.BeforeLast) + "(String, String) => String")]
        public void BeforeLast()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.ByteArrayToString) + "(Byte[]) => String")]
        public void ByteArrayToString()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.CleanCrlf) + "(String) => String")]
        public void CleanCrlf()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.UnCleanCrlf) + "(String) => String")]
        public void UnCleanCrlf()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Combine) + "(IEnumerable`1<String>, String) => String")]
        public void Combine()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Concatenate) + "(String, Int32, String) => String")]
        public void Concatenate()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.ContainsAny) + "(String, IEnumerable`1<String>) => Boolean")]
        public void ContainsAny()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Count) + "(String, String) => UInt32")]
        public void Count()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Fill) + "(Char, Int32) => String")]
        public void Fill_Char_Int32_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Fill) + "(Char, UInt32) => String")]
        public void Fill_Char_UInt32_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.FirstCaps) + "(String) => String")]
        public void FirstCaps()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.FormatFileSize) + "(Int64, Int32) => String")]
        public void FormatFileSize_Int64_Int32_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.FormatFileSize) + "(Int32, Int32) => String")]
        public void FormatFileSize_Int32_Int32_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.HasMatch) + "(String, String[]) => Boolean")]
        public void HasMatch()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Humanize) + "(String) => String")]
        public void Humanize()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.IsEmpty) + "(String) => Boolean")]
        public void IsEmpty()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.IsNumber) + "(Char) => Boolean")]
        public void IsNumber()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.IsSymmetrical) + "(String, String, Double) => Boolean")]
        public void IsSymmetrical()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.JoinLines) + "(IEnumerable`1<String>, String) => String")]
        public void JoinLines()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Like) + "(String, String) => Boolean")]
        public void Like()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Lines) + "(String) => String[]")]
        public void Lines()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Pad) + "(String, Int32, Align, Char) => String")]
        public void Pad_String_Int32_Align_Char_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Pad) + "(String, UInt32, Align, Char) => String")]
        public void Pad_String_UInt32_Align_Char_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Pluralize) + "(String, Int32) => String")]
        public void Pluralize_String_Int32_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Pluralize) + "(String, UInt32) => String")]
        public void Pluralize_String_UInt32_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Pluralize) + "(String) => String")]
        public void Pluralize_String_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.RemoveAll) + "(String, String[]) => String")]
        public void RemoveAll()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.ReplaceAll) + "(String, String, String) => String")]
        public void ReplaceAll_String_String_String_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.ReplaceLineEndings) + "(String, String) => String")]
        public void ReplaceLineEndings()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Reverse) + "(String) => String")]
        public void Reverse()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Singularize) + "(String) => String")]
        public void Singularize()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Split) + "(String, String) => String[]")]
        public void Split()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.SplitWithQuotes) + "(String, Char) => List`1<String>")]
        public void SplitWithQuotes()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Sub) + "(String, Int32, Nullable`1<Int32>) => String")]
        public void Sub_String_Int32_Nullable_1_Int32_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Sub) + "(String, UInt32, Nullable`1<UInt32>) => String")]
        public void Sub_String_UInt32_Nullable_1_UInt32_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Surround) + "(String, String, String) => String")]
        public void Surround()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Symmetry) + "(String, String) => Double")]
        public void Symmetry()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Times) + "(String, Int32) => String")]
        public void Times_String_Int32_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Times) + "(String, UInt32) => String")]
        public void Times_String_UInt32_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Times) + "(Char, Int32) => String")]
        public void Times_Char_Int32_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Times) + "(Char, UInt32) => String")]
        public void Times_Char_UInt32_String()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.ToByteArray) + "(String) => Byte[]")]
        public void ToByteArray()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.ToHexString) + "(Byte[]) => String")]
        public void ToHexString()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.ToUrlSlug) + "(String) => String")]
        public void ToUrlSlug()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Trim) + "(String, String) => String")]
        public void Trim()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.TrimEnd) + "(String, String) => String")]
        public void TrimEnd()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.TrimStart) + "(String, String) => String")]
        public void TrimStart()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Words) + "(String) => String[]")]
        public void Words()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.XmlClean) + "(String) => String")]
        public void XmlClean()
         {
            // Attribute Tests Implemented
         }
         
    }
    [Trait(Traits.TargetClass,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt))]
   public partial class EnumerableExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Sum) + "(IEnumerable`1<T>, Func`2<T, U>) => UInt32")]
        public void Sum()
         {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Sum
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.While) + "(IEnumerable, Func`2<T, Boolean>) => Boolean")]
        public void While_IEnumerable_Func_2_T_Boolean_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.While) + "(IEnumerable, Func`3<Int32, T, Boolean>) => Boolean")]
        public void While_IEnumerable_Func_3_Int32_T_Boolean_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.While) + "(IEnumerable`1<T>, Func`2<T, Boolean>) => Boolean")]
        public void While_IEnumerable_1_T_Func_2_T_Boolean_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.While) + "(IEnumerable`1<T>, Func`3<Int32, T, Boolean>) => Boolean")]
        public void While_IEnumerable_1_T_Func_3_Int32_T_Boolean_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.While) + "(Action`1<T>, Func`1<Boolean>, IEnumerable`1<T>)")]
        public void While_Action_1_T_Func_1_Boolean_IEnumerable_1_T()
         {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Collect) + "(IEnumerable, Func`2<T, T>) => List`1<T>")]
        public void Collect_IEnumerable_Func_2_T_T_List_1_T()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Collect) + "(IEnumerable`1<T>, Func`2<T, T>) => List`1<T>")]
        public void Collect_IEnumerable_1_T_Func_2_T_T_List_1_T()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Collect) + "(T[], Func`2<T, T>) => T[]")]
        public void Collect_T_Func_2_T_T_T()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Collect) + "(List`1<T>, Func`2<T, T>) => List`1<T>")]
        public void Collect_List_1_T_Func_2_T_T_List_1_T()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Collect) + "(IEnumerable, Func`3<Int32, Object, Object>) => List`1<Object>")]
        public void Collect_IEnumerable_Func_3_Int32_Object_Object_List_1_Object()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Collect) + "(IEnumerable, Func`3<Int32, T, T>) => List`1<T>")]
        public void Collect_IEnumerable_Func_3_Int32_T_T_List_1_T()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Collect) + "(IEnumerable`1<T>, Func`3<Int32, T, T>) => List`1<T>")]
        public void Collect_IEnumerable_1_T_Func_3_Int32_T_T_List_1_T()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Collect) + "(T[], Func`3<Int32, T, T>) => T[]")]
        public void Collect_T_Func_3_Int32_T_T_T()
         {
            // Attribute Tests Implemented
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Collect) + "(List`1<T>, Func`3<Int32, T, T>) => List`1<T>")]
        public void Collect_List_1_T_Func_3_Int32_T_T_List_1_T()
         {
            // Attribute Tests Implemented
         }
         
    }
}
