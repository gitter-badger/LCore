/*
Covering Assembly: L

Cover application using naming conventions.

LUnit has Autogenerated 17 Classes and 449 Methods:
*/
using JetBrains.Annotations;
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.Extensions;
using LCore.Numbers;
using LCore.Tools;

namespace L_Tests.LCore.Tools
{
    public partial class GitHubMarkdownTester : XUnitOutputTester, IDisposable
    {
        public GitHubMarkdownTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.BlankLine) + "()")]
        public void BlankLine()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.BlankLine
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.HorizontalRule) + "()")]
        public void HorizontalRule()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.HorizontalRule
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Header) + "(String, Int32)")]
        public void Header()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Header
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.HeaderUnderline) + "(String, Int32)")]
        public void HeaderUnderline()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.HeaderUnderline
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.OrderedList) + "(String[])")]
        public void OrderedList_String()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.OrderedList
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.OrderedList) + "(Tuple[]<UInt32, String>)")]
        public void OrderedList_Tuple_UInt32_String()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.OrderedList
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.OrderedList) + "(Set[]<UInt32, String>)")]
        public void OrderedList_Set_UInt32_String()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.OrderedList
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.UnorderedList) + "(String[])")]
        public void UnorderedList_String()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.UnorderedList
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.UnorderedList) + "(Tuple[]<UInt32, String>)")]
        public void UnorderedList_Tuple_UInt32_String()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.UnorderedList
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.UnorderedList) + "(Set[]<UInt32, String>)")]
        public void UnorderedList_Set_UInt32_String()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.UnorderedList
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Code) + "(String[], String)")]
        public void Code()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Code
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Table) + "(String[,], Boolean)")]
        public void Table_String_Boolean()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Table
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Table) + "(IEnumerable<IEnumerable<String>>, Boolean)")]
        public void Table_IEnumerable_IEnumerable_String_Boolean()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Table
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.BlockQuote) + "(String[])")]
        public void BlockQuote()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.BlockQuote
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Lines) + "(String[])")]
        public void Lines()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Lines
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Line) + "(String)")]
        public void Line()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Line
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Strikethrough) + "(String) => String")]
        public void Strikethrough()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Strikethrough
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Highlight) + "(String) => String")]
        public void Highlight()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Highlight
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Link) + "(String, String, String) => String")]
        public void Link()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Link
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Image) + "(String, String) => String")]
        public void Image()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Image
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.InlineCode) + "(String) => String")]
        public void InlineCode()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.InlineCode
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Italic) + "(String) => String")]
        public void Italic()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Italic
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Bold) + "(String) => String")]
        public void Bold()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Bold
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Tools)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Glyph) + "(GlyphIcon) => String")]
        public void Glyph()
         {
            // TODO: Implement method test LCore.Tools.GitHubMarkdown.Glyph
         }
         
    }
    public partial class Lists_T1_T2_Tester : XUnitOutputTester, IDisposable
    {
        public Lists_T1_T2_Tester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Tools.Lists<T1, T2>.Add(T1, T2)")]
        public void Add()
         {
            // TODO: Implement method test LCore.Tools.Lists<T1, T2>.Add
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Tools.Lists<T1, T2>.Set(Int32, T1, T2)")]
        public void Set()
         {
            // TODO: Implement method test LCore.Tools.Lists<T1, T2>.Set
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Tools.Lists<T1, T2>.Set1(Int32, T1)")]
        public void Set1()
         {
            // TODO: Implement method test LCore.Tools.Lists<T1, T2>.Set1
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Tools.Lists<T1, T2>.Set2(Int32, T2)")]
        public void Set2()
         {
            // TODO: Implement method test LCore.Tools.Lists<T1, T2>.Set2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Tools.Lists<T1, T2>.GetAt(Int32) => Set<T1, T2>")]
        public void GetAt()
         {
            // TODO: Implement method test LCore.Tools.Lists<T1, T2>.GetAt
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Tools.Lists<T1, T2>.RemoveAt(Int32)")]
        public void RemoveAt()
         {
            // TODO: Implement method test LCore.Tools.Lists<T1, T2>.RemoveAt
         }
         
    }
    public partial class Set_T1_T2_Tester : XUnitOutputTester, IDisposable
    {
        public Set_T1_T2_Tester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Tools.Set<T1, T2>.Equals(Object) => Boolean")]
        public void Equals_Object_Boolean()
         {
            // TODO: Implement method test LCore.Tools.Set<T1, T2>.Equals
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Tools.Set<T1, T2>.op_Equality(Set<T1, T2>, Set<T1, T2>) => Boolean")]
        public void op_Equality()
         {
            // TODO: Implement method test LCore.Tools.Set<T1, T2>.op_Equality
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Tools.Set<T1, T2>.op_Inequality(Set<T1, T2>, Set<T1, T2>) => Boolean")]
        public void op_Inequality()
         {
            // TODO: Implement method test LCore.Tools.Set<T1, T2>.op_Inequality
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Tools.Set<T1, T2>.op_Implicit(Set<T1, T2>) => Tuple<T1, T2>")]
        public void op_Implicit_Set_T1_T2_Tuple_T1_T2()
         {
            // TODO: Implement method test LCore.Tools.Set<T1, T2>.op_Implicit
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Tools.Set<T1, T2>.op_Implicit(Tuple<T1, T2>) => Set<T1, T2>")]
        public void op_Implicit_Tuple_T1_T2_Set_T1_T2()
         {
            // TODO: Implement method test LCore.Tools.Set<T1, T2>.op_Implicit
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Tools.Set<T1, T2>.GetHashCode() => Int32")]
        public new void GetHashCode()
         {
            // TODO: Implement method test LCore.Tools.Set<T1, T2>.GetHashCode
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Tools.Set<T1, T2>.Equals(Set<T1, T2>) => Boolean")]
        public void Equals_Set_T1_T2_Boolean()
         {
            // TODO: Implement method test LCore.Tools.Set<T1, T2>.Equals
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Tools.Set<T1, T2>.ToString() => String")]
        public new void ToString()
         {
            // TODO: Implement method test LCore.Tools.Set<T1, T2>.ToString
         }
         
    }
}

namespace L_Tests.LCore.Numbers
{
    public partial class Number_T_U_Tester : XUnitOutputTester, IDisposable
    {
        public Number_T_U_Tester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T, U>.op_Implicit(Number<T, U>) => T")]
        public void op_Implicit()
         {
            // TODO: Implement method test LCore.Numbers.Number<T, U>.op_Implicit
         }
         
    }
    public partial class Number_T_Tester : XUnitOutputTester, IDisposable
    {
        public Number_T_Tester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.op_Division(Number<T>, T) => Number")]
        public void op_Division()
         {
            // TODO: Implement method test LCore.Numbers.Number<T>.op_Division
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.op_Multiply(Number<T>, T) => Number")]
        public void op_Multiply()
         {
            // TODO: Implement method test LCore.Numbers.Number<T>.op_Multiply
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.op_Subtraction(Number<T>, T) => Number")]
        public void op_Subtraction()
         {
            // TODO: Implement method test LCore.Numbers.Number<T>.op_Subtraction
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.op_Addition(Number<T>, T) => Number")]
        public void op_Addition()
         {
            // TODO: Implement method test LCore.Numbers.Number<T>.op_Addition
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Add(Number) => Number")]
        public void Add_Number_Number()
         {
            // TODO: Implement method test LCore.Numbers.Number<T>.Add
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Subtract(Number) => Number")]
        public void Subtract_Number_Number()
         {
            // TODO: Implement method test LCore.Numbers.Number<T>.Subtract
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Multiply(Number) => Number")]
        public void Multiply_Number_Number()
         {
            // TODO: Implement method test LCore.Numbers.Number<T>.Multiply
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Divide(Number) => Number")]
        public void Divide_Number_Number()
         {
            // TODO: Implement method test LCore.Numbers.Number<T>.Divide
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.New(T) => Number<T>")]
        public void New_T_Number_T()
         {
            // TODO: Implement method test LCore.Numbers.Number<T>.New
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.New(Object) => Number")]
        public void New_Object_Number()
         {
            // TODO: Implement method test LCore.Numbers.Number<T>.New
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.GetValue() => Object")]
        public void GetValue()
         {
            // TODO: Implement method test LCore.Numbers.Number<T>.GetValue
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Add(IConvertible) => Number")]
        public void Add_IConvertible_Number()
         {
            // TODO: Implement method test LCore.Numbers.Number<T>.Add
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Subtract(IConvertible) => Number")]
        public void Subtract_IConvertible_Number()
         {
            // TODO: Implement method test LCore.Numbers.Number<T>.Subtract
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Multiply(IConvertible) => Number")]
        public void Multiply_IConvertible_Number()
         {
            // TODO: Implement method test LCore.Numbers.Number<T>.Multiply
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Divide(IConvertible) => Number")]
        public void Divide_IConvertible_Number()
         {
            // TODO: Implement method test LCore.Numbers.Number<T>.Divide
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Add(T, T) => T")]
        public void Add_T_T_T()
         {
            // TODO: Implement method test LCore.Numbers.Number<T>.Add
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Subtract(T, T) => T")]
        public void Subtract_T_T_T()
         {
            // TODO: Implement method test LCore.Numbers.Number<T>.Subtract
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Multiply(T, T) => T")]
        public void Multiply_T_T_T()
         {
            // TODO: Implement method test LCore.Numbers.Number<T>.Multiply
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Divide(T, T) => Object")]
        public void Divide_T_T_Object()
         {
            // TODO: Implement method test LCore.Numbers.Number<T>.Divide
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.New() => Number")]
        public void New_Number()
         {
            // TODO: Implement method test LCore.Numbers.Number<T>.New
         }
         
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.CompareTo(Object) => Int32")]
        public void CompareTo()
         {
            // TODO: Implement method test LCore.Numbers.Number<T>.CompareTo
         }
         
    }
}

namespace L_Tests.LCore.Extensions
{
   public partial class L_RefTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Ref)+ "." + nameof(L.Ref.Constant) + "(String) => FieldInfo")]
        public void Constant()
         {
            // TODO: Implement method test LCore.Extensions.L.Ref.Constant
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Ref)+ "." + nameof(L.Ref.Event) + "(String) => EventInfo")]
        public void Event()
         {
            // TODO: Implement method test LCore.Extensions.L.Ref.Event
         }
         
    }
    public partial class L_LoopTester : XUnitOutputTester, IDisposable
    {
        public L_LoopTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.While_T) + "() => Func<Action<T1>, Func<T1, Boolean>, Action<T1>>")]
        public void While_T_Func_Action_T1_Func_T1_Boolean_Action_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.While_T
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.While_T) + "() => Func<Action<T1, T2>, Func<T1, T2, Boolean>, Action<T1, T2>>")]
        public void While_T_Func_Action_T1_T2_Func_T1_T2_Boolean_Action_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.While_T
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.While_T) + "() => Func<Action<T1, T2, T3>, Func<T1, T2, T3, Boolean>, Action<T1, T2, T3>>")]
        public void While_T_Func_Action_T1_T2_T3_Func_T1_T2_T3_Boolean_Action_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.While_T
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.While_T) + "() => Func<Action<T1, T2, T3, T4>, Func<T1, T2, T3, T4, Boolean>, Action<T1, T2, T3, T4>>")]
        public void While_T_Func_Action_T1_T2_T3_T4_Func_T1_T2_T3_T4_Boolean_Action_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.While_T
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_DoWhile) + "() => Func<Action, Func<Boolean>, Action>")]
        public void L_DoWhile()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_DoWhile
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Until) + "() => Func<Func<U>, Func<Boolean>, Func<U>>")]
        public void L_Until()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Until
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_DoUntil) + "() => Func<Func<U>, Func<Boolean>, Func<U>>")]
        public void L_DoUntil()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_DoUntil
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Repeat_uint) + "() => Func<Action, UInt32, Action>")]
        public void L_Repeat_uint()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Repeat_uint
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Repeat_int) + "() => Func<Action, Int32, Action>")]
        public void L_Repeat_int()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Repeat_int
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.WhileI_T) + "() => Func<Action<Int32, T1>, Func<Int32, T1, Boolean>, Action<T1>>")]
        public void WhileI_T_Func_Action_Int32_T1_Func_Int32_T1_Boolean_Action_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.WhileI_T
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.WhileI_T) + "() => Func<Action<Int32, T1, T2>, Func<Int32, T1, T2, Boolean>, Action<T1, T2>>")]
        public void WhileI_T_Func_Action_Int32_T1_T2_Func_Int32_T1_T2_Boolean_Action_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.WhileI_T
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.WhileI_T) + "() => Func<Action<Int32, T1, T2, T3>, Func<Int32, T1, T2, T3, Boolean>, Action<T1, T2, T3>>")]
        public void WhileI_T_Func_Action_Int32_T1_T2_T3_Func_Int32_T1_T2_T3_Boolean_Action_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.WhileI_T
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.Until) + "() => Func<Func<Int32, U>, Func<Int32, Boolean>, Func<U>>")]
        public void Until_Func_Func_Int32_U_Func_Int32_Boolean_Func_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.Until
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.Until) + "() => Func<Func<Int32, T1, U>, Func<Int32, T1, Boolean>, Func<T1, U>>")]
        public void Until_Func_Func_Int32_T1_U_Func_Int32_T1_Boolean_Func_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.Until
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.Until) + "() => Func<Func<Int32, T1, T2, U>, Func<Int32, T1, T2, Boolean>, Func<T1, T2, U>>")]
        public void Until_Func_Func_Int32_T1_T2_U_Func_Int32_T1_T2_Boolean_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.Until
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.Until) + "() => Func<Func<Int32, T1, T2, T3, U>, Func<Int32, T1, T2, T3, Boolean>, Func<T1, T2, T3, U>>")]
        public void Until_Func_Func_Int32_T1_T2_T3_U_Func_Int32_T1_T2_T3_Boolean_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.Until
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoWhile) + "() => Func<Action<Int32>, Func<Int32, Boolean>, Action>")]
        public void DoWhile_Func_Action_Int32_Func_Int32_Boolean_Action()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoWhile
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoWhile) + "() => Func<Action<Int32, T1>, Func<Int32, T1, Boolean>, Action<T1>>")]
        public void DoWhile_Func_Action_Int32_T1_Func_Int32_T1_Boolean_Action_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoWhile
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoWhile) + "() => Func<Action<Int32, T1, T2>, Func<Int32, T1, T2, Boolean>, Action<T1, T2>>")]
        public void DoWhile_Func_Action_Int32_T1_T2_Func_Int32_T1_T2_Boolean_Action_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoWhile
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoWhile) + "() => Func<Action<Int32, T1, T2, T3>, Func<Int32, T1, T2, T3, Boolean>, Action<T1, T2, T3>>")]
        public void DoWhile_Func_Action_Int32_T1_T2_T3_Func_Int32_T1_T2_T3_Boolean_Action_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoWhile
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoUntil) + "() => Func<Func<Int32, U>, Func<Int32, Boolean>, Func<U>>")]
        public void DoUntil_Func_Func_Int32_U_Func_Int32_Boolean_Func_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoUntil
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoUntil) + "() => Func<Func<Int32, T1, U>, Func<Int32, T1, Boolean>, Func<T1, U>>")]
        public void DoUntil_Func_Func_Int32_T1_U_Func_Int32_T1_Boolean_Func_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoUntil
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoUntil) + "() => Func<Func<Int32, T1, T2, U>, Func<Int32, T1, T2, Boolean>, Func<T1, T2, U>>")]
        public void DoUntil_Func_Func_Int32_T1_T2_U_Func_Int32_T1_T2_Boolean_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoUntil
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoUntil) + "() => Func<Func<Int32, T1, T2, T3, U>, Func<Int32, T1, T2, T3, Boolean>, Func<T1, T2, T3, U>>")]
        public void DoUntil_Func_Func_Int32_T1_T2_T3_U_Func_Int32_T1_T2_T3_Boolean_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoUntil
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Collect) + "() => Func<Func<U>, UInt32, Func<List<U>>>")]
        public void L_Collect_Func_Func_U_UInt32_Func_List_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Collect
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Collect) + "() => Func<Func<T1, U>, UInt32, Func<T1, List<U>>>")]
        public void L_Collect_Func_Func_T1_U_UInt32_Func_T1_List_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Collect
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Collect) + "() => Func<Func<T1, T2, U>, UInt32, Func<T1, T2, List<U>>>")]
        public void L_Collect_Func_Func_T1_T2_U_UInt32_Func_T1_T2_List_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Collect
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Collect) + "() => Func<Func<T1, T2, T3, U>, UInt32, Func<T1, T2, T3, List<U>>>")]
        public void L_Collect_Func_Func_T1_T2_T3_U_UInt32_Func_T1_T2_T3_List_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Collect
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Collect) + "() => Func<Func<T1, T2, T3, T4, U>, UInt32, Func<T1, T2, T3, T4, List<U>>>")]
        public void L_Collect_Func_Func_T1_T2_T3_T4_U_UInt32_Func_T1_T2_T3_T4_List_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Collect
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_MergeLoop) + "() => Func<Action, Func<Int32, Boolean>>")]
        public void L_MergeLoop_Func_Action_Func_Int32_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_MergeLoop
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_MergeLoop) + "() => Func<Action<T1>, Func<Int32, T1, Boolean>>")]
        public void L_MergeLoop_Func_Action_T1_Func_Int32_T1_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_MergeLoop
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_MergeLoop) + "() => Func<Action<T1, T2>, Func<Int32, T1, T2, Boolean>>")]
        public void L_MergeLoop_Func_Action_T1_T2_Func_Int32_T1_T2_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_MergeLoop
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_MergeLoop) + "() => Func<Action<T1, T2, T3>, Func<Int32, T1, T2, T3, Boolean>>")]
        public void L_MergeLoop_Func_Action_T1_T2_T3_Func_Int32_T1_T2_T3_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_MergeLoop
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_To) + "() => Func<Int32, Int32, Action, Action>")]
        public void L_To()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_To
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_ToI) + "() => Func<Int32, Int32, Action<Int32>, Action>")]
        public void L_ToI()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_ToI
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_For) + "() => Func<Int32, Int32, Func<Int32, Boolean>, Action>")]
        public void L_For()
         {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_For
         }
         
    }
    public partial class L_BoolTester : XUnitOutputTester, IDisposable
    {
        public L_BoolTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_A) + "() => Func<Func<Boolean>, Action, Func<Boolean>>")]
        public void L_If_A_Func_Func_Boolean_Action_Func_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_A) + "() => Func<Func<T1, Boolean>, Action<T1>, Func<T1, Boolean>>")]
        public void L_If_A_Func_Func_T1_Boolean_Action_T1_Func_T1_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_A) + "() => Func<Func<T1, T2, Boolean>, Action<T1, T2>, Func<T1, T2, Boolean>>")]
        public void L_If_A_Func_Func_T1_T2_Boolean_Action_T1_T2_Func_T1_T2_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_A) + "() => Func<Func<T1, T2, T3, Boolean>, Action<T1, T2, T3>, Func<T1, T2, T3, Boolean>>")]
        public void L_If_A_Func_Func_T1_T2_T3_Boolean_Action_T1_T2_T3_Func_T1_T2_T3_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_A) + "() => Func<Func<T1, T2, T3, T4, Boolean>, Action<T1, T2, T3, T4>, Func<T1, T2, T3, T4, Boolean>>")]
        public void L_If_A_Func_Func_T1_T2_T3_T4_Boolean_Action_T1_T2_T3_T4_Func_T1_T2_T3_T4_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_F) + "() => Func<Func<Boolean>, Func<U>, Func<U>>")]
        public void L_If_F_Func_Func_Boolean_Func_U_Func_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_F) + "() => Func<Func<T1, Boolean>, Func<T1, U>, Func<T1, U>>")]
        public void L_If_F_Func_Func_T1_Boolean_Func_T1_U_Func_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_F) + "() => Func<Func<T1, T2, Boolean>, Func<T1, T2, U>, Func<T1, T2, U>>")]
        public void L_If_F_Func_Func_T1_T2_Boolean_Func_T1_T2_U_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_F) + "() => Func<Func<T1, T2, T3, Boolean>, Func<T1, T2, T3, U>, Func<T1, T2, T3, U>>")]
        public void L_If_F_Func_Func_T1_T2_T3_Boolean_Func_T1_T2_T3_U_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_F) + "() => Func<Func<T1, T2, T3, T4, Boolean>, Func<T1, T2, T3, T4, U>, Func<T1, T2, T3, T4, U>>")]
        public void L_If_F_Func_Func_T1_T2_T3_T4_Boolean_Func_T1_T2_T3_T4_U_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_IfElse) + "() => Func<Func<Boolean>, Action, Action, Action>")]
        public void L_IfElse_Func_Func_Boolean_Action_Action_Action()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_IfElse
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_IfElse) + "() => Func<Func<T1, Boolean>, Action<T1>, Action<T1>, Action<T1>>")]
        public void L_IfElse_Func_Func_T1_Boolean_Action_T1_Action_T1_Action_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_IfElse
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_IfElse) + "() => Func<Func<T1, T2, Boolean>, Action<T1, T2>, Action<T1, T2>, Action<T1, T2>>")]
        public void L_IfElse_Func_Func_T1_T2_Boolean_Action_T1_T2_Action_T1_T2_Action_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_IfElse
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_IfElse) + "() => Func<Func<T1, T2, T3, Boolean>, Action<T1, T2, T3>, Action<T1, T2, T3>, Action<T1, T2, T3>>")]
        public void L_IfElse_Func_Func_T1_T2_T3_Boolean_Action_T1_T2_T3_Action_T1_T2_T3_Action_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_IfElse
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_IfElse) + "() => Func<Func<T1, T2, T3, T4, Boolean>, Action<T1, T2, T3, T4>, Action<T1, T2, T3, T4>, Action<T1, T2, T3, T4>>")]
        public void L_IfElse_Func_Func_T1_T2_T3_T4_Boolean_Action_T1_T2_T3_T4_Action_T1_T2_T3_T4_Action_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_IfElse
         }
         
    }
    public partial class L_FileTester : XUnitOutputTester, IDisposable
    {
        public L_FileTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.File)+ "." + nameof(L.File.BufferedMove) + "(String, String, Boolean, Int32)")]
        public void BufferedMove()
         {
            // TODO: Implement method test LCore.Extensions.L.File.BufferedMove
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.File)+ "." + nameof(L.File.CombinePaths) + "(String[]) => String")]
        public void CombinePaths_String_String()
         {
            // TODO: Implement method test LCore.Extensions.L.File.CombinePaths
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.File)+ "." + nameof(L.File.CombinePaths) + "(Char, String[]) => String")]
        public void CombinePaths_Char_String_String()
         {
            // TODO: Implement method test LCore.Extensions.L.File.CombinePaths
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.File)+ "." + nameof(L.File.GetFileContents) + "(String) => Byte[]")]
        public void GetFileContents()
         {
            // TODO: Implement method test LCore.Extensions.L.File.GetFileContents
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.File)+ "." + nameof(L.File.SafeCopyFile) + "(String, String, Int32, Boolean) => Boolean")]
        public void SafeCopyFile()
         {
            // TODO: Implement method test LCore.Extensions.L.File.SafeCopyFile
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.File)+ "." + nameof(L.File.SafeMoveFile) + "(String, String, Int32, Boolean, Boolean) => Boolean")]
        public void SafeMoveFile()
         {
            // TODO: Implement method test LCore.Extensions.L.File.SafeMoveFile
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.File)+ "." + nameof(L.File.BufferedMoveProgress))]
        public void BufferedMoveProgress()
         {
            // TODO: Implement method test LCore.Extensions.L.File.BufferedMoveProgress
         }
         
    }
   public partial class L_StrTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Str)+ "." + nameof(L.Str.NumericalCompare) + "(String, String) => Int32")]
        public void NumericalCompare()
         {
            // TODO: Implement method test LCore.Extensions.L.Str.NumericalCompare
         }
         
    }
    public partial class L_LogicTester : XUnitOutputTester, IDisposable
    {
        public L_LogicTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.New) + "() => Func<T1, T2, U>")]
        public void New_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.New) + "() => Func<T1, T2, T3, U>")]
        public void New_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.New) + "() => Func<T1, T2, T3, T4, U>")]
        public void New_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<U>")]
        public void Do_Func_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, U>")]
        public void Do_Func_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, U>")]
        public void Do_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, U>")]
        public void Do_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, U>")]
        public void Do_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, U>")]
        public void Do_Func_T1_T2_T3_T4_T5_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, T6, U>")]
        public void Do_Func_T1_T2_T3_T4_T5_T6_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, T6, T7, U>")]
        public void Do_Func_T1_T2_T3_T4_T5_T6_T7_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, T6, T7, T8, U>")]
        public void Do_Func_T1_T2_T3_T4_T5_T6_T7_T8_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, U>")]
        public void Do_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, U>")]
        public void Do_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, U>")]
        public void Do_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, U>")]
        public void Do_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, U>")]
        public void Do_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, U>")]
        public void Do_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, U>")]
        public void Do_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, U>")]
        public void Do_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_T14_T15_T16_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Return) + "() => Func<U>")]
        public void Return_Func_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Return
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Return) + "(U) => Func<U>")]
        public void Return_U_Func_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Return
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Pass) + "() => Func<T1, T1>")]
        public void Pass()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Pass
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.New) + "(Object[]) => Func<U>")]
        public void New_Object_Func_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.New) + "() => Func<U>")]
        public void New_Func_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.New) + "() => Func<T1, U>")]
        public void New_Func_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F2) + "() => Func<Func<T1, T2, T3, T4, U>, Func[]<T1, T2, U>, Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_F2_Func_Func_T1_T2_T3_T4_U_Func_T1_T2_U_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F3) + "() => Func<Func<T1, T2, T3, T4, U>, Func[]<T1, U>, Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_F3_Func_Func_T1_T2_T3_T4_U_Func_T1_U_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F4) + "() => Func<Func<T1, T2, T3, T4, U>, Func[]<U>, Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_F4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F4
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge) + "() => Func<Action, Action, Action>")]
        public void L_Merge()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_A_F) + "() => Func<Action, Func<U>, Func<U>>")]
        public void L_Merge_A_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_A_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_A) + "() => Func<Func<U>, Action, Func<U>>")]
        public void L_Merge_F_A()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_A1) + "() => Func<Func<U>, Action<T1>, Func<T1, U>>")]
        public void L_Merge_F_A1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A1
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_A2) + "() => Func<Func<U>, Action<T1, T2>, Func<T1, T2, U>>")]
        public void L_Merge_F_A2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_A3) + "() => Func<Func<U>, Action<T1, T2, T3>, Func<T1, T2, T3, U>>")]
        public void L_Merge_F_A3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_A4) + "() => Func<Func<U>, Action<T1, T2, T3, T4>, Func<T1, T2, T3, T4, U>>")]
        public void L_Merge_F_A4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A4
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_A) + "() => Func<Func<T1, U>, Action, Func<T1, U>>")]
        public void L_Merge_F1_A()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_A1) + "() => Func<Func<T1, U>, Action<T2>, Func<T1, T2, U>>")]
        public void L_Merge_F1_A1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_A1
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_A2) + "() => Func<Func<T1, U>, Action<T2, T3>, Func<T1, T2, T3, U>>")]
        public void L_Merge_F1_A2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_A3) + "() => Func<Func<T1, U>, Action<T2, T3, T4>, Func<T1, T2, T3, T4, U>>")]
        public void L_Merge_F1_A3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_A3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F2_A) + "() => Func<Func<T1, T2, U>, Action, Func<T1, T2, U>>")]
        public void L_Merge_F2_A()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F2_A1) + "() => Func<Func<T1, T2, U>, Action<T3>, Func<T1, T2, T3, U>>")]
        public void L_Merge_F2_A1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_A1
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F2_A2) + "() => Func<Func<T1, T2, U>, Action<T3, T4>, Func<T1, T2, T3, T4, U>>")]
        public void L_Merge_F2_A2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F3_A) + "() => Func<Func<T1, T2, T3, U>, Action, Func<T1, T2, T3, U>>")]
        public void L_Merge_F3_A_Func_Func_T1_T2_T3_U_Action_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F3_A1) + "() => Func<Func<T1, T2, T3, U>, Action<T4>, Func<T1, T2, T3, T4, U>>")]
        public void L_Merge_F3_A1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_A1
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F3_A) + "() => Func<Func<T1, T2, T3, T4, U>, Action, Func<T1, T2, T3, T4, U>>")]
        public void L_Merge_F3_A_Func_Func_T1_T2_T3_T4_U_Action_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_F) + "() => Func<Func<U>, Func<U>, Func<U>>")]
        public void L_Merge_F_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_F1) + "() => Func<Func<U>, Func<T1, U>, Func<T1, U>>")]
        public void L_Merge_F_F1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F1
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_F2) + "() => Func<Func<U>, Func<T1, T2, U>, Func<T1, T2, U>>")]
        public void L_Merge_F_F2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_F3) + "() => Func<Func<U>, Func<T1, T2, T3, U>, Func<T1, T2, T3, U>>")]
        public void L_Merge_F_F3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_F4) + "() => Func<Func<U>, Func<T1, T2, T3, T4, U>, Func<T1, T2, T3, T4, U>>")]
        public void L_Merge_F_F4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F4
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_F) + "() => Func<Func<T1, U>, Func<U>, Func<T1, U>>")]
        public void L_Merge_F1_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_F1) + "() => Func<Func<T1, U>, Func<T3, U>, Func<T1, T3, U>>")]
        public void L_Merge_F1_F1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_F1
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_F2) + "() => Func<Func<T1, U>, Func<T3, T4, U>, Func<T1, T3, T4, U>>")]
        public void L_Merge_F1_F2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_F3) + "() => Func<Func<T1, U>, Func<T2, T3, T4, U>, Func<T1, T2, T3, T4, U>>")]
        public void L_Merge_F1_F3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_F3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F2_F) + "() => Func<Func<T1, T2, U>, Func<U>, Func<T1, T2, U>>")]
        public void L_Merge_F2_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F2_F1) + "() => Func<Func<T1, T2, U>, Func<T4, U>, Func<T1, T2, T4, U>>")]
        public void L_Merge_F2_F1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_F1
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F2_F2) + "() => Func<Func<T1, T2, U>, Func<T3, T4, U>, Func<T1, T2, T3, T4, U>>")]
        public void L_Merge_F2_F2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F3_F) + "() => Func<Func<T1, T2, T3, U>, Func<U>, Func<T1, T2, T3, U>>")]
        public void L_Merge_F3_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F3_F1) + "() => Func<Func<T1, T2, T3, U>, Func<T4, U>, Func<T1, T2, T3, T4, U>>")]
        public void L_Merge_F3_F1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_F1
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F4_F) + "() => Func<Func<T1, T2, T3, T4, U>, Func<U>, Func<T1, T2, T3, T4, U>>")]
        public void L_Merge_F4_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F4_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A) + "() => Func<Action<T1>, T1, Action>")]
        public void L_Supply_A_Func_Action_T1_T1_Action()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A) + "() => Func<Action<T1, T2>, T1, Action<T2>>")]
        public void L_Supply_A_Func_Action_T1_T2_T1_Action_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A2) + "() => Func<Action<T1, T2>, T2, Action<T1>>")]
        public void L_Supply_A2_Func_Action_T1_T2_T2_Action_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A) + "() => Func<Action<T1, T2, T3>, T1, Action<T2, T3>>")]
        public void L_Supply_A_Func_Action_T1_T2_T3_T1_Action_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A2) + "() => Func<Action<T1, T2, T3>, T2, Action<T1, T3>>")]
        public void L_Supply_A2_Func_Action_T1_T2_T3_T2_Action_T1_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A3) + "() => Func<Action<T1, T2, T3>, T3, Action<T1, T2>>")]
        public void L_Supply_A3_Func_Action_T1_T2_T3_T3_Action_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A) + "() => Func<Action<T1, T2, T3, T4>, T1, Action<T2, T3, T4>>")]
        public void L_Supply_A_Func_Action_T1_T2_T3_T4_T1_Action_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A2) + "() => Func<Action<T1, T2, T3, T4>, T2, Action<T1, T3, T4>>")]
        public void L_Supply_A2_Func_Action_T1_T2_T3_T4_T2_Action_T1_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A3) + "() => Func<Action<T1, T2, T3, T4>, T3, Action<T1, T2, T4>>")]
        public void L_Supply_A3_Func_Action_T1_T2_T3_T4_T3_Action_T1_T2_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A4) + "() => Func<Action<T1, T2, T3, T4>, T4, Action<T1, T2, T3>>")]
        public void L_Supply_A4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A4
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F) + "() => Func<Func<T1, U>, T1, Func<U>>")]
        public void L_Supply_F_Func_Func_T1_U_T1_Func_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F) + "() => Func<Func<T1, T2, U>, T1, Func<T2, U>>")]
        public void L_Supply_F_Func_Func_T1_T2_U_T1_Func_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F2) + "() => Func<Func<T1, T2, U>, T2, Func<T1, U>>")]
        public void L_Supply_F2_Func_Func_T1_T2_U_T2_Func_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F) + "() => Func<Func<T1, T2, T3, U>, T1, Func<T2, T3, U>>")]
        public void L_Supply_F_Func_Func_T1_T2_T3_U_T1_Func_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F2) + "() => Func<Func<T1, T2, T3, U>, T2, Func<T1, T3, U>>")]
        public void L_Supply_F2_Func_Func_T1_T2_T3_U_T2_Func_T1_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F3) + "() => Func<Func<T1, T2, T3, U>, T3, Func<T1, T2, U>>")]
        public void L_Supply_F3_Func_Func_T1_T2_T3_U_T3_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F) + "() => Func<Func<T1, T2, T3, T4, U>, T1, Func<T2, T3, T4, U>>")]
        public void L_Supply_F_Func_Func_T1_T2_T3_T4_U_T1_Func_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F2) + "() => Func<Func<T1, T2, T3, T4, U>, T2, Func<T1, T3, T4, U>>")]
        public void L_Supply_F2_Func_Func_T1_T2_T3_T4_U_T2_Func_T1_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F3) + "() => Func<Func<T1, T2, T3, T4, U>, T3, Func<T1, T2, T4, U>>")]
        public void L_Supply_F3_Func_Func_T1_T2_T3_T4_U_T3_Func_T1_T2_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F4) + "() => Func<Func<T1, T2, T3, T4, U>, T4, Func<T1, T2, T3, U>>")]
        public void L_Supply_F4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F4
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_A) + "() => Func<Action<T1, T2, T3>, Action<U1, U2, U3>>")]
        public void L_Cast_A_Func_Action_T1_T2_T3_Action_U1_U2_U3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_A) + "() => Func<Action<T1, T2, T3, T4>, Action<U1, U2, U3, U4>>")]
        public void L_Cast_A_Func_Action_T1_T2_T3_T4_Action_U1_U2_U3_U4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_F) + "() => Func<Func<U1>, Func<U2>>")]
        public void L_Cast_F_Func_Func_U1_Func_U2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_F) + "() => Func<Func<T1, U1>, Func<T2, U2>>")]
        public void L_Cast_F_Func_Func_T1_U1_Func_T2_U2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_F) + "() => Func<Func<T1, T2, U1>, Func<T3, T4, U2>>")]
        public void L_Cast_F_Func_Func_T1_T2_U1_Func_T3_T4_U2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_F) + "() => Func<Func<T1, T2, T3, U1>, Func<T4, T5, T6, U2>>")]
        public void L_Cast_F_Func_Func_T1_T2_T3_U1_Func_T4_T5_T6_U2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_F) + "() => Func<Func<T1, T2, T3, T4, U1>, Func<T5, T6, T7, T8, U2>>")]
        public void L_Cast_F_Func_Func_T1_T2_T3_T4_U1_Func_T5_T6_T7_T8_U2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A) + "() => Func<Action, Action[], Action>")]
        public void Then_A_Func_Action_Action_Action()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A) + "() => Func<Action<T1>, Action[]<T1>, Action<T1>>")]
        public void Then_A_Func_Action_T1_Action_T1_Action_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A) + "() => Func<Action<T1, T2>, Action[]<T1, T2>, Action<T1, T2>>")]
        public void Then_A_Func_Action_T1_T2_Action_T1_T2_Action_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A) + "() => Func<Action<T1, T2, T3>, Action[]<T1, T2, T3>, Action<T1, T2, T3>>")]
        public void Then_A_Func_Action_T1_T2_T3_Action_T1_T2_T3_Action_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A) + "() => Func<Action<T1, T2, T3, T4>, Action[]<T1, T2, T3, T4>, Action<T1, T2, T3, T4>>")]
        public void Then_A_Func_Action_T1_T2_T3_T4_Action_T1_T2_T3_T4_Action_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A_F) + "() => Func<Action, Func[]<U>, Func<U>>")]
        public void Then_A_F_Func_Action_Func_U_Func_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A_F) + "() => Func<Action<T1>, Func[]<T1, U>, Func<T1, U>>")]
        public void Then_A_F_Func_Action_T1_Func_T1_U_Func_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A_F) + "() => Func<Action<T1, T2>, Func[]<T1, T2, U>, Func<T1, T2, U>>")]
        public void Then_A_F_Func_Action_T1_T2_Func_T1_T2_U_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A_F) + "() => Func<Action<T1, T2, T3>, Func[]<T1, T2, T3, U>, Func<T1, T2, T3, U>>")]
        public void Then_A_F_Func_Action_T1_T2_T3_Func_T1_T2_T3_U_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A_F) + "() => Func<Action<T1, T2, T3, T4>, Func[]<T1, T2, T3, T4, U>, Func<T1, T2, T3, T4, U>>")]
        public void Then_A_F_Func_Action_T1_T2_T3_T4_Func_T1_T2_T3_T4_U_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_F) + "() => Func<Func<U>, Action[], Func<U>>")]
        public void Then_F_Func_Func_U_Action_Func_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_F) + "() => Func<Func<T1, U>, Action[]<T1>, Func<T1, U>>")]
        public void Then_F_Func_Func_T1_U_Action_T1_Func_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_F) + "() => Func<Func<T1, T2, U>, Action[]<T1, T2>, Func<T1, T2, U>>")]
        public void Then_F_Func_Func_T1_T2_U_Action_T1_T2_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_F) + "() => Func<Func<T1, T2, T3, U>, Action[]<T1, T2, T3>, Func<T1, T2, T3, U>>")]
        public void Then_F_Func_Func_T1_T2_T3_U_Action_T1_T2_T3_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_F) + "() => Func<Func<T1, T2, T3, T4, U>, Action[]<T1, T2, T3, T4>, Func<T1, T2, T3, T4, U>>")]
        public void Then_F_Func_Func_T1_T2_T3_T4_U_Action_T1_T2_T3_T4_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Then_F_F) + "() => Func<Func<U>, Func[]<U>, Func<U>>")]
        public void L_Then_F_F_Func_Func_U_Func_U_Func_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Then_F_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Then_F_F) + "() => Func<Func<T1, U>, Func[]<T1, U>, Func<T1, U>>")]
        public void L_Then_F_F_Func_Func_T1_U_Func_T1_U_Func_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Then_F_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Then_F_F) + "() => Func<Func<T1, T2, U>, Func[]<T1, T2, U>, Func<T1, T2, U>>")]
        public void L_Then_F_F_Func_Func_T1_T2_U_Func_T1_T2_U_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Then_F_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Then_F_F) + "() => Func<Func<T1, T2, T3, U>, Func[]<T1, T2, T3, U>, Func<T1, T2, T3, U>>")]
        public void L_Then_F_F_Func_Func_T1_T2_T3_U_Func_T1_T2_T3_U_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Then_F_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Then_F_F) + "() => Func<Func<T1, T2, T3, T4, U>, Func[]<T1, T2, T3, T4, U>, Func<T1, T2, T3, T4, U>>")]
        public void L_Then_F_F_Func_Func_T1_T2_T3_T4_U_Func_T1_T2_T3_T4_U_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Then_F_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A) + "() => Func<Action<T1>, Action[], Action<T1>>")]
        public void L_ThenMissing_A_Func_Action_T1_Action_Action_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A) + "() => Func<Action<T1, T2>, Action[]<T1>, Action<T1, T2>>")]
        public void L_ThenMissing_A_Func_Action_T1_T2_Action_T1_Action_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A2) + "() => Func<Action<T1, T2>, Action[], Action<T1, T2>>")]
        public void L_ThenMissing_A2_Func_Action_T1_T2_Action_Action_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A) + "() => Func<Action<T1, T2, T3>, Action[]<T1, T2>, Action<T1, T2, T3>>")]
        public void L_ThenMissing_A_Func_Action_T1_T2_T3_Action_T1_T2_Action_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A2) + "() => Func<Action<T1, T2, T3>, Action[]<T1>, Action<T1, T2, T3>>")]
        public void L_ThenMissing_A2_Func_Action_T1_T2_T3_Action_T1_Action_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A3) + "() => Func<Action<T1, T2, T3>, Action[], Action<T1, T2, T3>>")]
        public void L_ThenMissing_A3_Func_Action_T1_T2_T3_Action_Action_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A) + "() => Func<Action<T1, T2, T3, T4>, Action[]<T1, T2, T3>, Action<T1, T2, T3, T4>>")]
        public void L_ThenMissing_A_Func_Action_T1_T2_T3_T4_Action_T1_T2_T3_Action_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A2) + "() => Func<Action<T1, T2, T3, T4>, Action[]<T1, T2>, Action<T1, T2, T3, T4>>")]
        public void L_ThenMissing_A2_Func_Action_T1_T2_T3_T4_Action_T1_T2_Action_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A3) + "() => Func<Action<T1, T2, T3, T4>, Action[]<T1>, Action<T1, T2, T3, T4>>")]
        public void L_ThenMissing_A3_Func_Action_T1_T2_T3_T4_Action_T1_Action_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A4) + "() => Func<Action<T1, T2, T3, T4>, Action[], Action<T1, T2, T3, T4>>")]
        public void L_ThenMissing_A4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A4
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F) + "() => Func<Action<T1>, Func[]<U>, Func<T1, U>>")]
        public void L_ThenMissing_A_F_Func_Action_T1_Func_U_Func_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F) + "() => Func<Action<T1, T2>, Func[]<T1, U>, Func<T1, T2, U>>")]
        public void L_ThenMissing_A_F_Func_Action_T1_T2_Func_T1_U_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F) + "() => Func<Action<T1, T2, T3>, Func[]<T1, T2, U>, Func<T1, T2, T3, U>>")]
        public void L_ThenMissing_A_F_Func_Action_T1_T2_T3_Func_T1_T2_U_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F2) + "() => Func<Action<T1, T2>, Func[]<U>, Func<T1, T2, U>>")]
        public void L_ThenMissing_A_F2_Func_Action_T1_T2_Func_U_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F3) + "() => Func<Action<T1, T2, T3>, Func[]<U>, Func<T1, T2, T3, U>>")]
        public void L_ThenMissing_A_F3_Func_Action_T1_T2_T3_Func_U_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F2) + "() => Func<Action<T1, T2, T3>, Func[]<T1, U>, Func<T1, T2, T3, U>>")]
        public void L_ThenMissing_A_F2_Func_Action_T1_T2_T3_Func_T1_U_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F) + "() => Func<Action<T1, T2, T3, T4>, Func[]<T1, T2, T3, U>, Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_A_F_Func_Action_T1_T2_T3_T4_Func_T1_T2_T3_U_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F2) + "() => Func<Action<T1, T2, T3, T4>, Func[]<T1, T2, U>, Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_A_F2_Func_Action_T1_T2_T3_T4_Func_T1_T2_U_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F3) + "() => Func<Action<T1, T2, T3, T4>, Func[]<T1, U>, Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_A_F3_Func_Action_T1_T2_T3_T4_Func_T1_U_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F4) + "() => Func<Action<T1, T2, T3, T4>, Func[]<U>, Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_A_F4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F4
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A) + "() => Func<Func<T1, U>, Action[], Func<T1, U>>")]
        public void L_ThenMissing_F_A_Func_Func_T1_U_Action_Func_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A) + "() => Func<Func<T1, T2, U>, Action[]<T1>, Func<T1, T2, U>>")]
        public void L_ThenMissing_F_A_Func_Func_T1_T2_U_Action_T1_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A2) + "() => Func<Func<T1, T2, U>, Action[], Func<T1, T2, U>>")]
        public void L_ThenMissing_F_A2_Func_Func_T1_T2_U_Action_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A) + "() => Func<Func<T1, T2, T3, U>, Action[]<T1, T2>, Func<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_A_Func_Func_T1_T2_T3_U_Action_T1_T2_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A2) + "() => Func<Func<T1, T2, T3, U>, Action[]<T1>, Func<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_A2_Func_Func_T1_T2_T3_U_Action_T1_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A3) + "() => Func<Func<T1, T2, T3, U>, Action[], Func<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_A3_Func_Func_T1_T2_T3_U_Action_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A) + "() => Func<Func<T1, T2, T3, T4, U>, Action[]<T1, T2, T3>, Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_A_Func_Func_T1_T2_T3_T4_U_Action_T1_T2_T3_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A2) + "() => Func<Func<T1, T2, T3, T4, U>, Action[]<T1, T2>, Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_A2_Func_Func_T1_T2_T3_T4_U_Action_T1_T2_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A3) + "() => Func<Func<T1, T2, T3, T4, U>, Action[]<T1>, Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_A3_Func_Func_T1_T2_T3_T4_U_Action_T1_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A4) + "() => Func<Func<T1, T2, T3, T4, U>, Action[], Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_A4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A4
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F) + "() => Func<Func<T1, U>, Func[]<U>, Func<T1, U>>")]
        public void L_ThenMissing_F_F_Func_Func_T1_U_Func_U_Func_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F) + "() => Func<Func<T1, T2, U>, Func[]<T1, U>, Func<T1, T2, U>>")]
        public void L_ThenMissing_F_F_Func_Func_T1_T2_U_Func_T1_U_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F2) + "() => Func<Func<T1, T2, U>, Func[]<U>, Func<T1, T2, U>>")]
        public void L_ThenMissing_F_F2_Func_Func_T1_T2_U_Func_U_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F2) + "() => Func<Func<T1, T2, T3, U>, Func[]<T1, U>, Func<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_F2_Func_Func_T1_T2_T3_U_Func_T1_U_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F3) + "() => Func<Func<T1, T2, T3, U>, Func[]<U>, Func<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_F3_Func_Func_T1_T2_T3_U_Func_U_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F) + "() => Func<Func<T1, T2, T3, U>, Func[]<T1, T2, U>, Func<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_F_Func_Func_T1_T2_T3_U_Func_T1_T2_U_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F) + "() => Func<Func<T1, T2, T3, T4, U>, Func[]<T1, T2, T3, U>, Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_F_Func_Func_T1_T2_T3_T4_U_Func_T1_T2_T3_U_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Defaults_A) + "() => Func<Action<T1, T2>, T1, T2, Action<T1, T2>>")]
        public void L_Defaults_A_Func_Action_T1_T2_T1_T2_Action_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Defaults_A) + "() => Func<Action<T1, T2, T3>, T1, T2, T3, Action<T1, T2, T3>>")]
        public void L_Defaults_A_Func_Action_T1_T2_T3_T1_T2_T3_Action_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Defaults_A) + "() => Func<Action<T1, T2, T3, T4>, T1, T2, T3, T4, Action<T1, T2, T3, T4>>")]
        public void L_Defaults_A_Func_Action_T1_T2_T3_T4_T1_T2_T3_T4_Action_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Defaults_F) + "() => Func<Func<T1, T2, U>, T1, T2, Func<T1, T2, U>>")]
        public void L_Defaults_F_Func_Func_T1_T2_U_T1_T2_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Defaults_F) + "() => Func<Func<T1, T2, T3, U>, T1, T2, T3, Func<T1, T2, T3, U>>")]
        public void L_Defaults_F_Func_Func_T1_T2_T3_U_T1_T2_T3_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Defaults_F) + "() => Func<Func<T1, T2, T3, T4, U>, T1, T2, T3, T4, Func<T1, T2, T3, T4, U>>")]
        public void L_Defaults_F_Func_Func_T1_T2_T3_T4_U_T1_T2_T3_T4_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_A) + "() => Func<Action<T1>, String, Action<T1>>")]
        public void L_Require_A_Func_Action_T1_String_Action_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_A) + "() => Func<Action<T1, T2>, String, Action<T1, T2>>")]
        public void L_Require_A_Func_Action_T1_T2_String_Action_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require2_A) + "() => Func<Action<T1, T2>, String, Action<T1, T2>>")]
        public void L_Require2_A_Func_Action_T1_T2_String_Action_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_A) + "() => Func<Action<T1, T2, T3>, String, Action<T1, T2, T3>>")]
        public void L_Require_A_Func_Action_T1_T2_T3_String_Action_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require2_A) + "() => Func<Action<T1, T2, T3>, String, Action<T1, T2, T3>>")]
        public void L_Require2_A_Func_Action_T1_T2_T3_String_Action_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require3_A) + "() => Func<Action<T1, T2, T3>, String, Action<T1, T2, T3>>")]
        public void L_Require3_A_Func_Action_T1_T2_T3_String_Action_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require3_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_A) + "() => Func<Action<T1, T2, T3, T4>, String, Action<T1, T2, T3, T4>>")]
        public void L_Require_A_Func_Action_T1_T2_T3_T4_String_Action_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require2_A) + "() => Func<Action<T1, T2, T3, T4>, String, Action<T1, T2, T3, T4>>")]
        public void L_Require2_A_Func_Action_T1_T2_T3_T4_String_Action_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require3_A) + "() => Func<Action<T1, T2, T3, T4>, String, Action<T1, T2, T3, T4>>")]
        public void L_Require3_A_Func_Action_T1_T2_T3_T4_String_Action_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require3_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require4_A) + "() => Func<Action<T1, T2, T3, T4>, String, Action<T1, T2, T3, T4>>")]
        public void L_Require4_A()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require4_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_F) + "() => Func<Func<T1, U>, String, Func<T1, U>>")]
        public void L_Require_F_Func_Func_T1_U_String_Func_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_F) + "() => Func<Func<T1, T2, U>, String, Func<T1, T2, U>>")]
        public void L_Require_F_Func_Func_T1_T2_U_String_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require2_F) + "() => Func<Func<T1, T2, U>, String, Func<T1, T2, U>>")]
        public void L_Require2_F_Func_Func_T1_T2_U_String_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_F) + "() => Func<Func<T1, T2, T3, U>, String, Func<T1, T2, T3, U>>")]
        public void L_Require_F_Func_Func_T1_T2_T3_U_String_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require2_F) + "() => Func<Func<T1, T2, T3, U>, String, Func<T1, T2, T3, U>>")]
        public void L_Require2_F_Func_Func_T1_T2_T3_U_String_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require3_F) + "() => Func<Func<T1, T2, T3, U>, String, Func<T1, T2, T3, U>>")]
        public void L_Require3_F_Func_Func_T1_T2_T3_U_String_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require3_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_F) + "() => Func<Func<T1, T2, T3, T4, U>, String, Func<T1, T2, T3, T4, U>>")]
        public void L_Require_F_Func_Func_T1_T2_T3_T4_U_String_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require2_F) + "() => Func<Func<T1, T2, T3, T4, U>, String, Func<T1, T2, T3, T4, U>>")]
        public void L_Require2_F_Func_Func_T1_T2_T3_T4_U_String_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require3_F) + "() => Func<Func<T1, T2, T3, T4, U>, String, Func<T1, T2, T3, T4, U>>")]
        public void L_Require3_F_Func_Func_T1_T2_T3_T4_U_String_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require3_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require4_F) + "() => Func<Func<T1, T2, T3, T4, U>, String, Func<T1, T2, T3, T4, U>>")]
        public void L_Require4_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require4_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RequireAll_A) + "() => Func<Action<T1, T2>, String, String, Action<T1, T2>>")]
        public void L_RequireAll_A_Func_Action_T1_T2_String_String_Action_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RequireAll_A) + "() => Func<Action<T1, T2, T3>, String, String, String, Action<T1, T2, T3>>")]
        public void L_RequireAll_A_Func_Action_T1_T2_T3_String_String_String_Action_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RequireAll_A) + "() => Func<Action<T1, T2, T3, T4>, String, String, String, String, Action<T1, T2, T3, T4>>")]
        public void L_RequireAll_A_Func_Action_T1_T2_T3_T4_String_String_String_String_Action_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RequireAll_F) + "() => Func<Func<T1, T2, U>, String, String, Func<T1, T2, U>>")]
        public void L_RequireAll_F_Func_Func_T1_T2_U_String_String_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RequireAll_F) + "() => Func<Func<T1, T2, T3, U>, String, String, String, Func<T1, T2, T3, U>>")]
        public void L_RequireAll_F_Func_Func_T1_T2_T3_U_String_String_String_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RequireAll_F) + "() => Func<Func<T1, T2, T3, T4, U>, String, String, String, String, Func<T1, T2, T3, T4, U>>")]
        public void L_RequireAll_F_Func_Func_T1_T2_T3_T4_U_String_String_String_String_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_A) + "() => Func<Action<U>, Func<U, U>>")]
        public void L_Yield_A_Func_Action_U_Func_U_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_A) + "() => Func<Action<U, T1>, Func<U, T1, U>>")]
        public void L_Yield_A_Func_Action_U_T1_Func_U_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield2_A) + "() => Func<Action<T1, U>, Func<T1, U, U>>")]
        public void L_Yield2_A_Func_Action_T1_U_Func_T1_U_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_A) + "() => Func<Action<U, T1, T2>, Func<U, T1, T2, U>>")]
        public void L_Yield_A_Func_Action_U_T1_T2_Func_U_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield2_A) + "() => Func<Action<T1, U, T2>, Func<T1, U, T2, U>>")]
        public void L_Yield2_A_Func_Action_T1_U_T2_Func_T1_U_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield3_A) + "() => Func<Action<T1, T2, U>, Func<T1, T2, U, U>>")]
        public void L_Yield3_A_Func_Action_T1_T2_U_Func_T1_T2_U_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield3_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_A) + "() => Func<Action<U, T1, T2, T3>, Func<U, T1, T2, T3, U>>")]
        public void L_Yield_A_Func_Action_U_T1_T2_T3_Func_U_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield2_A) + "() => Func<Action<T1, U, T2, T3>, Func<T1, U, T2, T3, U>>")]
        public void L_Yield2_A_Func_Action_T1_U_T2_T3_Func_T1_U_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield3_A) + "() => Func<Action<T1, T2, U, T3>, Func<T1, T2, U, T3, U>>")]
        public void L_Yield3_A_Func_Action_T1_T2_U_T3_Func_T1_T2_U_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield3_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield4_A) + "() => Func<Action<T1, T2, T3, U>, Func<T1, T2, T3, U, U>>")]
        public void L_Yield4_A()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield4_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_F) + "() => Func<Func<U, U>, Func<U, U>>")]
        public void L_Yield_F_Func_Func_U_U_Func_U_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_F) + "() => Func<Func<U, T1, U>, Func<U, T1, U>>")]
        public void L_Yield_F_Func_Func_U_T1_U_Func_U_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield2_F) + "() => Func<Func<T1, U, U>, Func<T1, U, U>>")]
        public void L_Yield2_F_Func_Func_T1_U_U_Func_T1_U_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_F) + "() => Func<Func<U, T1, T2, U>, Func<U, T1, T2, U>>")]
        public void L_Yield_F_Func_Func_U_T1_T2_U_Func_U_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield2_F) + "() => Func<Func<T1, U, T2, U>, Func<T1, U, T2, U>>")]
        public void L_Yield2_F_Func_Func_T1_U_T2_U_Func_T1_U_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield3_F) + "() => Func<Func<T1, T2, U, U>, Func<T1, T2, U, U>>")]
        public void L_Yield3_F_Func_Func_T1_T2_U_U_Func_T1_T2_U_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield3_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_F) + "() => Func<Func<U, T1, T2, T3, U>, Func<U, T1, T2, T3, U>>")]
        public void L_Yield_F_Func_Func_U_T1_T2_T3_U_Func_U_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield2_F) + "() => Func<Func<T1, U, T2, T3, U>, Func<T1, U, T2, T3, U>>")]
        public void L_Yield2_F_Func_Func_T1_U_T2_T3_U_Func_T1_U_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield3_F) + "() => Func<Func<T1, T2, U, T3, U>, Func<T1, T2, U, T3, U>>")]
        public void L_Yield3_F_Func_Func_T1_T2_U_T3_U_Func_T1_T2_U_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield3_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield4_F) + "() => Func<Func<T1, T2, T3, U, U>, Func<T1, T2, T3, U, U>>")]
        public void L_Yield4_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield4_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_A) + "() => Func<Func<Action>, Action>")]
        public void L_Execute_A_Func_Func_Action_Action()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_A) + "() => Func<Func<Action<T1>>, Action<T1>>")]
        public void L_Execute_A_Func_Func_Action_T1_Action_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_A) + "() => Func<Func<Action<T1, T2>>, Action<T1, T2>>")]
        public void L_Execute_A_Func_Func_Action_T1_T2_Action_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_A) + "() => Func<Func<Action<T1, T2, T3>>, Action<T1, T2, T3>>")]
        public void L_Execute_A_Func_Func_Action_T1_T2_T3_Action_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_A) + "() => Func<Func<Action<T1, T2, T3, T4>>, Action<T1, T2, T3, T4>>")]
        public void L_Execute_A_Func_Func_Action_T1_T2_T3_T4_Action_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_F) + "() => Func<Func<Func<U>>, Func<U>>")]
        public void L_Execute_F_Func_Func_Func_U_Func_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_F) + "() => Func<Func<Func<T1, U>>, Func<T1, U>>")]
        public void L_Execute_F_Func_Func_Func_T1_U_Func_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_F) + "() => Func<Func<Func<T1, T2, U>>, Func<T1, T2, U>>")]
        public void L_Execute_F_Func_Func_Func_T1_T2_U_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_F) + "() => Func<Func<Func<T1, T2, T3, U>>, Func<T1, T2, T3, U>>")]
        public void L_Execute_F_Func_Func_Func_T1_T2_T3_U_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_F) + "() => Func<Func<Func<T1, T2, T3, T4, U>>, Func<T1, T2, T3, T4, U>>")]
        public void L_Execute_F_Func_Func_Func_T1_T2_T3_T4_U_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_A) + "() => Func<Action<T1>, Action<U1>>")]
        public void L_Cast_A_Func_Action_T1_Action_U1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_A) + "() => Func<Action<T1, T2>, Action<U1, U2>>")]
        public void L_Cast_A_Func_Action_T1_T2_Action_U1_U2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Do) + "() => Func<Func<U>, Action>")]
        public void L_Do()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Do
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cache) + "() => Func<Func<U>, String, Func<U>>")]
        public void L_Cache()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cache
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Cache) + "(Object&, Func<T>) => T")]
        public void Cache_Object_Func_T_T()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Cache
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Cache) + "(T&, Func<T>) => T")]
        public void Cache_T_Func_T_T()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.Cache
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.GetCacheData) + "(String) => Dictionary<String, CacheData>")]
        public void GetCacheData()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.GetCacheData
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.ClearCache) + "(String)")]
        public void ClearCache()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.ClearCache
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_A) + "() => Func<Action<T1>, Func<T1>, Action<T1>>")]
        public void L_SetFunc_A()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_F) + "() => Func<Func<T1, U>, Func<T1>, Func<T1, U>>")]
        public void L_SetFunc_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_A2) + "() => Func<Action<T1, T2>, Func<T2>, Action<T1, T2>>")]
        public void L_SetFunc_A2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_A2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_F2) + "() => Func<Func<T1, T2, U>, Func<T2>, Func<T1, T2, U>>")]
        public void L_SetFunc_F2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_F2
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_A3) + "() => Func<Action<T1, T2, T3>, Func<T3>, Action<T1, T2, T3>>")]
        public void L_SetFunc_A3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_A3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_F3) + "() => Func<Func<T1, T2, T3, U>, Func<T3>, Func<T1, T2, T3, U>>")]
        public void L_SetFunc_F3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_F3
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_A4) + "() => Func<Action<T1, T2, T3, T4>, Func<T4>, Action<T1, T2, T3, T4>>")]
        public void L_SetFunc_A4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_A4
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_F4) + "() => Func<Func<T1, T2, T3, T4, U>, Func<T4>, Func<T1, T2, T3, T4, U>>")]
        public void L_SetFunc_F4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_F4
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set_A) + "() => Func<Action<T1>, T1, Action<T1>>")]
        public void L_Set_A()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set_F) + "() => Func<Func<T1, U>, T1, Func<T1, U>>")]
        public void L_Set_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set2_A) + "() => Func<Action<T1, T2>, T2, Action<T1, T2>>")]
        public void L_Set2_A()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set2_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set2_F) + "() => Func<Func<T1, T2, U>, T2, Func<T1, T2, U>>")]
        public void L_Set2_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set2_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set3_A) + "() => Func<Action<T1, T2, T3>, T3, Action<T1, T2, T3>>")]
        public void L_Set3_A()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set3_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set3_F) + "() => Func<Func<T1, T2, T3, U>, T3, Func<T1, T2, T3, U>>")]
        public void L_Set3_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set3_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set4_A) + "() => Func<Action<T1, T2, T3, T4>, T4, Action<T1, T2, T3, T4>>")]
        public void L_Set4_A()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set4_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set4_F) + "() => Func<Func<T1, T2, T3, T4, U>, T4, Func<T1, T2, T3, T4, U>>")]
        public void L_Set4_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set4_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_A) + "() => Func<Action, U, Func<U>>")]
        public void L_Return_A_Func_Action_U_Func_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_A) + "() => Func<Action<T1>, U, Func<T1, U>>")]
        public void L_Return_A_Func_Action_T1_U_Func_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_A) + "() => Func<Action<T1, T2>, U, Func<T1, T2, U>>")]
        public void L_Return_A_Func_Action_T1_T2_U_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_A) + "() => Func<Action<T1, T2, T3>, U, Func<T1, T2, T3, U>>")]
        public void L_Return_A_Func_Action_T1_T2_T3_U_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_A) + "() => Func<Action<T1, T2, T3, T4>, U, Func<T1, T2, T3, T4, U>>")]
        public void L_Return_A_Func_Action_T1_T2_T3_T4_U_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_F) + "() => Func<Func<U>, U, Func<U>>")]
        public void L_Return_F_Func_Func_U_U_Func_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_F) + "() => Func<Func<T1, U>, U, Func<T1, U>>")]
        public void L_Return_F_Func_Func_T1_U_U_Func_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_F) + "() => Func<Func<T1, T2, U>, U, Func<T1, T2, U>>")]
        public void L_Return_F_Func_Func_T1_T2_U_U_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_F) + "() => Func<Func<T1, T2, T3, U>, U, Func<T1, T2, T3, U>>")]
        public void L_Return_F_Func_Func_T1_T2_T3_U_U_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_F) + "() => Func<Func<T1, T2, T3, T4, U>, U, Func<T1, T2, T3, T4, U>>")]
        public void L_Return_F_Func_Func_T1_T2_T3_T4_U_U_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Rotate_A) + "() => Func<Action<T1, T2>, Action<T2, T1>>")]
        public void L_Rotate_A_Func_Action_T1_T2_Action_T2_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Rotate_A) + "() => Func<Action<T1, T2, T3>, Action<T3, T1, T2>>")]
        public void L_Rotate_A_Func_Action_T1_T2_T3_Action_T3_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Rotate_A) + "() => Func<Action<T1, T2, T3, T4>, Action<T4, T1, T2, T3>>")]
        public void L_Rotate_A_Func_Action_T1_T2_T3_T4_Action_T4_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Rotate_F) + "() => Func<Func<T1, T2, U>, Func<T2, T1, U>>")]
        public void L_Rotate_F_Func_Func_T1_T2_U_Func_T2_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Rotate_F) + "() => Func<Func<T1, T2, T3, U>, Func<T3, T1, T2, U>>")]
        public void L_Rotate_F_Func_Func_T1_T2_T3_U_Func_T3_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Rotate_F) + "() => Func<Func<T1, T2, T3, T4, U>, Func<T4, T1, T2, T3, U>>")]
        public void L_Rotate_F_Func_Func_T1_T2_T3_T4_U_Func_T4_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RotateBack_A) + "() => Func<Action<T1, T2>, Action<T2, T1>>")]
        public void L_RotateBack_A_Func_Action_T1_T2_Action_T2_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RotateBack_A) + "() => Func<Action<T1, T2, T3>, Action<T2, T3, T1>>")]
        public void L_RotateBack_A_Func_Action_T1_T2_T3_Action_T2_T3_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RotateBack_A) + "() => Func<Action<T1, T2, T3, T4>, Action<T2, T3, T4, T1>>")]
        public void L_RotateBack_A_Func_Action_T1_T2_T3_T4_Action_T2_T3_T4_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RotateBack_F) + "() => Func<Func<T1, T2, U>, Func<T2, T1, U>>")]
        public void L_RotateBack_F_Func_Func_T1_T2_U_Func_T2_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RotateBack_F) + "() => Func<Func<T1, T2, T3, U>, Func<T2, T3, T1, U>>")]
        public void L_RotateBack_F_Func_Func_T1_T2_T3_U_Func_T2_T3_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RotateBack_F) + "() => Func<Func<T1, T2, T3, T4, U>, Func<T2, T3, T4, T1, U>>")]
        public void L_RotateBack_F_Func_Func_T1_T2_T3_T4_U_Func_T2_T3_T4_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_A) + "() => Func<Action<T1>, T1, Action<T1>>")]
        public void L_Default_A_Func_Action_T1_T1_Action_T1()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_A) + "() => Func<Action<T1, T2>, T1, Action<T1, T2>>")]
        public void L_Default_A_Func_Action_T1_T2_T1_Action_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default2_A) + "() => Func<Action<T1, T2>, T2, Action<T1, T2>>")]
        public void L_Default2_A_Func_Action_T1_T2_T2_Action_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_A) + "() => Func<Action<T1, T2, T3>, T1, Action<T1, T2, T3>>")]
        public void L_Default_A_Func_Action_T1_T2_T3_T1_Action_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default2_A) + "() => Func<Action<T1, T2, T3>, T2, Action<T1, T2, T3>>")]
        public void L_Default2_A_Func_Action_T1_T2_T3_T2_Action_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default3_A) + "() => Func<Action<T1, T2, T3>, T3, Action<T1, T2, T3>>")]
        public void L_Default3_A_Func_Action_T1_T2_T3_T3_Action_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default3_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_A) + "() => Func<Action<T1, T2, T3, T4>, T1, Action<T1, T2, T3, T4>>")]
        public void L_Default_A_Func_Action_T1_T2_T3_T4_T1_Action_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default2_A) + "() => Func<Action<T1, T2, T3, T4>, T2, Action<T1, T2, T3, T4>>")]
        public void L_Default2_A_Func_Action_T1_T2_T3_T4_T2_Action_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default3_A) + "() => Func<Action<T1, T2, T3, T4>, T3, Action<T1, T2, T3, T4>>")]
        public void L_Default3_A_Func_Action_T1_T2_T3_T4_T3_Action_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default3_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default4_A) + "() => Func<Action<T1, T2, T3, T4>, T4, Action<T1, T2, T3, T4>>")]
        public void L_Default4_A()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default4_A
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_F) + "() => Func<Func<T1, U>, T1, Func<T1, U>>")]
        public void L_Default_F_Func_Func_T1_U_T1_Func_T1_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_F) + "() => Func<Func<T1, T2, U>, T1, Func<T1, T2, U>>")]
        public void L_Default_F_Func_Func_T1_T2_U_T1_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default2_F) + "() => Func<Func<T1, T2, U>, T2, Func<T1, T2, U>>")]
        public void L_Default2_F_Func_Func_T1_T2_U_T2_Func_T1_T2_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_F) + "() => Func<Func<T1, T2, T3, U>, T1, Func<T1, T2, T3, U>>")]
        public void L_Default_F_Func_Func_T1_T2_T3_U_T1_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default2_F) + "() => Func<Func<T1, T2, T3, U>, T2, Func<T1, T2, T3, U>>")]
        public void L_Default2_F_Func_Func_T1_T2_T3_U_T2_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default3_F) + "() => Func<Func<T1, T2, T3, U>, T3, Func<T1, T2, T3, U>>")]
        public void L_Default3_F_Func_Func_T1_T2_T3_U_T3_Func_T1_T2_T3_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default3_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_F) + "() => Func<Func<T1, T2, T3, T4, U>, T1, Func<T1, T2, T3, T4, U>>")]
        public void L_Default_F_Func_Func_T1_T2_T3_T4_U_T1_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default2_F) + "() => Func<Func<T1, T2, T3, T4, U>, T2, Func<T1, T2, T3, T4, U>>")]
        public void L_Default2_F_Func_Func_T1_T2_T3_T4_U_T2_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default3_F) + "() => Func<Func<T1, T2, T3, T4, U>, T3, Func<T1, T2, T3, T4, U>>")]
        public void L_Default3_F_Func_Func_T1_T2_T3_T4_U_T3_Func_T1_T2_T3_T4_U()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default3_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default4_F) + "() => Func<Func<T1, T2, T3, T4, U>, T4, Func<T1, T2, T3, T4, U>>")]
        public void L_Default4_F()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default4_F
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.DataCaches))]
        public void DataCaches()
         {
            // TODO: Implement method test LCore.Extensions.L.Logic.DataCaches
         }
         
    }
   public partial class ReflectionExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsOperator) + "(MethodInfo) => Boolean")]
        public void IsOperator()
         {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsOperator
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.NewRandom) + "(Type, Object, Object) => Object")]
        public void NewRandom()
         {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.NewRandom
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.ToParameterSignature) + "(MethodInfo) => String")]
        public void ToParameterSignature()
         {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.ToParameterSignature
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetGenericName) + "(Type) => String")]
        public void GetGenericName()
         {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetGenericName
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsPropertyGetterOrSetter) + "(MethodInfo) => Boolean")]
        public void IsPropertyGetterOrSetter()
         {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsPropertyGetterOrSetter
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsDeclaredMember) + "(MemberInfo) => Boolean")]
        public void IsDeclaredMember()
         {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsDeclaredMember
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsInheritedMember) + "(MemberInfo) => Boolean")]
        public void IsInheritedMember()
         {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsInheritedMember
         }
         
    }
   public partial class NumberExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Wrap) + "(Nullable<T>) => Number")]
        public void Wrap_Nullable_T_Number()
         {
            // TODO: Implement method test LCore.Extensions.NumberExt.Wrap
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Wrap) + "(T) => Number")]
        public void Wrap_T_Number()
         {
            // TODO: Implement method test LCore.Extensions.NumberExt.Wrap
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Wrap) + "(String) => Number")]
        public void Wrap_String_Number()
         {
            // TODO: Implement method test LCore.Extensions.NumberExt.Wrap
         }
         
    }
   public partial class BooleanExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Unless) + "(Action, Func[]<Boolean>) => Func<Boolean>")]
        public void Unless_Action_Func_Boolean_Func_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Unless) + "(Action, Func[]<T, Boolean>) => Func<T, Boolean>")]
        public void Unless_Action_Func_T_Boolean_Func_T_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Unless) + "(Action, Func[]<T1, T2, Boolean>) => Func<T1, T2, Boolean>")]
        public void Unless_Action_Func_T1_T2_Boolean_Func_T1_T2_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Unless) + "(Action, Func[]<T1, T2, T3, Boolean>) => Func<T1, T2, T3, Boolean>")]
        public void Unless_Action_Func_T1_T2_T3_Boolean_Func_T1_T2_T3_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Unless) + "(Action, Func[]<T1, T2, T3, T4, Boolean>) => Func<T1, T2, T3, T4, Boolean>")]
        public void Unless_Action_Func_T1_T2_T3_T4_Boolean_Func_T1_T2_T3_T4_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Unless) + "(Func<T>, Func[]<Boolean>) => Func<T>")]
        public void Unless_Func_T_Func_Boolean_Func_T()
         {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Unless) + "(Func<T1>, Func[]<T2, Boolean>) => Func<T2, T1>")]
        public void Unless_Func_T1_Func_T2_Boolean_Func_T2_T1()
         {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Unless) + "(Func<T1>, Func[]<T2, T3, Boolean>) => Func<T2, T3, T1>")]
        public void Unless_Func_T1_Func_T2_T3_Boolean_Func_T2_T3_T1()
         {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Unless) + "(Func<T1>, Func[]<T2, T3, T4, Boolean>) => Func<T2, T3, T4, T1>")]
        public void Unless_Func_T1_Func_T2_T3_T4_Boolean_Func_T2_T3_T4_T1()
         {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Unless) + "(Func<T1>, Func[]<T2, T3, T4, T5, Boolean>) => Func<T2, T3, T4, T5, T1>")]
        public void Unless_Func_T1_Func_T2_T3_T4_T5_Boolean_Func_T2_T3_T4_T5_T1()
         {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
         }
         
    }
   public partial class DictionaryExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, T2>) => List<Tuple<T1, T2>>")]
        public void Flatten_Dictionary_T1_T2_List_Tuple_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, IEnumerable<T2>>) => List<Tuple<T1, T2>>")]
        public void Flatten_Dictionary_T1_IEnumerable_T2_List_Tuple_T1_T2()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, T3>>) => List<Tuple<T1, T2, T3>>")]
        public void Flatten_Dictionary_T1_Dictionary_T2_T3_List_Tuple_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, IEnumerable<T3>>>) => List<Tuple<T1, T2, T3>>")]
        public void Flatten_Dictionary_T1_Dictionary_T2_IEnumerable_T3_List_Tuple_T1_T2_T3()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, Dictionary<T3, T4>>>) => List<Tuple<T1, T2, T3, T4>>")]
        public void Flatten_Dictionary_T1_Dictionary_T2_Dictionary_T3_T4_List_Tuple_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, Dictionary<T3, IEnumerable<T4>>>>) => List<Tuple<T1, T2, T3, T4>>")]
        public void Flatten_Dictionary_T1_Dictionary_T2_Dictionary_T3_IEnumerable_T4_List_Tuple_T1_T2_T3_T4()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, Dictionary<T3, Dictionary<T4, T5>>>>) => List<Tuple<T1, T2, T3, T4, T5>>")]
        public void Flatten_Dictionary_T1_Dictionary_T2_Dictionary_T3_Dictionary_T4_T5_List_Tuple_T1_T2_T3_T4_T5()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, Dictionary<T3, Dictionary<T4, IEnumerable<T5>>>>>) => List<Tuple<T1, T2, T3, T4, T5>>")]
        public void Flatten_Dictionary_T1_Dictionary_T2_Dictionary_T3_Dictionary_T4_IEnumerable_T5_List_Tuple_T1_T2_T3_T4_T5()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, Dictionary<T3, Dictionary<T4, Dictionary<T5, T6>>>>>) => List<Tuple<T1, T2, T3, T4, T5, T6>>")]
        public void Flatten_Dictionary_T1_Dictionary_T2_Dictionary_T3_Dictionary_T4_Dictionary_T5_T6_List_Tuple_T1_T2_T3_T4_T5_T6()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, Dictionary<T3, Dictionary<T4, Dictionary<T5, IEnumerable<T6>>>>>>) => List<Tuple<T1, T2, T3, T4, T5, T6>>")]
        public void Flatten_Dictionary_T1_Dictionary_T2_Dictionary_T3_Dictionary_T4_Dictionary_T5_IEnumerable_T6_List_Tuple_T1_T2_T3_T4_T5_T6()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, Dictionary<T3, Dictionary<T4, Dictionary<T5, Dictionary<T6, T7>>>>>>) => List<Tuple<T1, T2, T3, T4, T5, T6, T7>>")]
        public void Flatten_Dictionary_T1_Dictionary_T2_Dictionary_T3_Dictionary_T4_Dictionary_T5_Dictionary_T6_T7_List_Tuple_T1_T2_T3_T4_T5_T6_T7()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, Dictionary<T3, Dictionary<T4, Dictionary<T5, Dictionary<T6, IEnumerable<T7>>>>>>>) => List<Tuple<T1, T2, T3, T4, T5, T6, T7>>")]
        public void Flatten_Dictionary_T1_Dictionary_T2_Dictionary_T3_Dictionary_T4_Dictionary_T5_Dictionary_T6_IEnumerable_T7_List_Tuple_T1_T2_T3_T4_T5_T6_T7()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, Dictionary<T3, Dictionary<T4, Dictionary<T5, Dictionary<T6, Dictionary<T7, T8>>>>>>>) => List<Tuple<T1, T2, T3, T4, T5, T6, T7, T8>>")]
        public void Flatten_Dictionary_T1_Dictionary_T2_Dictionary_T3_Dictionary_T4_Dictionary_T5_Dictionary_T6_Dictionary_T7_T8_List_Tuple_T1_T2_T3_T4_T5_T6_T7_T8()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, Dictionary<T3, Dictionary<T4, Dictionary<T5, Dictionary<T6, Dictionary<T7, IEnumerable<T8>>>>>>>>) => List<Tuple<T1, T2, T3, T4, T5, T6, T7, T8>>")]
        public void Flatten_Dictionary_T1_Dictionary_T2_Dictionary_T3_Dictionary_T4_Dictionary_T5_Dictionary_T6_Dictionary_T7_IEnumerable_T8_List_Tuple_T1_T2_T3_T4_T5_T6_T7_T8()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.Flip) + "(Dictionary<TKey, TValue>) => Dictionary<TValue, TKey>")]
        public void Flip()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flip
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.SafeRemove) + "(Dictionary<TKey, TValue>, TKey)")]
        public void SafeRemove()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.SafeRemove
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable<Tuple<TKey, TValue>>) => Dictionary<TKey, List<TValue>>")]
        public void ToDictionary_IEnumerable_Tuple_TKey_TValue_Dictionary_TKey_List_TValue()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable<Tuple<TKey, TKey2, TValue>>) => Dictionary<TKey, Dictionary<TKey2, List<TValue>>>")]
        public void ToDictionary_IEnumerable_Tuple_TKey_TKey2_TValue_Dictionary_TKey_Dictionary_TKey2_List_TValue()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable<Tuple<TKey, TKey2, TKey3, TValue>>) => Dictionary<TKey, Dictionary<TKey2, Dictionary<TKey3, List<TValue>>>>")]
        public void ToDictionary_IEnumerable_Tuple_TKey_TKey2_TKey3_TValue_Dictionary_TKey_Dictionary_TKey2_Dictionary_TKey3_List_TValue()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable<Tuple<TKey, TKey2, TKey3, TKey4, TValue>>) => Dictionary<TKey, Dictionary<TKey2, Dictionary<TKey3, Dictionary<TKey4, List<TValue>>>>>")]
        public void ToDictionary_IEnumerable_Tuple_TKey_TKey2_TKey3_TKey4_TValue_Dictionary_TKey_Dictionary_TKey2_Dictionary_TKey3_Dictionary_TKey4_List_TValue()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable<Tuple<TKey, TKey2, TKey3, TKey4, TKey5, TValue>>) => Dictionary<TKey, Dictionary<TKey2, Dictionary<TKey3, Dictionary<TKey4, Dictionary<TKey5, List<TValue>>>>>>")]
        public void ToDictionary_IEnumerable_Tuple_TKey_TKey2_TKey3_TKey4_TKey5_TValue_Dictionary_TKey_Dictionary_TKey2_Dictionary_TKey3_Dictionary_TKey4_Dictionary_TKey5_List_TValue()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable<Tuple<TKey, TKey2, TKey3, TKey4, TKey5, TKey6, TValue>>) => Dictionary<TKey, Dictionary<TKey2, Dictionary<TKey3, Dictionary<TKey4, Dictionary<TKey5, Dictionary<TKey6, List<TValue>>>>>>>")]
        public void ToDictionary_IEnumerable_Tuple_TKey_TKey2_TKey3_TKey4_TKey5_TKey6_TValue_Dictionary_TKey_Dictionary_TKey2_Dictionary_TKey3_Dictionary_TKey4_Dictionary_TKey5_Dictionary_TKey6_List_TValue()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DictionaryExt)+ "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable<Tuple<TKey, TKey2, TKey3, TKey4, TKey5, TKey6, TKey7, TValue>>) => Dictionary<TKey, Dictionary<TKey2, Dictionary<TKey3, Dictionary<TKey4, Dictionary<TKey5, Dictionary<TKey6, Dictionary<TKey7, List<TValue>>>>>>>>")]
        public void ToDictionary_IEnumerable_Tuple_TKey_TKey2_TKey3_TKey4_TKey5_TKey6_TKey7_TValue_Dictionary_TKey_Dictionary_TKey2_Dictionary_TKey3_Dictionary_TKey4_Dictionary_TKey5_Dictionary_TKey6_Dictionary_TKey7_List_TValue()
         {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
         }
         
    }
   public partial class FileExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(FileExt)+ "." + nameof(FileExt.CleanFileName) + "(String) => String")]
        public void CleanFileName()
         {
            // TODO: Implement method test LCore.Extensions.FileExt.CleanFileName
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(FileExt)+ "." + nameof(FileExt.EveryOtherByte) + "(Byte[]) => Byte[]")]
        public void EveryOtherByte()
         {
            // TODO: Implement method test LCore.Extensions.FileExt.EveryOtherByte
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(FileExt)+ "." + nameof(FileExt.GetFileStream) + "(String) => FileStream")]
        public void GetFileStream()
         {
            // TODO: Implement method test LCore.Extensions.FileExt.GetFileStream
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(FileExt)+ "." + nameof(FileExt.GetStreamHash) + "(Stream) => Byte[]")]
        public void GetStreamHash()
         {
            // TODO: Implement method test LCore.Extensions.FileExt.GetStreamHash
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(FileExt)+ "." + nameof(FileExt.GetStringHash) + "(String) => Byte[]")]
        public void GetStringHash()
         {
            // TODO: Implement method test LCore.Extensions.FileExt.GetStringHash
         }
         
    }
   public partial class EnumerableExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Sum) + "(IEnumerable<T>, Func<T, U>) => UInt32")]
        public void Sum()
         {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Sum
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.While) + "(IEnumerable, Func<T, Boolean>) => Boolean")]
        public void While_IEnumerable_Func_T_Boolean_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.While) + "(IEnumerable, Func<Int32, T, Boolean>) => Boolean")]
        public void While_IEnumerable_Func_Int32_T_Boolean_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.While) + "(IEnumerable<T>, Func<T, Boolean>) => Boolean")]
        public void While_IEnumerable_T_Func_T_Boolean_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.While) + "(IEnumerable<T>, Func<Int32, T, Boolean>) => Boolean")]
        public void While_IEnumerable_T_Func_Int32_T_Boolean_Boolean()
         {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.While) + "(Action<T>, Func<Boolean>, IEnumerable<T>)")]
        public void While_Action_T_Func_Boolean_IEnumerable_T()
         {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
         }
         
    }
}
