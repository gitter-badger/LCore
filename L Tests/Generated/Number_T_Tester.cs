// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.Numbers;
namespace L_Tests.LCore.Numbers
{
    ///<summary>
    /// Covering class: LCore.Numbers.Number<T>
    ///
    ///LUnit has Autogenerated 21 method stubs:
    ///</summary>
    public partial class Number_T_Tester : XUnitOutputTester, IDisposable
    {
        public Number_T_Tester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.op_Division(Number<T>, T) => Number")]
        public void op_Division()
        {
            // TODO: Implement method test LCore.Numbers.Number<T>.op_Division
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.op_Multiply(Number<T>, T) => Number")]
        public void op_Multiply()
        {
            // TODO: Implement method test LCore.Numbers.Number<T>.op_Multiply
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.op_Subtraction(Number<T>, T) => Number")]
        public void op_Subtraction()
        {
            // TODO: Implement method test LCore.Numbers.Number<T>.op_Subtraction
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.op_Addition(Number<T>, T) => Number")]
        public void op_Addition()
        {
            // TODO: Implement method test LCore.Numbers.Number<T>.op_Addition
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Add(Number) => Number")]
        public void Add()
        {
            // TODO: Implement method test LCore.Numbers.Number<T>.Add
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Subtract(Number) => Number")]
        public void Subtract()
        {
            // TODO: Implement method test LCore.Numbers.Number<T>.Subtract
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Multiply(Number) => Number")]
        public void Multiply()
        {
            // TODO: Implement method test LCore.Numbers.Number<T>.Multiply
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Divide(Number) => Number")]
        public void Divide()
        {
            // TODO: Implement method test LCore.Numbers.Number<T>.Divide
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.New(T) => Number<T>")]
        public void New()
        {
            // TODO: Implement method test LCore.Numbers.Number<T>.New
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.New(Object) => Number")]
        public void New()
        {
            // TODO: Implement method test LCore.Numbers.Number<T>.New
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.GetValue() => Object")]
        public void GetValue()
        {
            // TODO: Implement method test LCore.Numbers.Number<T>.GetValue
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Add(IConvertible) => Number")]
        public void Add()
        {
            // TODO: Implement method test LCore.Numbers.Number<T>.Add
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Subtract(IConvertible) => Number")]
        public void Subtract()
        {
            // TODO: Implement method test LCore.Numbers.Number<T>.Subtract
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Multiply(IConvertible) => Number")]
        public void Multiply()
        {
            // TODO: Implement method test LCore.Numbers.Number<T>.Multiply
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Divide(IConvertible) => Number")]
        public void Divide()
        {
            // TODO: Implement method test LCore.Numbers.Number<T>.Divide
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Add(T, T) => T")]
        public void Add()
        {
            // TODO: Implement method test LCore.Numbers.Number<T>.Add
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Subtract(T, T) => T")]
        public void Subtract()
        {
            // TODO: Implement method test LCore.Numbers.Number<T>.Subtract
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Multiply(T, T) => T")]
        public void Multiply()
        {
            // TODO: Implement method test LCore.Numbers.Number<T>.Multiply
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.Divide(T, T) => Object")]
        public void Divide()
        {
            // TODO: Implement method test LCore.Numbers.Number<T>.Divide
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.New() => Number")]
        public void New()
        {
            // TODO: Implement method test LCore.Numbers.Number<T>.New
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number<T>.CompareTo(Object) => Int32")]
        public void CompareTo()
        {
            // TODO: Implement method test LCore.Numbers.Number<T>.CompareTo
        }

    }
}
