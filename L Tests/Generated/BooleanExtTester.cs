// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.Extensions;
namespace L_Tests.LCore.Extensions
{
    ///<summary>
    /// Covering class: LCore.Extensions.BooleanExt
    ///
    ///LUnit has Autogenerated 70 method stubs:
    ///</summary>
    public partial class BooleanExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Or) + "(IEnumerable<Func<T1, T2, T3, Boolean>>) => Func<T1, T2, T3, Boolean>")]
        public void Or()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Or
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Or) + "(IEnumerable<Func<T1, T2, T3, T4, Boolean>>) => Func<T1, T2, T3, T4, Boolean>")]
        public void Or()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Or
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Not) + "(Func<Boolean>) => Func<Boolean>")]
        public void Not()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Not
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Not) + "(Func<T1, Boolean>) => Func<T1, Boolean>")]
        public void Not()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Not
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Not) + "(Func<T1, T2, Boolean>) => Func<T1, T2, Boolean>")]
        public void Not()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Not
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Not) + "(Func<T1, T2, T3, Boolean>) => Func<T1, T2, T3, Boolean>")]
        public void Not()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Not
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Not) + "(Func<T1, T2, T3, T4, Boolean>) => Func<T1, T2, T3, T4, Boolean>")]
        public void Not()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Not
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.If) + "(Action, Func<Boolean>) => Func<Boolean>")]
        public void If()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.If) + "(Action, Func<T, Boolean>) => Func<T, Boolean>")]
        public void If()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.If) + "(Action, Func<T1, T2, Boolean>) => Func<T1, T2, Boolean>")]
        public void If()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.If) + "(Action, Func<T1, T2, T3, Boolean>) => Func<T1, T2, T3, Boolean>")]
        public void If()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.If) + "(Action, Func<T1, T2, T3, T4, Boolean>) => Func<T1, T2, T3, T4, Boolean>")]
        public void If()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.If) + "(Func<T>, Func<Boolean>) => Func<T>")]
        public void If()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.If) + "(Func<T1>, Func<T2, Boolean>) => Func<T2, T1>")]
        public void If()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.If) + "(Func<T1>, Func<T2, T3, Boolean>) => Func<T2, T3, T1>")]
        public void If()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.If) + "(Func<T1>, Func<T2, T3, T4, Boolean>) => Func<T2, T3, T4, T1>")]
        public void If()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.If) + "(Func<T1>, Func<T2, T3, T4, T5, Boolean>) => Func<T2, T3, T4, T5, T1>")]
        public void If()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.If) + "(Action, Func<Boolean>[]) => Func<Boolean>")]
        public void If()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.If) + "(Action, Func<T, Boolean>[]) => Func<T, Boolean>")]
        public void If()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.If) + "(Action, Func<T1, T2, Boolean>[]) => Func<T1, T2, Boolean>")]
        public void If()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.If) + "(Action, Func<T1, T2, T3, Boolean>[]) => Func<T1, T2, T3, Boolean>")]
        public void If()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.If) + "(Action, Func<T1, T2, T3, T4, Boolean>[]) => Func<T1, T2, T3, T4, Boolean>")]
        public void If()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.If) + "(Func<T>, Func<Boolean>[]) => Func<T>")]
        public void If()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.If) + "(Func<T1>, Func<T2, Boolean>[]) => Func<T2, T1>")]
        public void If()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.If) + "(Func<T1>, Func<T2, T3, Boolean>[]) => Func<T2, T3, T1>")]
        public void If()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.If) + "(Func<T1>, Func<T2, T3, T4, Boolean>[]) => Func<T2, T3, T4, T1>")]
        public void If()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.If) + "(Func<T1>, Func<T2, T3, T4, T5, Boolean>[]) => Func<T2, T3, T4, T5, T1>")]
        public void If()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.If
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.ElseIf) + "(Func<Boolean>, Func<Boolean>, Action) => Func<Boolean>")]
        public void ElseIf()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.ElseIf
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.ElseIf) + "(Func<T, Boolean>, Func<T, Boolean>, Action<T>) => Func<T, Boolean>")]
        public void ElseIf()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.ElseIf
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.ElseIf) + "(Func<T1, T2, Boolean>, Func<T1, T2, Boolean>, Action<T1, T2>) => Func<T1, T2, Boolean>")]
        public void ElseIf()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.ElseIf
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.ElseIf) + "(Func<T1, T2, T3, Boolean>, Func<T1, T2, T3, Boolean>, Action<T1, T2, T3>) => Func<T1, T2, T3, Boolean>")]
        public void ElseIf()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.ElseIf
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.ElseIf) + "(Func<T1, T2, T3, T4, Boolean>, Func<T1, T2, T3, T4, Boolean>, Action<T1, T2, T3, T4>) => Func<T1, T2, T3, T4, Boolean>")]
        public void ElseIf()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.ElseIf
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.ElseIf) + "(Func<U>, Func<Boolean>, Func<U>) => Func<U>")]
        public void ElseIf()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.ElseIf
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.ElseIf) + "(Func<T, U>, Func<T, Boolean>, Func<T, U>) => Func<T, U>")]
        public void ElseIf()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.ElseIf
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.ElseIf) + "(Func<T1, T2, U>, Func<T1, T2, Boolean>, Func<T1, T2, U>) => Func<T1, T2, U>")]
        public void ElseIf()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.ElseIf
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.ElseIf) + "(Func<T1, T2, T3, U>, Func<T1, T2, T3, Boolean>, Func<T1, T2, T3, U>) => Func<T1, T2, T3, U>")]
        public void ElseIf()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.ElseIf
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.ElseIf) + "(Func<T1, T2, T3, T4, U>, Func<T1, T2, T3, T4, Boolean>, Func<T1, T2, T3, T4, U>) => Func<T1, T2, T3, T4, U>")]
        public void ElseIf()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.ElseIf
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Else) + "(Func<Boolean>, Action) => Action")]
        public void Else()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Else) + "(Func<T1, Boolean>, Action<T1>) => Action<T1>")]
        public void Else()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Else) + "(Func<T1, T2, Boolean>, Action<T1, T2>) => Action<T1, T2>")]
        public void Else()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Else) + "(Func<T1, T2, T3, Boolean>, Action<T1, T2, T3>) => Action<T1, T2, T3>")]
        public void Else()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Else) + "(Func<T1, T2, T3, T4, Boolean>, Action<T1, T2, T3, T4>) => Action<T1, T2, T3, T4>")]
        public void Else()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Else) + "(Func<U>, Func<U>) => Func<U>")]
        public void Else()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Else) + "(Func<T1, U>, Func<T1, U>) => Func<T1, U>")]
        public void Else()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Else) + "(Func<T1, T2, U>, Func<T1, T2, U>) => Func<T1, T2, U>")]
        public void Else()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Else) + "(Func<T1, T2, T3, U>, Func<T1, T2, T3, U>) => Func<T1, T2, T3, U>")]
        public void Else()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Else) + "(Func<T1, T2, T3, T4, U>, Func<T1, T2, T3, T4, U>) => Func<T1, T2, T3, T4, U>")]
        public void Else()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Else) + "(Func<U>, U) => Func<U>")]
        public void Else()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Else) + "(Func<T1, U>, U) => Func<T1, U>")]
        public void Else()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Else) + "(Func<T1, T2, U>, U) => Func<T1, T2, U>")]
        public void Else()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Else) + "(Func<T1, T2, T3, U>, U) => Func<T1, T2, T3, U>")]
        public void Else()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Else) + "(Func<T1, T2, T3, T4, U>, U) => Func<T1, T2, T3, T4, U>")]
        public void Else()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Else
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Unless) + "(Action, Func<Boolean>[]) => Func<Boolean>")]
        public void Unless()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Unless) + "(Action, Func<T, Boolean>[]) => Func<T, Boolean>")]
        public void Unless()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Unless) + "(Action, Func<T1, T2, Boolean>[]) => Func<T1, T2, Boolean>")]
        public void Unless()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Unless) + "(Action, Func<T1, T2, T3, Boolean>[]) => Func<T1, T2, T3, Boolean>")]
        public void Unless()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Unless) + "(Action, Func<T1, T2, T3, T4, Boolean>[]) => Func<T1, T2, T3, T4, Boolean>")]
        public void Unless()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Unless) + "(Func<T>, Func<Boolean>[]) => Func<T>")]
        public void Unless()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Unless) + "(Func<T1>, Func<T2, Boolean>[]) => Func<T2, T1>")]
        public void Unless()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Unless) + "(Func<T1>, Func<T2, T3, Boolean>[]) => Func<T2, T3, T1>")]
        public void Unless()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Unless) + "(Func<T1>, Func<T2, T3, T4, Boolean>[]) => Func<T2, T3, T4, T1>")]
        public void Unless()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Unless) + "(Func<T1>, Func<T2, T3, T4, T5, Boolean>[]) => Func<T2, T3, T4, T5, T1>")]
        public void Unless()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Unless
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.And) + "(IEnumerable<Func<Boolean>>) => Func<Boolean>")]
        public void And()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.And
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.And) + "(IEnumerable<Func<T1, Boolean>>) => Func<T1, Boolean>")]
        public void And()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.And
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.And) + "(IEnumerable<Func<T1, T2, Boolean>>) => Func<T1, T2, Boolean>")]
        public void And()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.And
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.And) + "(IEnumerable<Func<T1, T2, T3, Boolean>>) => Func<T1, T2, T3, Boolean>")]
        public void And()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.And
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.And) + "(IEnumerable<Func<T1, T2, T3, T4, Boolean>>) => Func<T1, T2, T3, T4, Boolean>")]
        public void And()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.And
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Or) + "(IEnumerable<Func<Boolean>>) => Func<Boolean>")]
        public void Or()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Or
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Or) + "(IEnumerable<Func<T1, Boolean>>) => Func<T1, Boolean>")]
        public void Or()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Or
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(BooleanExt)+ "." + nameof(BooleanExt.Or) + "(IEnumerable<Func<T1, T2, Boolean>>) => Func<T1, T2, Boolean>")]
        public void Or()
        {
            // TODO: Implement method test LCore.Extensions.BooleanExt.Or
        }

    }
}
