// WARNING this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.Extensions;
namespace L_Tests.LCore.Extensions
{
    /*
    Covering class: LCore.Extensions.L.File
    
    LUnit has Autogenerated 6 method stubs:
    */
    public partial class L_FileTester : XUnitOutputTester, IDisposable
    {
        public L_FileTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.File)+ "." + nameof(L.File.BufferedMove) + "(String, String, Boolean, Int32)")]
        public void BufferedMove()
        {
            // TODO: Implement method test LCore.Extensions.L.File.BufferedMove
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.File)+ "." + nameof(L.File.CombinePaths) + "(String[]) => String")]
        public void CombinePaths()
        {
            // TODO: Implement method test LCore.Extensions.L.File.CombinePaths
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.File)+ "." + nameof(L.File.CombinePaths) + "(Char, String[]) => String")]
        public void CombinePaths()
        {
            // TODO: Implement method test LCore.Extensions.L.File.CombinePaths
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.File)+ "." + nameof(L.File.GetFileContents) + "(String) => Byte[]")]
        public void GetFileContents()
        {
            // TODO: Implement method test LCore.Extensions.L.File.GetFileContents
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.File)+ "." + nameof(L.File.SafeCopyFile) + "(String, String, Int32, Boolean) => Boolean")]
        public void SafeCopyFile()
        {
            // TODO: Implement method test LCore.Extensions.L.File.SafeCopyFile
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.File)+ "." + nameof(L.File.SafeMoveFile) + "(String, String, Int32, Boolean, Boolean) => Boolean")]
        public void SafeMoveFile()
        {
            // TODO: Implement method test LCore.Extensions.L.File.SafeMoveFile
        }

    }
}
