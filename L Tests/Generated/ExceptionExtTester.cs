// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.Extensions;
namespace L_Tests.LCore.Extensions
{
    ///<summary>
    /// Covering class: LCore.Extensions.ExceptionExt
    ///
    ///LUnit has Autogenerated 113 method stubs:
    ///</summary>
    public partial class ExceptionExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Fail) + "(Action<T1, T2, T3>) => Action<T1, T2, T3>")]
        public void Fail()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Fail) + "(Action<T1, T2, T3, T4>) => Action<T1, T2, T3, T4>")]
        public void Fail()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Fail) + "(Func<U>) => Func<U>")]
        public void Fail()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Fail) + "(Func<T, U>) => Func<T, U>")]
        public void Fail()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Fail) + "(Func<T1, T2, U>) => Func<T1, T2, U>")]
        public void Fail()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Fail) + "(Func<T1, T2, T3, U>) => Func<T1, T2, T3, U>")]
        public void Fail()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Fail) + "(Func<T1, T2, T3, T4, U>) => Func<T1, T2, T3, T4, U>")]
        public void Fail()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Throw) + "(Action, String) => Action")]
        public void Throw()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Throw) + "(Action<T>, String) => Action<T>")]
        public void Throw()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Throw) + "(Action<T1, T2>, String) => Action<T1, T2>")]
        public void Throw()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Throw) + "(Action<T1, T2, T3>, String) => Action<T1, T2, T3>")]
        public void Throw()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Throw) + "(Action<T1, T2, T3, T4>, String) => Action<T1, T2, T3, T4>")]
        public void Throw()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Throw) + "(Func<U>, String) => Func<U>")]
        public void Throw()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Throw) + "(Func<T, U>, String) => Func<T, U>")]
        public void Throw()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Throw) + "(Func<T1, T2, U>, String) => Func<T1, T2, U>")]
        public void Throw()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Throw) + "(Func<T1, T2, T3, U>, String) => Func<T1, T2, T3, U>")]
        public void Throw()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Throw) + "(Func<T1, T2, T3, T4, U>, String) => Func<T1, T2, T3, T4, U>")]
        public void Throw()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Throw
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Report) + "(Action, String, E) => Action")]
        public void Report()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Report) + "(Action<T>, String, E) => Action<T>")]
        public void Report()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Report) + "(Action<T1, T2>, String, E) => Action<T1, T2>")]
        public void Report()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Report) + "(Action<T1, T2, T3>, String, E) => Action<T1, T2, T3>")]
        public void Report()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Report) + "(Action<T1, T2, T3, T4>, String, E) => Action<T1, T2, T3, T4>")]
        public void Report()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Report) + "(Func<U>, String, E) => Func<U>")]
        public void Report()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Report) + "(Func<T, U>, String, E) => Func<T, U>")]
        public void Report()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Report) + "(Func<T1, T2, U>, String, E) => Func<T1, T2, U>")]
        public void Report()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Report) + "(Func<T1, T2, T3, U>, String, E) => Func<T1, T2, T3, U>")]
        public void Report()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Report) + "(Func<T1, T2, T3, T4, U>, String, E) => Func<T1, T2, T3, T4, U>")]
        public void Report()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Report) + "(Action, E) => Action")]
        public void Report()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Report) + "(Action<T>, E) => Action<T>")]
        public void Report()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Report) + "(Action<T1, T2>, E) => Action<T1, T2>")]
        public void Report()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Report) + "(Action<T1, T2, T3>, E) => Action<T1, T2, T3>")]
        public void Report()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Report) + "(Action<T1, T2, T3, T4>, E) => Action<T1, T2, T3, T4>")]
        public void Report()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Report) + "(Func<U>, E) => Func<U>")]
        public void Report()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Report) + "(Func<T, U>, E) => Func<T, U>")]
        public void Report()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Report) + "(Func<T1, T2, U>, E) => Func<T1, T2, U>")]
        public void Report()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Report) + "(Func<T1, T2, T3, U>, E) => Func<T1, T2, T3, U>")]
        public void Report()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Report) + "(Func<T1, T2, T3, T4, U>, E) => Func<T1, T2, T3, T4, U>")]
        public void Report()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Report
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Handle) + "(Action) => Action")]
        public void Handle()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Handle) + "(Action<T1>) => Action<T1>")]
        public void Handle()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Handle) + "(Action<T1, T2>) => Action<T1, T2>")]
        public void Handle()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Handle) + "(Action<T1, T2, T3>) => Action<T1, T2, T3>")]
        public void Handle()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Handle) + "(Action<T1, T2, T3, T4>) => Action<T1, T2, T3, T4>")]
        public void Handle()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Handle) + "(Func<U>) => Func<U>")]
        public void Handle()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Handle) + "(Func<T1, U>) => Func<T1, U>")]
        public void Handle()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Handle) + "(Func<T1, T2, U>) => Func<T1, T2, U>")]
        public void Handle()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Handle) + "(Func<T1, T2, T3, U>) => Func<T1, T2, T3, U>")]
        public void Handle()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Handle) + "(Func<T1, T2, T3, T4, U>) => Func<T1, T2, T3, T4, U>")]
        public void Handle()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Handle
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Try) + "(Action) => Func<Boolean>")]
        public void Try()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Try) + "(Action<T1>) => Func<T1, Boolean>")]
        public void Try()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Try) + "(Action<T1, T2>) => Func<T1, T2, Boolean>")]
        public void Try()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Try) + "(Action<T1, T2, T3>) => Func<T1, T2, T3, Boolean>")]
        public void Try()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Try) + "(Action<T1, T2, T3, T4>) => Func<T1, T2, T3, T4, Boolean>")]
        public void Try()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Try) + "(Func<U>) => Func<U>")]
        public void Try()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Try) + "(Func<T1, U>) => Func<T1, U>")]
        public void Try()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Try) + "(Func<T1, T2, U>) => Func<T1, T2, U>")]
        public void Try()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Try) + "(Func<T1, T2, T3, U>) => Func<T1, T2, T3, U>")]
        public void Try()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Try) + "(Func<T1, T2, T3, T4, U>) => Func<T1, T2, T3, T4, U>")]
        public void Try()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Try
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Action, Action<Exception>) => Action")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Action<T1>, Action<Exception>) => Action<T1>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Action<T1, T2>, Action<Exception>) => Action<T1, T2>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Action<T1, T2, T3>, Action<Exception>) => Action<T1, T2, T3>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Action<T1, T2, T3, T4>, Action<Exception>) => Action<T1, T2, T3, T4>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Func<U>, Action<Exception>) => Func<U>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Func<T1, U>, Action<Exception>) => Func<T1, U>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Func<T1, T2, U>, Action<Exception>) => Func<T1, T2, U>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Func<T1, T2, T3, U>, Action<Exception>) => Func<T1, T2, T3, U>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Func<T1, T2, T3, T4, U>, Action<Exception>) => Func<T1, T2, T3, T4, U>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Action, Action<E>) => Action")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Action<T1>, Action<E>) => Action<T1>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Action<T1, T2>, Action<E>) => Action<T1, T2>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Action<T1, T2, T3>, Action<E>) => Action<T1, T2, T3>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Action<T1, T2, T3, T4>, Action<E>) => Action<T1, T2, T3, T4>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Func<U>, Action<E>) => Func<U>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Func<T1, U>, Action<E>) => Func<T1, U>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Func<T1, T2, U>, Action<E>) => Func<T1, T2, U>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Func<T1, T2, T3, U>, Action<E>) => Func<T1, T2, T3, U>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Func<T1, T2, T3, T4, U>, Action<E>) => Func<T1, T2, T3, T4, U>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Func<U>, Func<E, U>) => Func<U>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Func<T1, U>, Func<E, U>) => Func<T1, U>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Func<T1, T2, U>, Func<E, U>) => Func<T1, T2, U>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Func<T1, T2, T3, U>, Func<E, U>) => Func<T1, T2, T3, U>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Func<T1, T2, T3, T4, U>, Func<E, U>) => Func<T1, T2, T3, T4, U>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Action) => Action")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Action<T1>) => Action<T1>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Action<T1, T2>) => Action<T1, T2>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Action<T1, T2, T3>) => Action<T1, T2, T3>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Action<T1, T2, T3, T4>) => Action<T1, T2, T3, T4>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Func<U>) => Func<U>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Func<T1, U>) => Func<T1, U>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Func<T1, T2, U>) => Func<T1, T2, U>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Func<T1, T2, T3, U>) => Func<T1, T2, T3, U>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Catch) + "(Func<T1, T2, T3, T4, U>) => Func<T1, T2, T3, T4, U>")]
        public void Catch()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Catch
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Retry) + "(Action, Int32) => Action")]
        public void Retry()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Retry) + "(Action<T>, Int32) => Action<T>")]
        public void Retry()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Retry) + "(Action<T1, T2>, Int32) => Action<T1, T2>")]
        public void Retry()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Retry) + "(Action<T1, T2, T3>, Int32) => Action<T1, T2, T3>")]
        public void Retry()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Retry) + "(Action<T1, T2, T3, T4>, Int32) => Action<T1, T2, T3, T4>")]
        public void Retry()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Retry) + "(Func<U>, Int32) => Func<U>")]
        public void Retry()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Retry) + "(Func<T1, U>, Int32) => Func<T1, U>")]
        public void Retry()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Retry) + "(Func<T1, T2, U>, Int32) => Func<T1, T2, U>")]
        public void Retry()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Retry) + "(Func<T1, T2, T3, U>, Int32) => Func<T1, T2, T3, U>")]
        public void Retry()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Retry) + "(Func<T1, T2, T3, T4, U>, Int32) => Func<T1, T2, T3, T4, U>")]
        public void Retry()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Retry
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Debug) + "(Action<T1>) => Action<T1>")]
        public void Debug()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Debug) + "(Action<T1, T2>) => Action<T1, T2>")]
        public void Debug()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Debug) + "(Action<T1, T2, T3>) => Action<T1, T2, T3>")]
        public void Debug()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Debug) + "(Action<T1, T2, T3, T4>) => Action<T1, T2, T3, T4>")]
        public void Debug()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Debug) + "(Func<T1, U>) => Func<T1, U>")]
        public void Debug()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Debug) + "(Func<T1, T2, U>) => Func<T1, T2, U>")]
        public void Debug()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Debug) + "(Func<T1, T2, T3, U>) => Func<T1, T2, T3, U>")]
        public void Debug()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Debug) + "(Func<T1, T2, T3, T4, U>) => Func<T1, T2, T3, T4, U>")]
        public void Debug()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Debug
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Fail) + "(Action) => Action")]
        public void Fail()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Fail) + "(Action<T>) => Action<T>")]
        public void Fail()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ExceptionExt)+ "." + nameof(ExceptionExt.Fail) + "(Action<T1, T2>) => Action<T1, T2>")]
        public void Fail()
        {
            // TODO: Implement method test LCore.Extensions.ExceptionExt.Fail
        }

    }
}
