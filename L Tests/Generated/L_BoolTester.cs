using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.Extensions;
/*
Covering class: Bool

LUnit has Autogenerated 15 method stubs:
*/
namespace L_Tests.LCore.Extensions
{
    public partial class L_BoolTester : XUnitOutputTester, IDisposable
    {
        public L_BoolTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_A) + "() => Func<Func<Boolean>, Action, Func<Boolean>>")]
        public void L_If_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_A) + "() => Func<Func<T1, Boolean>, Action<T1>, Func<T1, Boolean>>")]
        public void L_If_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_A) + "() => Func<Func<T1, T2, Boolean>, Action<T1, T2>, Func<T1, T2, Boolean>>")]
        public void L_If_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_A) + "() => Func<Func<T1, T2, T3, Boolean>, Action<T1, T2, T3>, Func<T1, T2, T3, Boolean>>")]
        public void L_If_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_A) + "() => Func<Func<T1, T2, T3, T4, Boolean>, Action<T1, T2, T3, T4>, Func<T1, T2, T3, T4, Boolean>>")]
        public void L_If_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_F) + "() => Func<Func<Boolean>, Func<U>, Func<U>>")]
        public void L_If_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_F) + "() => Func<Func<T1, Boolean>, Func<T1, U>, Func<T1, U>>")]
        public void L_If_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_F) + "() => Func<Func<T1, T2, Boolean>, Func<T1, T2, U>, Func<T1, T2, U>>")]
        public void L_If_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_F) + "() => Func<Func<T1, T2, T3, Boolean>, Func<T1, T2, T3, U>, Func<T1, T2, T3, U>>")]
        public void L_If_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_If_F) + "() => Func<Func<T1, T2, T3, T4, Boolean>, Func<T1, T2, T3, T4, U>, Func<T1, T2, T3, T4, U>>")]
        public void L_If_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_If_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_IfElse) + "() => Func<Func<Boolean>, Action, Action, Action>")]
        public void L_IfElse()
        {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_IfElse
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_IfElse) + "() => Func<Func<T1, Boolean>, Action<T1>, Action<T1>, Action<T1>>")]
        public void L_IfElse()
        {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_IfElse
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_IfElse) + "() => Func<Func<T1, T2, Boolean>, Action<T1, T2>, Action<T1, T2>, Action<T1, T2>>")]
        public void L_IfElse()
        {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_IfElse
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_IfElse) + "() => Func<Func<T1, T2, T3, Boolean>, Action<T1, T2, T3>, Action<T1, T2, T3>, Action<T1, T2, T3>>")]
        public void L_IfElse()
        {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_IfElse
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Bool)+ "." + nameof(L.Bool.L_IfElse) + "() => Func<Func<T1, T2, T3, T4, Boolean>, Action<T1, T2, T3, T4>, Action<T1, T2, T3, T4>, Action<T1, T2, T3, T4>>")]
        public void L_IfElse()
        {
            // TODO: Implement method test LCore.Extensions.L.Bool.L_IfElse
        }

    }
}
