// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.Extensions;
namespace L_Tests.LCore.Extensions
{
    ///<summary>
    /// Covering class: LCore.Extensions.L.Obj
    ///
    ///LUnit has Autogenerated 11 method stubs:
    ///</summary>
    public partial class L_ObjTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Obj)+ "." + nameof(L.Obj.As) + "() => Func<Object, T>")]
        public void As()
        {
            // TODO: Implement method test LCore.Extensions.L.Obj.As
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Obj)+ "." + nameof(L.Obj.Swap) + "(T&, T&)")]
        public void Swap()
        {
            // TODO: Implement method test LCore.Extensions.L.Obj.Swap
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Obj)+ "." + nameof(L.Obj.SafeEquals) + "(Object, Object) => Boolean")]
        public void SafeEquals()
        {
            // TODO: Implement method test LCore.Extensions.L.Obj.SafeEquals
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Obj)+ "." + nameof(L.Obj.New) + "(Object[]) => T")]
        public void New()
        {
            // TODO: Implement method test LCore.Extensions.L.Obj.New
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Obj)+ "." + nameof(L.Obj.NewRandom) + "(Nullable<T>, Nullable<T>) => T")]
        public void NewRandom()
        {
            // TODO: Implement method test LCore.Extensions.L.Obj.NewRandom
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Obj)+ "." + nameof(L.Obj.NewRandom) + "(Type, Object, Object) => Object")]
        public void NewRandom()
        {
            // TODO: Implement method test LCore.Extensions.L.Obj.NewRandom
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Obj)+ "." + nameof(L.Obj.IsNull) + "() => Func<T, Boolean>")]
        public void IsNull()
        {
            // TODO: Implement method test LCore.Extensions.L.Obj.IsNull
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Obj)+ "." + nameof(L.Obj.IsA) + "() => Func<Object, Boolean>")]
        public void IsA()
        {
            // TODO: Implement method test LCore.Extensions.L.Obj.IsA
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Obj)+ "." + nameof(L.Obj.HasProperty) + "() => Func<Object, String, Boolean>")]
        public void HasProperty()
        {
            // TODO: Implement method test LCore.Extensions.L.Obj.HasProperty
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Obj)+ "." + nameof(L.Obj.GetProperty) + "() => Func<Object, String, Object>")]
        public void GetProperty()
        {
            // TODO: Implement method test LCore.Extensions.L.Obj.GetProperty
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Obj)+ "." + nameof(L.Obj.SetProperty) + "() => Action<Object, String, Object>")]
        public void SetProperty()
        {
            // TODO: Implement method test LCore.Extensions.L.Obj.SetProperty
        }

    }
}
