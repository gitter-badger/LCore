// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.Extensions.Optional;
namespace L_Tests.LCore.Extensions.Optional
{
    ///<summary>
    /// Covering class: LCore.Extensions.Optional.ObjectExt
    ///
    ///LUnit has Autogenerated 19 method stubs:
    ///</summary>
    public partial class ObjectExtTester : XUnitOutputTester, IDisposable
    {
        public ObjectExtTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(global::LCore.Extensions.Optional)+ "." + nameof(ObjectExt)+ "." + nameof(ObjectExt.CopyFieldsTo) + "(T, Object)")]
        public void CopyFieldsTo()
        {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.CopyFieldsTo
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(global::LCore.Extensions.Optional)+ "." + nameof(ObjectExt)+ "." + nameof(ObjectExt.CopyFieldsTo) + "(T, Object, Dictionary<String, String>)")]
        public void CopyFieldsTo()
        {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.CopyFieldsTo
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(global::LCore.Extensions.Optional)+ "." + nameof(ObjectExt)+ "." + nameof(ObjectExt.CopyFieldsTo) + "(T, Object, Func<String, String>)")]
        public void CopyFieldsTo()
        {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.CopyFieldsTo
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(global::LCore.Extensions.Optional)+ "." + nameof(ObjectExt)+ "." + nameof(ObjectExt.Details) + "(T, Boolean) => String")]
        public void Details()
        {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.Details
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(global::LCore.Extensions.Optional)+ "." + nameof(ObjectExt)+ "." + nameof(ObjectExt.FN_CreateArray) + "(T) => Func<T[]>")]
        public void FN_CreateArray()
        {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_CreateArray
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(global::LCore.Extensions.Optional)+ "." + nameof(ObjectExt)+ "." + nameof(ObjectExt.FN_CreateArray) + "(T, Int32) => Func<T[]>")]
        public void FN_CreateArray()
        {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_CreateArray
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(global::LCore.Extensions.Optional)+ "." + nameof(ObjectExt)+ "." + nameof(ObjectExt.FN_CreateList) + "(T) => Func<List<T>>")]
        public void FN_CreateList()
        {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_CreateList
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(global::LCore.Extensions.Optional)+ "." + nameof(ObjectExt)+ "." + nameof(ObjectExt.FN_CreateList) + "(T, Int32) => Func<List<T>>")]
        public void FN_CreateList()
        {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_CreateList
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(global::LCore.Extensions.Optional)+ "." + nameof(ObjectExt)+ "." + nameof(ObjectExt.FN_Func) + "(T) => Func<T>")]
        public void FN_Func()
        {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_Func
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(global::LCore.Extensions.Optional)+ "." + nameof(ObjectExt)+ "." + nameof(ObjectExt.FN_If) + "(T) => Func<T, Boolean>")]
        public void FN_If()
        {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_If
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(global::LCore.Extensions.Optional)+ "." + nameof(ObjectExt)+ "." + nameof(ObjectExt.InitProperties) + "(Object, T)")]
        public void InitProperties()
        {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.InitProperties
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(global::LCore.Extensions.Optional)+ "." + nameof(ObjectExt)+ "." + nameof(ObjectExt.IsNull) + "(T) => Boolean")]
        public void IsNull()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(global::LCore.Extensions.Optional)+ "." + nameof(ObjectExt)+ "." + nameof(ObjectExt.Objects_ToString) + "(IEnumerable<Object>) => String")]
        public void Objects_ToString()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(global::LCore.Extensions.Optional)+ "." + nameof(ObjectExt)+ "." + nameof(ObjectExt.SafeEquals) + "(Object, Object) => Boolean")]
        public void SafeEquals()
        {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.SafeEquals
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(global::LCore.Extensions.Optional)+ "." + nameof(ObjectExt)+ "." + nameof(ObjectExt.SupplyTo) + "(T, Action<T>) => Action")]
        public void SupplyTo()
        {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.SupplyTo
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(global::LCore.Extensions.Optional)+ "." + nameof(ObjectExt)+ "." + nameof(ObjectExt.SupplyTo) + "(T, Func<T, U>) => Func<U>")]
        public void SupplyTo()
        {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.SupplyTo
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(global::LCore.Extensions.Optional)+ "." + nameof(ObjectExt)+ "." + nameof(ObjectExt.ToS) + "(Object) => String")]
        public void ToS()
        {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.ToS
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(global::LCore.Extensions.Optional)+ "." + nameof(ObjectExt)+ "." + nameof(ObjectExt.Traverse) + "(Object, Func<Object, Object>)")]
        public void Traverse()
        {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.Traverse
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(global::LCore.Extensions.Optional)+ "." + nameof(ObjectExt)+ "." + nameof(ObjectExt.Traverse) + "(T, Func<T, T>)")]
        public void Traverse()
        {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.Traverse
        }

    }
}
