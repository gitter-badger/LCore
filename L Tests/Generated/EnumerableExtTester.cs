// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.Extensions;
namespace L_Tests.LCore.Extensions
{
    ///<summary>
    /// Covering class: LCore.Extensions.EnumerableExt
    ///
    ///LUnit has Autogenerated 178 method stubs:
    ///</summary>
    public partial class EnumerableExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.RemoveDuplicates) + "(IEnumerable<T>) => List<T>")]
        public void RemoveDuplicates()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveDuplicates
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.RemoveDuplicates) + "(T[]) => T[]")]
        public void RemoveDuplicates()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveDuplicates
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.RemoveDuplicates) + "(IEnumerable) => List<T>")]
        public void RemoveDuplicates()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveDuplicates
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Mirror) + "(T[]) => T[]")]
        public void Mirror()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Mirror
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Mirror) + "(IEnumerable<T>) => List<T>")]
        public void Mirror()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Mirror
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Mirror) + "(IEnumerable) => List<T>")]
        public void Mirror()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Mirror
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Select) + "(T[], Func<T, Boolean>) => T[]")]
        public void Select()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Select
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Select) + "(IEnumerable<T>, Func<T, Boolean>) => List<T>")]
        public void Select()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Select
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Select) + "(IEnumerable, Func<T, Boolean>) => List<T>")]
        public void Select()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Select
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Select) + "(IEnumerable, Func<Int32, T, Boolean>) => List<T>")]
        public void Select()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Select
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Select) + "(T[], Func<Int32, T, Boolean>) => T[]")]
        public void Select()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Select
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Select) + "(List<T>, Func<Int32, T, Boolean>) => List<T>")]
        public void Select()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Select
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Select) + "(IEnumerable<T>, Func<Int32, T, Boolean>) => List<T>")]
        public void Select()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Select
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.SetAt) + "(IEnumerable, Int32, T)")]
        public void SetAt()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.SetAt
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.SetAt) + "(IEnumerable, UInt32, T)")]
        public void SetAt()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.SetAt
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.SetAt) + "(IEnumerable<T>, Int32, T)")]
        public void SetAt()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.SetAt
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.SetAt) + "(IEnumerable<T>, UInt32, T)")]
        public void SetAt()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.SetAt
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Shuffle) + "(IEnumerable<T>) => List<T>")]
        public void Shuffle()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Shuffle
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Shuffle) + "(T[]) => T[]")]
        public void Shuffle()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Shuffle
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Shuffle) + "(IEnumerable) => List<T>")]
        public void Shuffle()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Shuffle
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Sort) + "(IList)")]
        public void Sort()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Sort
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Sort) + "(IList<T>, Func<T, T, Int32>)")]
        public void Sort()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Sort
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Sort) + "(IList<T>, Func<T, IComparable>)")]
        public void Sort()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Sort
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Sum) + "(IEnumerable<T>, Func<T, U>) => UInt32")]
        public void Sum()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Sum
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Swap) + "(T[], Int32, Int32)")]
        public void Swap()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Swap
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Swap) + "(IList, Int32, Int32)")]
        public void Swap()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Swap
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.TotalCount) + "(IEnumerable) => Int32")]
        public void TotalCount()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.TotalCount
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.ToNestedArrays) + "(T[,]) => T[][]")]
        public void ToNestedArrays()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.ToNestedArrays
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.ToNestedArrays) + "(T[,,]) => T[][][]")]
        public void ToNestedArrays()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.ToNestedArrays
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.ToNestedArrays) + "(T[,,,]) => T[][][][]")]
        public void ToNestedArrays()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.ToNestedArrays
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.ToNestedArrays) + "(IEnumerable<IEnumerable<T>>) => T[][]")]
        public void ToNestedArrays()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.ToNestedArrays
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.ToNestedArrays) + "(IEnumerable<IEnumerable<IEnumerable<T>>>) => T[][][]")]
        public void ToNestedArrays()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.ToNestedArrays
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.ToNestedArrays) + "(IEnumerable<IEnumerable<IEnumerable<IEnumerable<T>>>>) => T[][][][]")]
        public void ToNestedArrays()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.ToNestedArrays
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.While) + "(IEnumerable, Func<T, Boolean>) => Boolean")]
        public void While()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.While) + "(IEnumerable, Func<Int32, T, Boolean>) => Boolean")]
        public void While()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.While) + "(IEnumerable<T>, Func<T, Boolean>) => Boolean")]
        public void While()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.While) + "(IEnumerable<T>, Func<Int32, T, Boolean>) => Boolean")]
        public void While()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.While) + "(Action<T>, Func<Boolean>, IEnumerable<T>)")]
        public void While()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.While
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.First) + "(IEnumerable<T>, Int32, Func<T, Boolean>) => List<T>")]
        public void First()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.First) + "(IEnumerable<T>, UInt32, Func<T, Boolean>) => List<T>")]
        public void First()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.First) + "(T[], Int32, Func<T, Boolean>) => T[]")]
        public void First()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.First) + "(T[], UInt32, Func<T, Boolean>) => T[]")]
        public void First()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.First) + "(IEnumerable, T) => T")]
        public void First()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Flatten) + "(IEnumerable) => List<T>")]
        public void Flatten()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Flatten
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.GetAt) + "(IEnumerable, Int32) => Object")]
        public void GetAt()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GetAt
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.GetAt) + "(IEnumerable, UInt32) => Object")]
        public void GetAt()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GetAt
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.GetAt) + "(IEnumerable<T>, Int32) => T")]
        public void GetAt()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GetAt
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.GetAt) + "(IEnumerable<T>, UInt32) => T")]
        public void GetAt()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GetAt
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.GetAtIndices) + "(T[], Int32[]) => T[]")]
        public void GetAtIndices()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GetAtIndices
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.GetAtIndices) + "(IEnumerable, Int32[]) => List<T>")]
        public void GetAtIndices()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GetAtIndices
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.GetAtIndices) + "(IEnumerable<T>, Int32[]) => List<T>")]
        public void GetAtIndices()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GetAtIndices
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Group) + "(IEnumerable<T>) => Dictionary<String, List<T>>")]
        public void Group()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Group
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Group) + "(IEnumerable<TValue>, Func<TValue, TKey>) => Dictionary<TKey, List<TValue>>")]
        public void Group()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Group
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.GroupTwice) + "(IEnumerable<T>, Func<T, U>, Func<T, V>) => Dictionary<U, Dictionary<V, List<T>>>")]
        public void GroupTwice()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.GroupTwice
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Has) + "(IEnumerable, T) => Boolean")]
        public void Has()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Has
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Has) + "(IEnumerable, Int32, T) => Boolean")]
        public void Has()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Has
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Has) + "(IEnumerable, UInt32, T) => Boolean")]
        public void Has()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Has
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.HasAny) + "(IEnumerable, IEnumerable) => Boolean")]
        public void HasAny()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.HasAny
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.HasAny) + "(IEnumerable<T>, IEnumerable<T>) => Boolean")]
        public void HasAny()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.HasAny
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.HasAny) + "(IEnumerable, Object[]) => Boolean")]
        public void HasAny()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.HasAny
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.HasAny) + "(IEnumerable<T>, T[]) => Boolean")]
        public void HasAny()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.HasAny
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Has) + "(IEnumerable, Func<T, Boolean>) => Boolean")]
        public void Has()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Has
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Has) + "(IEnumerable<T>, Func<T, Boolean>) => Boolean")]
        public void Has()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Has
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.HasIndex) + "(IEnumerable, Int32) => Boolean")]
        public void HasIndex()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.HasIndex
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.HasIndex) + "(IEnumerable, UInt32) => Boolean")]
        public void HasIndex()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.HasIndex
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Index) + "(IEnumerable, Func<Object, U>) => Dictionary<U, Object>")]
        public void Index()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Index
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Index) + "(IEnumerable<T>, Func<T, U>) => Dictionary<U, T>")]
        public void Index()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Index
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.IndexTwice) + "(IEnumerable<T>, Func<T, U>, Func<T, V>) => Dictionary<U, Dictionary<V, T>>")]
        public void IndexTwice()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.IndexTwice
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.IndexOf) + "(IEnumerable, Func<T, Boolean>) => Nullable<Int32>")]
        public void IndexOf()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.IndexOf
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.IndexOf) + "(IEnumerable<T>, Func<T, Boolean>) => Nullable<Int32>")]
        public void IndexOf()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.IndexOf
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.IsEmpty) + "(IEnumerable) => Boolean")]
        public void IsEmpty()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.IsEmpty
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Last) + "(IEnumerable, Func<T, Boolean>) => T")]
        public void Last()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Last) + "(T[], Func<Object, Boolean>) => T")]
        public void Last()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Last) + "(IEnumerable<T>, Func<T, Boolean>) => T")]
        public void Last()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Last) + "(IEnumerable, Int32, Func<T, Boolean>) => List<T>")]
        public void Last()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Last) + "(IEnumerable, UInt32, Func<T, Boolean>) => List<T>")]
        public void Last()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Last) + "(IEnumerable<T>, Int32, Func<T, Boolean>) => List<T>")]
        public void Last()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Last) + "(IEnumerable<T>, UInt32, Func<T, Boolean>) => List<T>")]
        public void Last()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Last) + "(T[], Int32, Func<T, Boolean>) => T[]")]
        public void Last()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Last) + "(T[], UInt32, Func<T, Boolean>) => T[]")]
        public void Last()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Last) + "(IEnumerable, T) => T")]
        public void Last()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Last
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.List) + "(IEnumerable, Boolean) => List<Object>")]
        public void List()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.List
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.List) + "(IEnumerable<T>, Boolean) => List<T>")]
        public void List()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.List
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.List) + "(IEnumerable, Boolean) => List<T>")]
        public void List()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.List
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.List) + "(IEnumerable<T>, Boolean) => List<U>")]
        public void List()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.List
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Move) + "(T[], Int32, Int32)")]
        public void Move()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Move
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Move) + "(IList, Int32, Int32)")]
        public void Move()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Move
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Percent) + "(IEnumerable<T>, Func<T, Boolean>) => Int32")]
        public void Percent()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Percent
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Named) + "(IEnumerable, String) => List<INamed>")]
        public void Named()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Named
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Named) + "(T[], String) => T[]")]
        public void Named()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Named
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Named) + "(IEnumerable<T>, String) => IEnumerable<T>")]
        public void Named()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Named
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Named) + "(IEnumerable, String, Func<Object, String>) => List<Object>")]
        public void Named()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Named
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Named) + "(IEnumerable<T>, String, Func<T, String>) => List<T>")]
        public void Named()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Named) + "(T[], String, Func<T, String>) => T[]")]
        public void Named()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Random) + "(IEnumerable<T>, Int32, Boolean) => List<T>")]
        public void Random()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Random
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Random) + "(IEnumerable<T>, UInt32, Boolean) => List<T>")]
        public void Random()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Random
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Random) + "(T[], Int32, Boolean) => T[]")]
        public void Random()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Random
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Random) + "(T[], UInt32, Boolean) => T[]")]
        public void Random()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Random
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Random) + "(IEnumerable<T>) => T")]
        public void Random()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Random
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Remove) + "(IEnumerable<T>, T[]) => List<T>")]
        public void Remove()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Remove
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Remove) + "(IEnumerable<T>, Func<T, Boolean>) => List<T>")]
        public void Remove()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Remove
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Remove) + "(IEnumerable<T>, Func<Int32, T, Boolean>) => List<T>")]
        public void Remove()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Remove
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.RemoveAt) + "(IEnumerable<T>, Int32[]) => List<T>")]
        public void RemoveAt()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveAt
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.RemoveAt) + "(T[], Int32[]) => T[]")]
        public void RemoveAt()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveAt
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.RemoveDuplicate) + "(IEnumerable<T>, Func<T, U>) => List<T>")]
        public void RemoveDuplicate()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveDuplicate
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.RemoveDuplicate) + "(T[], Func<T, U>) => T[]")]
        public void RemoveDuplicate()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveDuplicate
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.RemoveDuplicate) + "(IEnumerable, Func<T, U>) => List<T>")]
        public void RemoveDuplicate()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.RemoveDuplicate
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Add) + "(T[], IEnumerable<T>) => T[]")]
        public void Add()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Add) + "(T[], T[]) => T[]")]
        public void Add()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Add) + "(List<T>, T[])")]
        public void Add()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Add) + "(List<T>, IEnumerable<T>)")]
        public void Add()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.AddTo) + "(IEnumerable<T>, ICollection)")]
        public void AddTo()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.AddTo
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.All) + "(IEnumerable, Func<Object, Boolean>) => Boolean")]
        public void All()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.All
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.All) + "(IEnumerable<T>, Func<T, Boolean>) => Boolean")]
        public void All()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.All
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.All) + "(IEnumerable, Func<Int32, Object, Boolean>) => Boolean")]
        public void All()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.All
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.All) + "(IEnumerable, Func<Int32, T, Boolean>) => Boolean")]
        public void All()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.All
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.All) + "(IEnumerable<T>, Func<Int32, T, Boolean>) => Boolean")]
        public void All()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.All
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Append) + "(T[], T[]) => T[]")]
        public void Append()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Append
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Array) + "(IEnumerable) => Object[]")]
        public void Array()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Array
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Array) + "(IEnumerable) => T[]")]
        public void Array()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Array
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Array) + "(IEnumerable<T>) => T[]")]
        public void Array()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Array
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Array) + "(IEnumerable<T>) => U[]")]
        public void Array()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Array
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Collect) + "(IEnumerable, Func<T, T>) => List<T>")]
        public void Collect()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Collect) + "(IEnumerable<T>, Func<T, T>) => List<T>")]
        public void Collect()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Collect) + "(T[], Func<T, T>) => T[]")]
        public void Collect()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Collect) + "(List<T>, Func<T, T>) => List<T>")]
        public void Collect()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Collect) + "(IEnumerable, Func<Int32, Object, Object>) => List<Object>")]
        public void Collect()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Collect) + "(IEnumerable, Func<Int32, T, T>) => List<T>")]
        public void Collect()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Collect) + "(IEnumerable<T>, Func<Int32, T, T>) => List<T>")]
        public void Collect()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Collect) + "(T[], Func<Int32, T, T>) => T[]")]
        public void Collect()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Collect) + "(List<T>, Func<Int32, T, T>) => List<T>")]
        public void Collect()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Collect) + "(Func<T>, Int32) => List<T>")]
        public void Collect()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Collect) + "(Func<Int32, T>, Int32) => List<T>")]
        public void Collect()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Collect
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.CollectStr) + "(String, Func<Char, Char>) => String")]
        public void CollectStr()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.CollectStr
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.CollectStr) + "(List<T>, Func<Int32, T, String>) => String")]
        public void CollectStr()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.CollectStr
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.CollectStr) + "(T[], Func<Int32, T, String>) => String")]
        public void CollectStr()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.CollectStr
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.CollectStr) + "(U, Func<Int32, T, String>) => String")]
        public void CollectStr()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Combine) + "(IEnumerable<String>) => String")]
        public void Combine()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Combine) + "(IEnumerable<String>, Char) => String")]
        public void Combine()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Combine) + "(IEnumerable<T>, String) => String")]
        public void Combine()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Combine
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Combine) + "(IEnumerable<T>, Char) => String")]
        public void Combine()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Combine
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Convert) + "(IEnumerable, Func<Object, Object>) => List<Object>")]
        public void Convert()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Convert) + "(T[], Func<T, U>) => U[]")]
        public void Convert()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Convert) + "(List<T>, Func<T, U>) => List<U>")]
        public void Convert()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Convert) + "(IEnumerable<T>, Func<T, U>) => List<U>")]
        public void Convert()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.ConvertAll) + "(IEnumerable, Func<Object, IEnumerable<Object>>) => List<Object>")]
        public void ConvertAll()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.ConvertAll
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.ConvertAll) + "(IEnumerable, Func<T, IEnumerable<U>>) => List<U>")]
        public void ConvertAll()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.ConvertAll
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.ConvertAll) + "(IEnumerable<T>, Func<T, IEnumerable<U>>) => List<U>")]
        public void ConvertAll()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.ConvertAll
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.ConvertAll) + "(T[], Func<T, IEnumerable<U>>) => U[]")]
        public void ConvertAll()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.ConvertAll
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.ConvertAll) + "(List<T>, Func<T, IEnumerable<U>>) => List<U>")]
        public void ConvertAll()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.ConvertAll
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Convert) + "(IEnumerable, Func<Int32, Object, Object>) => List<Object>")]
        public void Convert()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Convert) + "(T[], Func<Int32, T, U>) => U[]")]
        public void Convert()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Convert) + "(List<T>, Func<Int32, T, U>) => List<U>")]
        public void Convert()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Convert) + "(IEnumerable<T>, Func<Int32, T, U>) => List<U>")]
        public void Convert()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Convert
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Count) + "(T) => UInt32")]
        public void Count()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Count
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Count) + "(IEnumerable<T>, T) => UInt32")]
        public void Count()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Count
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Count) + "(IEnumerable<T>, Func<T, Boolean>) => UInt32")]
        public void Count()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Count
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Cycle) + "(IEnumerable, Func<Object, Boolean>)")]
        public void Cycle()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Cycle
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Cycle) + "(IEnumerable<T>, Func<T, Boolean>)")]
        public void Cycle()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Cycle
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Each) + "(IEnumerable, Action<Object>)")]
        public void Each()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Each) + "(IEnumerable, Action<T>)")]
        public void Each()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Each) + "(IEnumerable<T>, Action<T>)")]
        public void Each()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Each) + "(IEnumerable, Action<Int32, Object>)")]
        public void Each()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Each) + "(IEnumerable, Action<Int32, Object>)")]
        public void Each()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Each) + "(IEnumerable<T>, Action<Int32, T>)")]
        public void Each()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Each) + "(Action<T>, IEnumerable<T>)")]
        public void Each()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Each
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Equivalent) + "(IEnumerable, IEnumerable) => Boolean")]
        public void Equivalent()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Equivalent
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Fill) + "(T[], T) => T[]")]
        public void Fill()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Fill
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Fill) + "(List<T>, T) => List<T>")]
        public void Fill()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Fill
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Fill) + "(T[], Func<T, T>) => T[]")]
        public void Fill()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Fill
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Filter) + "(IEnumerable, Boolean) => List<T>")]
        public void Filter()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Filter
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Filter) + "(T[], Boolean) => U[]")]
        public void Filter()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Filter
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.Filter) + "(List<T>, Boolean) => List<U>")]
        public void Filter()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.Filter
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.First) + "(IEnumerable, Func<T, Boolean>) => T")]
        public void First()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.First) + "(T[], Func<Object, Boolean>) => T")]
        public void First()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.First) + "(IEnumerable<T>, Func<T, Boolean>) => T")]
        public void First()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.First) + "(IEnumerable, Int32, Func<T, Boolean>) => List<T>")]
        public void First()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(EnumerableExt)+ "." + nameof(EnumerableExt.First) + "(IEnumerable, UInt32, Func<T, Boolean>) => List<T>")]
        public void First()
        {
            // TODO: Implement method test LCore.Extensions.EnumerableExt.First
        }

    }
}
