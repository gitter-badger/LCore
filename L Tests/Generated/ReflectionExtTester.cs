// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.Extensions;
namespace L_Tests.LCore.Extensions
{
    ///<summary>
    /// Covering class: LCore.Extensions.ReflectionExt
    ///
    ///LUnit has Autogenerated 83 method stubs:
    ///</summary>
    public partial class ReflectionExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.AlsoBaseTypes) + "(Type) => List<Type>")]
        public void AlsoBaseTypes()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.AlsoBaseTypes
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.BaseTypes) + "(Type) => List<Type>")]
        public void BaseTypes()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.BaseTypes
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.CanBeNull) + "(ParameterInfo) => Boolean")]
        public void CanBeNull()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.CanBeNull
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.FindMethod) + "(Type, String, Type[]) => MethodInfo")]
        public void FindMethod()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.FindMethod
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.FindMethod) + "(Type, String) => MethodInfo")]
        public void FindMethod()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.FindMethod
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.FindMethod) + "(Type, String) => MethodInfo")]
        public void FindMethod()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.FindMethod
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.FindMethod) + "(Type, String) => MethodInfo")]
        public void FindMethod()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.FindMethod
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.FindMethod) + "(Type, String) => MethodInfo")]
        public void FindMethod()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.FindMethod
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.FullyQualifiedName) + "(MemberInfo) => String")]
        public void FullyQualifiedName()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.FullyQualifiedName
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.FullyQualifiedName) + "(ParameterInfo) => String")]
        public void FullyQualifiedName()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.FullyQualifiedName
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetAssembly) + "(MemberInfo) => Assembly")]
        public void GetAssembly()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetAssembly
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetAttribute) + "(ICustomAttributeProvider) => T")]
        public void GetAttribute()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetAttribute
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetAttribute) + "(ICustomAttributeProvider, Boolean) => T")]
        public void GetAttribute()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetAttribute
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetAttributes) + "(ICustomAttributeProvider, Boolean) => List<T>")]
        public void GetAttributes()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetAttributes
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetAttributeTypeName) + "(ICustomAttributeProvider) => String")]
        public void GetAttributeTypeName()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetAttributeTypeName
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetComparer) + "(MemberInfo) => IComparer")]
        public void GetComparer()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetComparer
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetComparer) + "(MemberInfo) => IComparer<T>")]
        public void GetComparer()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetComparer
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetExtensionMethods) + "(Type) => MethodInfo[]")]
        public void GetExtensionMethods()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetExtensionMethods
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetMemberType) + "(MemberInfo) => Type")]
        public void GetMemberType()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetMemberType
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetNamespace) + "(MemberInfo) => String")]
        public void GetNamespace()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetNamespace
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetNestedNames) + "(Type) => String")]
        public void GetNestedNames()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetNestedNames
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetSubClass) + "(Type, String) => Type")]
        public void GetSubClass()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetSubClass
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetSubClasses) + "(Type) => List<Type>")]
        public void GetSubClasses()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetSubClasses
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetFriendlyTypeName) + "(Type) => String")]
        public void GetFriendlyTypeName()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetFriendlyTypeName
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetValue) + "(MemberInfo, Object) => Object")]
        public void GetValue()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetValue
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetValues) + "(Type, Object, Boolean) => List<T>")]
        public void GetValues()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetValues
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetValues) + "(IEnumerable<MemberInfo>, Object, Boolean) => List<T>")]
        public void GetValues()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetValues
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetTypes) + "(IEnumerable<T>) => List<Type>")]
        public void GetTypes()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetTypes
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetTypes) + "(T[]) => Type[]")]
        public void GetTypes()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetTypes
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.HasAttribute) + "(ICustomAttributeProvider) => Boolean")]
        public void HasAttribute()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasAttribute
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.HasAttribute) + "(ICustomAttributeProvider, Boolean) => Boolean")]
        public void HasAttribute()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasAttribute
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.HasAttribute) + "(ICustomAttributeProvider, Type, Boolean) => Boolean")]
        public void HasAttribute()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasAttribute
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.HasInterface) + "(Type, Type) => Boolean")]
        public void HasInterface()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasInterface
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.HasInterface) + "(Type) => Boolean")]
        public void HasInterface()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasInterface
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.HasIndexGetter) + "(Type) => Boolean")]
        public void HasIndexGetter()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasIndexGetter
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.HasIndexGetter) + "(Type) => Boolean")]
        public void HasIndexGetter()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasIndexGetter
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.HasIndexSetter) + "(Type) => Boolean")]
        public void HasIndexSetter()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasIndexSetter
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.HasIndexSetter) + "(Type) => Boolean")]
        public void HasIndexSetter()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasIndexSetter
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.HasSetter) + "(MemberInfo) => Boolean")]
        public void HasSetter()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.HasSetter
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IndexGetter) + "(Type) => PropertyInfo")]
        public void IndexGetter()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IndexGetter
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IndexGetter) + "(Type) => PropertyInfo")]
        public void IndexGetter()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IndexGetter
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IndexSetter) + "(Type) => PropertyInfo")]
        public void IndexSetter()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IndexSetter
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IndexSetter) + "(Type) => PropertyInfo")]
        public void IndexSetter()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IndexSetter
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.InstantiateValues) + "(Type, Object, Boolean) => List<T>")]
        public void InstantiateValues()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.InstantiateValues
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.InstantiateValues) + "(IEnumerable<MemberInfo>, Object) => List<T>")]
        public void InstantiateValues()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.InstantiateValues
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsExtensionMethod) + "(MethodInfo) => Boolean")]
        public void IsExtensionMethod()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsExtensionMethod
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsNullable) + "(Type) => Boolean")]
        public void IsNullable()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsNullable
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsOperator) + "(MethodInfo) => Boolean")]
        public void IsOperator()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsOperator
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsType) + "(Object) => Boolean")]
        public void IsType()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsType
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsType) + "(Object, Type) => Boolean")]
        public void IsType()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsType
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsType) + "(Type, Type) => Boolean")]
        public void IsType()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsType
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsType) + "(Type) => Boolean")]
        public void IsType()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsType
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsStatic) + "(Type) => Boolean")]
        public void IsStatic()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsStatic
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.MembersOfType) + "(Type, Type, Boolean) => List<MemberInfo>")]
        public void MembersOfType()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.MembersOfType
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.MemberType) + "(MemberInfo) => Type")]
        public void MemberType()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.MemberType
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.New) + "(Type, Object[]) => T")]
        public void New()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.New
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.New) + "(Type, Object[], Type) => Object")]
        public void New()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.New
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.NewRandom) + "(Type, Object, Object) => Object")]
        public void NewRandom()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.NewRandom
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.SetValue) + "(MemberInfo, Object, Object)")]
        public void SetValue()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.SetValue
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.ToInvocationSignature) + "(MethodInfo, Boolean) => String")]
        public void ToInvocationSignature()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.ToInvocationSignature
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.TypeEquals) + "(Type, Type) => Boolean")]
        public void TypeEquals()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.TypeEquals
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.WithAttribute) + "(IEnumerable<TMember>, Boolean) => List<TMember>")]
        public void WithAttribute()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.WithAttribute
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.WithAttribute) + "(IEnumerable<MemberInfo>, Boolean) => List<MemberInfo>")]
        public void WithAttribute()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.WithAttribute
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.WithAttribute) + "(IEnumerable<MemberInfo>, Type, Boolean) => List<MemberInfo>")]
        public void WithAttribute()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.WithAttribute
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.WithoutAttribute) + "(IEnumerable<TMember>, Boolean) => List<TMember>")]
        public void WithoutAttribute()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.WithoutAttribute
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.WithoutAttribute) + "(IEnumerable<MemberInfo>, Boolean) => List<MemberInfo>")]
        public void WithoutAttribute()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.WithoutAttribute
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.WithoutAttribute) + "(IEnumerable<MemberInfo>, Type, Boolean) => List<MemberInfo>")]
        public void WithoutAttribute()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.WithoutAttribute
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.ToParameterSignature) + "(MethodInfo) => String")]
        public void ToParameterSignature()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.ToParameterSignature
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetGenericName) + "(Type) => String")]
        public void GetGenericName()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetGenericName
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsPropertyGetterOrSetter) + "(MethodInfo) => Boolean")]
        public void IsPropertyGetterOrSetter()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsPropertyGetterOrSetter
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsDeclaredMember) + "(MemberInfo) => Boolean")]
        public void IsDeclaredMember()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsDeclaredMember
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsInheritedMember) + "(MemberInfo) => Boolean")]
        public void IsInheritedMember()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsInheritedMember
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsTestAssembly) + "(Assembly) => Boolean")]
        public void IsTestAssembly()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsTestAssembly
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetRootPath) + "(Assembly) => String")]
        public void GetRootPath()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetRootPath
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.FindClassFile) + "(Type) => String")]
        public void FindClassFile()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.FindClassFile
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsOverride) + "(MethodInfo) => Boolean")]
        public void IsOverride()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsOverride
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsSealed) + "(MethodInfo) => Boolean")]
        public void IsSealed()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsSealed
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsProtected) + "(MethodInfo) => Boolean")]
        public void IsProtected()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsProtected
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsProtected) + "(FieldInfo) => Boolean")]
        public void IsProtected()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsProtected
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsProtected) + "(Type) => Boolean")]
        public void IsProtected()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsProtected
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsInternal) + "(MethodInfo) => Boolean")]
        public void IsInternal()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsInternal
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsInternal) + "(FieldInfo) => Boolean")]
        public void IsInternal()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsInternal
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsInternal) + "(Type) => Boolean")]
        public void IsInternal()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsInternal
        }

    }
}
