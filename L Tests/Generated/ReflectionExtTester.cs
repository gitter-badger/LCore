// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.Extensions;
namespace L_Tests.LCore.Extensions
{
    ///<summary>
    /// Covering class: LCore.Extensions.ReflectionExt
    ///
    ///LUnit has Autogenerated 8 method stubs:
    ///</summary>
    public partial class ReflectionExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsOperator) + "(MethodInfo) => Boolean")]
        public void IsOperator()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsOperator
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.NewRandom) + "(Type, Object, Object) => Object")]
        public void NewRandom()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.NewRandom
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.ToParameterSignature) + "(MethodInfo) => String")]
        public void ToParameterSignature()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.ToParameterSignature
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.GetGenericName) + "(Type) => String")]
        public void GetGenericName()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.GetGenericName
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsPropertyGetterOrSetter) + "(MethodInfo) => Boolean")]
        public void IsPropertyGetterOrSetter()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsPropertyGetterOrSetter
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsDeclaredMember) + "(MemberInfo) => Boolean")]
        public void IsDeclaredMember()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsDeclaredMember
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsInheritedMember) + "(MemberInfo) => Boolean")]
        public void IsInheritedMember()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsInheritedMember
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(ReflectionExt)+ "." + nameof(ReflectionExt.IsTestAssembly) + "(Assembly) => Boolean")]
        public void IsTestAssembly()
        {
            // TODO: Implement method test LCore.Extensions.ReflectionExt.IsTestAssembly
        }

    }
}
