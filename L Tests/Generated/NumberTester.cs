// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.Numbers;
namespace L_Tests.LCore.Numbers
{
    ///<summary>
    /// Covering class: LCore.Numbers.Number
    ///
    ///LUnit has Autogenerated 30 method stubs:
    ///</summary>
    public partial class NumberTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Numbers)+ "." + nameof(Number)+ "." + nameof(Number.Equals) + "(Object) => Boolean")]
        public void Equals()
        {
            // TODO: Implement method test LCore.Numbers.Number.Equals
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Numbers)+ "." + nameof(Number)+ "." + nameof(Number.ToString) + "() => String")]
        public new void ToString()
        {
            // TODO: Implement method test LCore.Numbers.Number.ToString
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number.op_GreaterThan(Number, IComparable) => Boolean")]
        public void op_GreaterThan()
        {
            // TODO: Implement method test LCore.Numbers.Number.op_GreaterThan
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number.op_LessThan(Number, IComparable) => Boolean")]
        public void op_LessThan()
        {
            // TODO: Implement method test LCore.Numbers.Number.op_LessThan
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number.op_GreaterThanOrEqual(Number, IComparable) => Boolean")]
        public void op_GreaterThanOrEqual()
        {
            // TODO: Implement method test LCore.Numbers.Number.op_GreaterThanOrEqual
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number.op_LessThanOrEqual(Number, IComparable) => Boolean")]
        public void op_LessThanOrEqual()
        {
            // TODO: Implement method test LCore.Numbers.Number.op_LessThanOrEqual
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number.op_Equality(Number, IComparable) => Boolean")]
        public void op_Equality()
        {
            // TODO: Implement method test LCore.Numbers.Number.op_Equality
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number.op_Inequality(Number, IComparable) => Boolean")]
        public void op_Inequality()
        {
            // TODO: Implement method test LCore.Numbers.Number.op_Inequality
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Numbers)+ "." + nameof(Number)+ "." + nameof(Number.GetHashCode) + "() => Int32")]
        public new void GetHashCode()
        {
            // TODO: Implement method test LCore.Numbers.Number.GetHashCode
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number.op_Division(Number, IConvertible) => Number")]
        public void op_Division()
        {
            // TODO: Implement method test LCore.Numbers.Number.op_Division
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number.op_Division(Number, Number) => Number")]
        public void op_Division()
        {
            // TODO: Implement method test LCore.Numbers.Number.op_Division
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number.op_Multiply(Number, IConvertible) => Number")]
        public void op_Multiply()
        {
            // TODO: Implement method test LCore.Numbers.Number.op_Multiply
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number.op_Multiply(Number, Number) => Number")]
        public void op_Multiply()
        {
            // TODO: Implement method test LCore.Numbers.Number.op_Multiply
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number.op_Subtraction(Number, IConvertible) => Number")]
        public void op_Subtraction()
        {
            // TODO: Implement method test LCore.Numbers.Number.op_Subtraction
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number.op_Subtraction(Number, Number) => Number")]
        public void op_Subtraction()
        {
            // TODO: Implement method test LCore.Numbers.Number.op_Subtraction
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number.op_Addition(Number, IConvertible) => Number")]
        public void op_Addition()
        {
            // TODO: Implement method test LCore.Numbers.Number.op_Addition
        }

        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.Number.op_Addition(Number, Number) => Number")]
        public void op_Addition()
        {
            // TODO: Implement method test LCore.Numbers.Number.op_Addition
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Numbers)+ "." + nameof(Number)+ "." + nameof(Number.CompareTo) + "(Object) => Int32")]
        public void CompareTo()
        {
            // TODO: Implement method test LCore.Numbers.Number.CompareTo
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Numbers)+ "." + nameof(Number)+ "." + nameof(Number.New) + "(Object) => Number")]
        public void New()
        {
            // TODO: Implement method test LCore.Numbers.Number.New
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Numbers)+ "." + nameof(Number)+ "." + nameof(Number.Divide) + "(Number) => Number")]
        public void Divide()
        {
            // TODO: Implement method test LCore.Numbers.Number.Divide
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Numbers)+ "." + nameof(Number)+ "." + nameof(Number.Multiply) + "(Number) => Number")]
        public void Multiply()
        {
            // TODO: Implement method test LCore.Numbers.Number.Multiply
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Numbers)+ "." + nameof(Number)+ "." + nameof(Number.Subtract) + "(Number) => Number")]
        public void Subtract()
        {
            // TODO: Implement method test LCore.Numbers.Number.Subtract
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Numbers)+ "." + nameof(Number)+ "." + nameof(Number.Add) + "(Number) => Number")]
        public void Add()
        {
            // TODO: Implement method test LCore.Numbers.Number.Add
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Numbers)+ "." + nameof(Number)+ "." + nameof(Number.Divide) + "(IConvertible) => Number")]
        public void Divide()
        {
            // TODO: Implement method test LCore.Numbers.Number.Divide
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Numbers)+ "." + nameof(Number)+ "." + nameof(Number.Multiply) + "(IConvertible) => Number")]
        public void Multiply()
        {
            // TODO: Implement method test LCore.Numbers.Number.Multiply
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Numbers)+ "." + nameof(Number)+ "." + nameof(Number.Subtract) + "(IConvertible) => Number")]
        public void Subtract()
        {
            // TODO: Implement method test LCore.Numbers.Number.Subtract
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Numbers)+ "." + nameof(Number)+ "." + nameof(Number.Add) + "(IConvertible) => Number")]
        public void Add()
        {
            // TODO: Implement method test LCore.Numbers.Number.Add
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Numbers)+ "." + nameof(Number)+ "." + nameof(Number.GetValuePrecision) + "() => Number")]
        public void GetValuePrecision()
        {
            // TODO: Implement method test LCore.Numbers.Number.GetValuePrecision
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Numbers)+ "." + nameof(Number)+ "." + nameof(Number.GetValue) + "() => Object")]
        public void GetValue()
        {
            // TODO: Implement method test LCore.Numbers.Number.GetValue
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Numbers)+ "." + nameof(Number)+ "." + nameof(Number.ConvertToBestMatch) + "() => Number")]
        public void ConvertToBestMatch()
        {
            // TODO: Implement method test LCore.Numbers.Number.ConvertToBestMatch
        }

    }
}
