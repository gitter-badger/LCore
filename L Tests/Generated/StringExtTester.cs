// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.Extensions;
namespace L_Tests.LCore.Extensions
{
    ///<summary>
    /// Covering class: LCore.Extensions.StringExt
    ///
    ///LUnit has Autogenerated 65 method stubs:
    ///</summary>
    public partial class StringExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Add) + "(String, Char[]) => String")]
        public void Add()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Add) + "(String, IEnumerable<Char>) => String")]
        public void Add()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.After) + "(String, String) => String")]
        public void After()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.AfterLast) + "(String, String) => String")]
        public void AfterLast()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.AlignCenter) + "(String, Int32, Char) => String")]
        public void AlignCenter()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.AlignCenter) + "(String, UInt32, Char) => String")]
        public void AlignCenter()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.AlignLeft) + "(String, Int32, Char) => String")]
        public void AlignLeft()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.AlignLeft) + "(String, UInt32, Char) => String")]
        public void AlignLeft()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.AlignRight) + "(String, Int32, Char) => String")]
        public void AlignRight()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.AlignRight) + "(String, UInt32, Char) => String")]
        public void AlignRight()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Before) + "(String, String) => String")]
        public void Before()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.BeforeLast) + "(String, String) => String")]
        public void BeforeLast()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.ByteArrayToString) + "(Byte[]) => String")]
        public void ByteArrayToString()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.CleanCrlf) + "(String) => String")]
        public void CleanCrlf()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.UnCleanCrlf) + "(String) => String")]
        public void UnCleanCrlf()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Combine) + "(IEnumerable<String>, String) => String")]
        public void Combine()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Concatenate) + "(String, Int32, String) => String")]
        public void Concatenate()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.ContainsAny) + "(String, IEnumerable<String>) => Boolean")]
        public void ContainsAny()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Count) + "(String, String) => UInt32")]
        public void Count()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Fill) + "(Char, Int32) => String")]
        public void Fill()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Fill) + "(Char, UInt32) => String")]
        public void Fill()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.FirstCaps) + "(String) => String")]
        public void FirstCaps()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.FormatFileSize) + "(Int64, Int32) => String")]
        public void FormatFileSize()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.FormatFileSize) + "(Int32, Int32) => String")]
        public void FormatFileSize()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.HasMatch) + "(String, String[]) => Boolean")]
        public void HasMatch()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Humanize) + "(String) => String")]
        public void Humanize()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.IsEmpty) + "(String) => Boolean")]
        public void IsEmpty()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.IsNumber) + "(Char) => Boolean")]
        public void IsNumber()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.IsSymmetrical) + "(String, String, Double) => Boolean")]
        public void IsSymmetrical()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.JoinLines) + "(IEnumerable<String>, String) => String")]
        public void JoinLines()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Like) + "(String, String) => Boolean")]
        public void Like()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Lines) + "(String) => String[]")]
        public void Lines()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Matches) + "(String, String) => List<Match>")]
        public void Matches()
        {
            // TODO: Implement method test LCore.Extensions.StringExt.Matches
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Pad) + "(String, Int32, Align, Char) => String")]
        public void Pad()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Pad) + "(String, UInt32, Align, Char) => String")]
        public void Pad()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Pluralize) + "(String, Int32) => String")]
        public void Pluralize()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Pluralize) + "(String, UInt32) => String")]
        public void Pluralize()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Pluralize) + "(String) => String")]
        public void Pluralize()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.RemoveAll) + "(String, String[]) => String")]
        public void RemoveAll()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.ReplaceAll) + "(String, String, String) => String")]
        public void ReplaceAll()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.ReplaceAll) + "(String, IDictionary<String, String>) => String")]
        public void ReplaceAll()
        {
            // TODO: Implement method test LCore.Extensions.StringExt.ReplaceAll
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.ReplaceLineEndings) + "(String, String) => String")]
        public void ReplaceLineEndings()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Reverse) + "(String) => String")]
        public void Reverse()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Singularize) + "(String) => String")]
        public void Singularize()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Split) + "(String, String) => String[]")]
        public void Split()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.SplitWithQuotes) + "(String, Char) => List<String>")]
        public void SplitWithQuotes()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Sub) + "(String, Int32, Nullable<Int32>) => String")]
        public void Sub()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Sub) + "(String, UInt32, Nullable<UInt32>) => String")]
        public void Sub()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Surround) + "(String, String, String) => String")]
        public void Surround()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Symmetry) + "(String, String) => Double")]
        public void Symmetry()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Times) + "(String, Int32) => String")]
        public void Times()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Times) + "(String, UInt32) => String")]
        public void Times()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Times) + "(Char, Int32) => String")]
        public void Times()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Times) + "(Char, UInt32) => String")]
        public void Times()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.ToByteArray) + "(String) => Byte[]")]
        public void ToByteArray()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.ToHexString) + "(Byte[]) => String")]
        public void ToHexString()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.ToStream) + "(String) => Stream")]
        public void ToStream()
        {
            // TODO: Implement method test LCore.Extensions.StringExt.ToStream
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.ToUrlSlug) + "(String) => String")]
        public void ToUrlSlug()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Trim) + "(String, String) => String")]
        public void Trim()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.TrimEnd) + "(String, String) => String")]
        public void TrimEnd()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.TrimStart) + "(String, String) => String")]
        public void TrimStart()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.Words) + "(String) => String[]")]
        public void Words()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.XmlClean) + "(String) => String")]
        public void XmlClean()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.UriEncode) + "(String) => String")]
        public void UriEncode()
        {
            // TODO: Implement method test LCore.Extensions.StringExt.UriEncode
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(StringExt)+ "." + nameof(StringExt.UriDecode) + "(String) => String")]
        public void UriDecode()
        {
            // TODO: Implement method test LCore.Extensions.StringExt.UriDecode
        }

    }
}
