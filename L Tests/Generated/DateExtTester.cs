// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.Extensions;
namespace L_Tests.LCore.Extensions
{
    ///<summary>
    /// Covering class: LCore.Extensions.DateExt
    ///
    ///LUnit has Autogenerated 9 method stubs:
    ///</summary>
    public partial class DateExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DateExt)+ "." + nameof(DateExt.Average) + "(IEnumerable<TimeSpan>) => TimeSpan")]
        public void Average()
        {
            // TODO: Implement method test LCore.Extensions.DateExt.Average
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DateExt)+ "." + nameof(DateExt.DayOfWeekNumber) + "(DayOfWeek) => Int32")]
        public void DayOfWeekNumber()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DateExt)+ "." + nameof(DateExt.CleanDateString) + "(DateTime) => String")]
        public void CleanDateString()
        {
            // TODO: Implement method test LCore.Extensions.DateExt.CleanDateString
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DateExt)+ "." + nameof(DateExt.ToSpecification) + "(DateTime) => String")]
        public void ToSpecification()
        {
            // TODO: Implement method test LCore.Extensions.DateExt.ToSpecification
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DateExt)+ "." + nameof(DateExt.GetMonthName) + "(DateTime) => String")]
        public void GetMonthName()
        {
            // TODO: Implement method test LCore.Extensions.DateExt.GetMonthName
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DateExt)+ "." + nameof(DateExt.ToTimeString) + "(TimeSpan) => String")]
        public void ToTimeString()
        {
            // TODO: Implement method test LCore.Extensions.DateExt.ToTimeString
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DateExt)+ "." + nameof(DateExt.TimeDifference) + "(DateTime, DateTime, Boolean) => String")]
        public void TimeDifference()
        {
            // TODO: Implement method test LCore.Extensions.DateExt.TimeDifference
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DateExt)+ "." + nameof(DateExt.IsPast) + "(DateTime) => Boolean")]
        public void IsPast()
        {
            // TODO: Implement method test LCore.Extensions.DateExt.IsPast
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(DateExt)+ "." + nameof(DateExt.IsFuture) + "(DateTime) => Boolean")]
        public void IsFuture()
        {
            // TODO: Implement method test LCore.Extensions.DateExt.IsFuture
        }

    }
}
