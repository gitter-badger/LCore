// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.Extensions;
namespace L_Tests.LCore.Extensions
{
    /*
    Covering class: LCore.Extensions.L.Loop
    
    LUnit has Autogenerated 36 method stubs:
    */
    public partial class L_LoopTester : XUnitOutputTester, IDisposable
    {
        public L_LoopTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.While_T) + "() => Func<Action<T1>, Func<T1, Boolean>, Action<T1>>")]
        public void While_T()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.While_T
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.While_T) + "() => Func<Action<T1, T2>, Func<T1, T2, Boolean>, Action<T1, T2>>")]
        public void While_T()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.While_T
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.While_T) + "() => Func<Action<T1, T2, T3>, Func<T1, T2, T3, Boolean>, Action<T1, T2, T3>>")]
        public void While_T()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.While_T
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.While_T) + "() => Func<Action<T1, T2, T3, T4>, Func<T1, T2, T3, T4, Boolean>, Action<T1, T2, T3, T4>>")]
        public void While_T()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.While_T
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_DoWhile) + "() => Func<Action, Func<Boolean>, Action>")]
        public void L_DoWhile()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_DoWhile
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Until) + "() => Func<Func<U>, Func<Boolean>, Func<U>>")]
        public void L_Until()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Until
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_DoUntil) + "() => Func<Func<U>, Func<Boolean>, Func<U>>")]
        public void L_DoUntil()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_DoUntil
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Repeat_uint) + "() => Func<Action, UInt32, Action>")]
        public void L_Repeat_uint()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Repeat_uint
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Repeat_int) + "() => Func<Action, Int32, Action>")]
        public void L_Repeat_int()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Repeat_int
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.WhileI_T) + "() => Func<Action<Int32, T1>, Func<Int32, T1, Boolean>, Action<T1>>")]
        public void WhileI_T()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.WhileI_T
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.WhileI_T) + "() => Func<Action<Int32, T1, T2>, Func<Int32, T1, T2, Boolean>, Action<T1, T2>>")]
        public void WhileI_T()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.WhileI_T
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.WhileI_T) + "() => Func<Action<Int32, T1, T2, T3>, Func<Int32, T1, T2, T3, Boolean>, Action<T1, T2, T3>>")]
        public void WhileI_T()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.WhileI_T
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.Until) + "() => Func<Func<Int32, U>, Func<Int32, Boolean>, Func<U>>")]
        public void Until()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.Until
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.Until) + "() => Func<Func<Int32, T1, U>, Func<Int32, T1, Boolean>, Func<T1, U>>")]
        public void Until()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.Until
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.Until) + "() => Func<Func<Int32, T1, T2, U>, Func<Int32, T1, T2, Boolean>, Func<T1, T2, U>>")]
        public void Until()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.Until
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.Until) + "() => Func<Func<Int32, T1, T2, T3, U>, Func<Int32, T1, T2, T3, Boolean>, Func<T1, T2, T3, U>>")]
        public void Until()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.Until
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoWhile) + "() => Func<Action<Int32>, Func<Int32, Boolean>, Action>")]
        public void DoWhile()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoWhile
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoWhile) + "() => Func<Action<Int32, T1>, Func<Int32, T1, Boolean>, Action<T1>>")]
        public void DoWhile()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoWhile
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoWhile) + "() => Func<Action<Int32, T1, T2>, Func<Int32, T1, T2, Boolean>, Action<T1, T2>>")]
        public void DoWhile()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoWhile
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoWhile) + "() => Func<Action<Int32, T1, T2, T3>, Func<Int32, T1, T2, T3, Boolean>, Action<T1, T2, T3>>")]
        public void DoWhile()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoWhile
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoUntil) + "() => Func<Func<Int32, U>, Func<Int32, Boolean>, Func<U>>")]
        public void DoUntil()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoUntil
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoUntil) + "() => Func<Func<Int32, T1, U>, Func<Int32, T1, Boolean>, Func<T1, U>>")]
        public void DoUntil()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoUntil
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoUntil) + "() => Func<Func<Int32, T1, T2, U>, Func<Int32, T1, T2, Boolean>, Func<T1, T2, U>>")]
        public void DoUntil()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoUntil
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.DoUntil) + "() => Func<Func<Int32, T1, T2, T3, U>, Func<Int32, T1, T2, T3, Boolean>, Func<T1, T2, T3, U>>")]
        public void DoUntil()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.DoUntil
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Collect) + "() => Func<Func<U>, UInt32, Func<List<U>>>")]
        public void L_Collect()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Collect
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Collect) + "() => Func<Func<T1, U>, UInt32, Func<T1, List<U>>>")]
        public void L_Collect()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Collect
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Collect) + "() => Func<Func<T1, T2, U>, UInt32, Func<T1, T2, List<U>>>")]
        public void L_Collect()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Collect
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Collect) + "() => Func<Func<T1, T2, T3, U>, UInt32, Func<T1, T2, T3, List<U>>>")]
        public void L_Collect()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Collect
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_Collect) + "() => Func<Func<T1, T2, T3, T4, U>, UInt32, Func<T1, T2, T3, T4, List<U>>>")]
        public void L_Collect()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_Collect
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_MergeLoop) + "() => Func<Action, Func<Int32, Boolean>>")]
        public void L_MergeLoop()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_MergeLoop
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_MergeLoop) + "() => Func<Action<T1>, Func<Int32, T1, Boolean>>")]
        public void L_MergeLoop()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_MergeLoop
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_MergeLoop) + "() => Func<Action<T1, T2>, Func<Int32, T1, T2, Boolean>>")]
        public void L_MergeLoop()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_MergeLoop
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_MergeLoop) + "() => Func<Action<T1, T2, T3>, Func<Int32, T1, T2, T3, Boolean>>")]
        public void L_MergeLoop()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_MergeLoop
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_To) + "() => Func<Int32, Int32, Action, Action>")]
        public void L_To()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_To
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_ToI) + "() => Func<Int32, Int32, Action<Int32>, Action>")]
        public void L_ToI()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_ToI
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Loop)+ "." + nameof(L.Loop.L_For) + "() => Func<Int32, Int32, Func<Int32, Boolean>, Action>")]
        public void L_For()
        {
            // TODO: Implement method test LCore.Extensions.L.Loop.L_For
        }

    }
}
