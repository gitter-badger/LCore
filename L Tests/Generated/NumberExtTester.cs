// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.Extensions;
namespace L_Tests.LCore.Extensions
{
    ///<summary>
    /// Covering class: LCore.Extensions.NumberExt
    ///
    ///LUnit has Autogenerated 87 method stubs:
    ///</summary>
    public partial class NumberExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.AddEach) + "(IEnumerable<Int32>, Int32) => List<Int32>")]
        public void AddEach()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Abs) + "(Int32) => UInt32")]
        public void Abs()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Abs) + "(UInt32) => UInt32")]
        public void Abs()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Abs) + "(Int64) => UInt64")]
        public void Abs()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Abs) + "(UInt64) => UInt64")]
        public void Abs()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Abs) + "(Int16) => UInt16")]
        public void Abs()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Abs) + "(UInt16) => UInt16")]
        public void Abs()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Abs) + "(Double) => Double")]
        public void Abs()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Abs) + "(Single) => Single")]
        public void Abs()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Abs) + "(SByte) => Byte")]
        public void Abs()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Abs) + "(Byte) => Byte")]
        public void Abs()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Abs) + "(Decimal) => Decimal")]
        public void Abs()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.AsPercent) + "(Single) => Int32")]
        public void AsPercent()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.AsPercent) + "(Double) => Int32")]
        public void AsPercent()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Average) + "(IEnumerable<Int32>) => Double")]
        public void Average()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Average) + "(IEnumerable<UInt32>) => Double")]
        public void Average()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Average) + "(IEnumerable<Int64>) => Double")]
        public void Average()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Average) + "(IEnumerable<UInt64>) => Double")]
        public void Average()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Average) + "(IEnumerable<Single>) => Double")]
        public void Average()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Average) + "(IEnumerable<Double>) => Double")]
        public void Average()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.DecimalPlaces) + "(Int32) => UInt32")]
        public void DecimalPlaces()
        {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.DecimalPlaces) + "(Int16) => UInt32")]
        public void DecimalPlaces()
        {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.DecimalPlaces) + "(Int64) => UInt32")]
        public void DecimalPlaces()
        {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.DecimalPlaces) + "(UInt32) => UInt32")]
        public void DecimalPlaces()
        {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.DecimalPlaces) + "(UInt16) => UInt32")]
        public void DecimalPlaces()
        {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.DecimalPlaces) + "(UInt64) => UInt32")]
        public void DecimalPlaces()
        {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.DecimalPlaces) + "(Char) => UInt32")]
        public void DecimalPlaces()
        {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.DecimalPlaces) + "(Byte) => UInt32")]
        public void DecimalPlaces()
        {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.DecimalPlaces) + "(SByte) => UInt32")]
        public void DecimalPlaces()
        {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.DecimalPlaces) + "(Decimal) => UInt16")]
        public void DecimalPlaces()
        {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.DecimalPlaces) + "(Double) => UInt16")]
        public void DecimalPlaces()
        {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.DecimalPlaces) + "(Single) => UInt16")]
        public void DecimalPlaces()
        {
            // TODO: Implement method test LCore.Extensions.NumberExt.DecimalPlaces
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Floor) + "(Single) => Int32")]
        public void Floor()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Floor) + "(Single, Int32) => Single")]
        public void Floor()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Floor) + "(Double) => Int64")]
        public void Floor()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Floor) + "(Double, Int32) => Double")]
        public void Floor()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.IsEven) + "(Int32) => Boolean")]
        public void IsEven()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.IsEven) + "(Int64) => Boolean")]
        public void IsEven()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.IsEven) + "(Int16) => Boolean")]
        public void IsEven()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.IsEven) + "(UInt32) => Boolean")]
        public void IsEven()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.IsEven) + "(UInt64) => Boolean")]
        public void IsEven()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.IsEven) + "(Byte) => Boolean")]
        public void IsEven()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.IsEven) + "(SByte) => Boolean")]
        public void IsEven()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.PercentageOf) + "(Single, Single) => Int32")]
        public void PercentageOf()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.PercentageOf) + "(Double, Double) => Int32")]
        public void PercentageOf()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.PercentageOf) + "(Int32, Int32) => Int32")]
        public void PercentageOf()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.PercentageOf) + "(UInt32, UInt32) => Int32")]
        public void PercentageOf()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.PercentageOf) + "(Int16, Int16) => Int32")]
        public void PercentageOf()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.PercentageOf) + "(Int64, Int64) => Int32")]
        public void PercentageOf()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Pow) + "(Double, Double) => Double")]
        public void Pow()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Pow) + "(Int32, Double) => Double")]
        public void Pow()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Pow) + "(UInt32, Double) => Double")]
        public void Pow()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Pow) + "(Int16, Double) => Double")]
        public void Pow()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Pow) + "(UInt16, Double) => Double")]
        public void Pow()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Pow) + "(Int64, Double) => Double")]
        public void Pow()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Pow) + "(UInt64, Double) => Double")]
        public void Pow()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Pow) + "(SByte, Double) => Double")]
        public void Pow()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Pow) + "(Byte, Double) => Double")]
        public void Pow()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Round) + "(Single) => Int32")]
        public void Round()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Round) + "(Single, Int32) => Single")]
        public void Round()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Round) + "(Double) => Int64")]
        public void Round()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Round) + "(Double, Int32) => Double")]
        public void Round()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Round) + "(Decimal) => Int64")]
        public void Round()
        {
            // TODO: Implement method test LCore.Extensions.NumberExt.Round
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Round) + "(Decimal, Int32) => Double")]
        public void Round()
        {
            // TODO: Implement method test LCore.Extensions.NumberExt.Round
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sqrt) + "(Int32) => Double")]
        public void Sqrt()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sqrt) + "(Int64) => Double")]
        public void Sqrt()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sqrt) + "(Int16) => Double")]
        public void Sqrt()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sqrt) + "(Double) => Double")]
        public void Sqrt()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sqrt) + "(Single) => Double")]
        public void Sqrt()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sqrt) + "(UInt32) => Double")]
        public void Sqrt()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sqrt) + "(UInt64) => Double")]
        public void Sqrt()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sqrt) + "(UInt16) => Double")]
        public void Sqrt()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sqrt) + "(Byte) => Double")]
        public void Sqrt()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sqrt) + "(SByte) => Double")]
        public void Sqrt()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sqrt) + "(Decimal) => Double")]
        public void Sqrt()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.SubtractEach) + "(List<Int32>, Int32) => List<Int32>")]
        public void SubtractEach()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sum) + "(IEnumerable<Int32>) => Int32")]
        public void Sum()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sum) + "(IEnumerable<UInt32>) => UInt32")]
        public void Sum()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sum) + "(IEnumerable<Int64>) => Int64")]
        public void Sum()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sum) + "(IEnumerable<UInt64>) => UInt64")]
        public void Sum()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sum) + "(IEnumerable<Single>) => Single")]
        public void Sum()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Sum) + "(IEnumerable<Double>) => Double")]
        public void Sum()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.To) + "(Int32, Int32) => Int32[]")]
        public void To()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.To) + "(UInt32, UInt32) => UInt32[]")]
        public void To()
        {
            // Attribute Tests Implemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Wrap) + "(Nullable<T>) => Number")]
        public void Wrap()
        {
            // TODO: Implement method test LCore.Extensions.NumberExt.Wrap
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Wrap) + "(T) => Number")]
        public void Wrap()
        {
            // TODO: Implement method test LCore.Extensions.NumberExt.Wrap
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(NumberExt)+ "." + nameof(NumberExt.Wrap) + "(String) => Number")]
        public void Wrap()
        {
            // TODO: Implement method test LCore.Extensions.NumberExt.Wrap
        }

    }
}
