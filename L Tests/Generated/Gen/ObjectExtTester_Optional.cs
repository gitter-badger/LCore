/*
Covering Assembly: L

Cover application using naming conventions.

LUnit has Autogenerated 55 Classes and 1481 Methods:
*/

using LCore.Extensions;
using System;
using Xunit;
using LCore.LUnit;
using Xunit.Abstractions;
using JetBrains.Annotations;

namespace L_Tests.LCore.Extensions.Optional
    {
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt))]
    public partial class ObjectExtTester : XUnitOutputTester, IDisposable
        {
        public ObjectExtTester([NotNull] ITestOutputHelper Output) : base(Output) {}

        public void Dispose() {}

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.CopyFieldsTo) + "(T, Object)")]
        public void CopyFieldsTo_T_Object()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.CopyFieldsTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.CopyFieldsTo) + "(T, Object, Dictionary`2<String, String>)")]
        public void CopyFieldsTo_T_Object_Dictionary_2_String_String()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.CopyFieldsTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.CopyFieldsTo) + "(T, Object, Func`2<String, String>)")]
        public void CopyFieldsTo_T_Object_Func_2_String_String()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.CopyFieldsTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.Details) + "(T, Boolean) => String")]
        public void Details()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.Details
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.FN_CreateArray) + "(T) => Func`1<T[]>")]
        public void FN_CreateArray_T_Func_1_T()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_CreateArray
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.FN_CreateArray) + "(T, Int32) => Func`1<T[]>")]
        public void FN_CreateArray_T_Int32_Func_1_T()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_CreateArray
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.FN_CreateList) + "(T) => Func`1<List`1<T>>")]
        public void FN_CreateList_T_Func_1_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_CreateList
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.FN_CreateList) + "(T, Int32) => Func`1<List`1<T>>")]
        public void FN_CreateList_T_Int32_Func_1_List_1_T()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_CreateList
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.FN_Func) + "(T) => Func`1<T>")]
        public void FN_Func()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_Func
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.FN_If) + "(T) => Func`2<T, Boolean>")]
        public void FN_If()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.FN_If
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.InitProperties) + "(Object, T)")]
        public void InitProperties()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.InitProperties
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.IsNull) + "(T) => Boolean")]
        public void IsNull()
            {
            // Attribute Tests Implemented
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.SafeEquals) + "(Object, Object) => Boolean")]
        public void SafeEquals()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.SafeEquals
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.SupplyTo) + "(T, Action`1<T>) => Action")]
        public void SupplyTo_T_Action_1_T_Action()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.SupplyTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.SupplyTo) + "(T, Func`2<T, U>) => Func`1<U>")]
        public void SupplyTo_T_Func_2_T_U_Func_1_U()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.SupplyTo
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.ToS) + "(Object) => String")]
        public void ToS()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.ToS
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.Traverse) + "(Object, Func`2<Object, Object>)")]
        public void Traverse_Object_Func_2_Object_Object()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.Traverse
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(global::LCore.Extensions.Optional) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt) + "." + nameof(global::LCore.Extensions.Optional.ObjectExt.Traverse) + "(T, Func`2<T, T>)")]
        public void Traverse_T_Func_2_T_T()
            {
            // TODO: Implement method test LCore.Extensions.Optional.ObjectExt.Traverse
            }
        }
    }