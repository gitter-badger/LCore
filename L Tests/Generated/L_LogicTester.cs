// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.Extensions;
namespace L_Tests.LCore.Extensions
{
    ///<summary>
    /// Covering class: LCore.Extensions.L.Logic
    ///
    ///LUnit has Autogenerated 273 method stubs:
    ///</summary>
    public partial class L_LogicTester : XUnitOutputTester, IDisposable
    {
        public L_LogicTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.New) + "() => Func<T1, T2, U>")]
        public void New()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.New) + "() => Func<T1, T2, T3, U>")]
        public void New()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.New) + "() => Func<T1, T2, T3, T4, U>")]
        public void New()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<U>")]
        public void Do()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, U>")]
        public void Do()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, U>")]
        public void Do()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, U>")]
        public void Do()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, U>")]
        public void Do()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, U>")]
        public void Do()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, T6, U>")]
        public void Do()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, T6, T7, U>")]
        public void Do()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, T6, T7, T8, U>")]
        public void Do()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, U>")]
        public void Do()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, U>")]
        public void Do()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, U>")]
        public void Do()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, U>")]
        public void Do()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, U>")]
        public void Do()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, U>")]
        public void Do()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, U>")]
        public void Do()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Do) + "() => Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, U>")]
        public void Do()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Do
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Return) + "() => Func<U>")]
        public void Return()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Return
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Return) + "(U) => Func<U>")]
        public void Return()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Return
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Pass) + "() => Func<T1, T1>")]
        public void Pass()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Pass
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.New) + "(Object[]) => Func<U>")]
        public void New()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.New) + "() => Func<U>")]
        public void New()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.New) + "() => Func<T1, U>")]
        public void New()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.New
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F2) + "() => Func<Func<T1, T2, T3, T4, U>, Func<T1, T2, U>[], Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_F2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F3) + "() => Func<Func<T1, T2, T3, T4, U>, Func<T1, U>[], Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_F3()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F3
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F4) + "() => Func<Func<T1, T2, T3, T4, U>, Func<U>[], Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_F4()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F4
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge) + "() => Func<Action, Action, Action>")]
        public void L_Merge()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_A_F) + "() => Func<Action, Func<U>, Func<U>>")]
        public void L_Merge_A_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_A_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_A) + "() => Func<Func<U>, Action, Func<U>>")]
        public void L_Merge_F_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_A1) + "() => Func<Func<U>, Action<T1>, Func<T1, U>>")]
        public void L_Merge_F_A1()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A1
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_A2) + "() => Func<Func<U>, Action<T1, T2>, Func<T1, T2, U>>")]
        public void L_Merge_F_A2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_A3) + "() => Func<Func<U>, Action<T1, T2, T3>, Func<T1, T2, T3, U>>")]
        public void L_Merge_F_A3()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A3
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_A4) + "() => Func<Func<U>, Action<T1, T2, T3, T4>, Func<T1, T2, T3, T4, U>>")]
        public void L_Merge_F_A4()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_A4
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_A) + "() => Func<Func<T1, U>, Action, Func<T1, U>>")]
        public void L_Merge_F1_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_A1) + "() => Func<Func<T1, U>, Action<T2>, Func<T1, T2, U>>")]
        public void L_Merge_F1_A1()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_A1
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_A2) + "() => Func<Func<T1, U>, Action<T2, T3>, Func<T1, T2, T3, U>>")]
        public void L_Merge_F1_A2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_A2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_A3) + "() => Func<Func<T1, U>, Action<T2, T3, T4>, Func<T1, T2, T3, T4, U>>")]
        public void L_Merge_F1_A3()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_A3
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F2_A) + "() => Func<Func<T1, T2, U>, Action, Func<T1, T2, U>>")]
        public void L_Merge_F2_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F2_A1) + "() => Func<Func<T1, T2, U>, Action<T3>, Func<T1, T2, T3, U>>")]
        public void L_Merge_F2_A1()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_A1
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F2_A2) + "() => Func<Func<T1, T2, U>, Action<T3, T4>, Func<T1, T2, T3, T4, U>>")]
        public void L_Merge_F2_A2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_A2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F3_A) + "() => Func<Func<T1, T2, T3, U>, Action, Func<T1, T2, T3, U>>")]
        public void L_Merge_F3_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F3_A1) + "() => Func<Func<T1, T2, T3, U>, Action<T4>, Func<T1, T2, T3, T4, U>>")]
        public void L_Merge_F3_A1()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_A1
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F3_A) + "() => Func<Func<T1, T2, T3, T4, U>, Action, Func<T1, T2, T3, T4, U>>")]
        public void L_Merge_F3_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_F) + "() => Func<Func<U>, Func<U>, Func<U>>")]
        public void L_Merge_F_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_F1) + "() => Func<Func<U>, Func<T1, U>, Func<T1, U>>")]
        public void L_Merge_F_F1()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F1
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_F2) + "() => Func<Func<U>, Func<T1, T2, U>, Func<T1, T2, U>>")]
        public void L_Merge_F_F2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_F3) + "() => Func<Func<U>, Func<T1, T2, T3, U>, Func<T1, T2, T3, U>>")]
        public void L_Merge_F_F3()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F3
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F_F4) + "() => Func<Func<U>, Func<T1, T2, T3, T4, U>, Func<T1, T2, T3, T4, U>>")]
        public void L_Merge_F_F4()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F_F4
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_F) + "() => Func<Func<T1, U>, Func<U>, Func<T1, U>>")]
        public void L_Merge_F1_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_F1) + "() => Func<Func<T1, U>, Func<T3, U>, Func<T1, T3, U>>")]
        public void L_Merge_F1_F1()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_F1
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_F2) + "() => Func<Func<T1, U>, Func<T3, T4, U>, Func<T1, T3, T4, U>>")]
        public void L_Merge_F1_F2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_F2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F1_F3) + "() => Func<Func<T1, U>, Func<T2, T3, T4, U>, Func<T1, T2, T3, T4, U>>")]
        public void L_Merge_F1_F3()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F1_F3
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F2_F) + "() => Func<Func<T1, T2, U>, Func<U>, Func<T1, T2, U>>")]
        public void L_Merge_F2_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F2_F1) + "() => Func<Func<T1, T2, U>, Func<T4, U>, Func<T1, T2, T4, U>>")]
        public void L_Merge_F2_F1()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_F1
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F2_F2) + "() => Func<Func<T1, T2, U>, Func<T3, T4, U>, Func<T1, T2, T3, T4, U>>")]
        public void L_Merge_F2_F2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F2_F2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F3_F) + "() => Func<Func<T1, T2, T3, U>, Func<U>, Func<T1, T2, T3, U>>")]
        public void L_Merge_F3_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F3_F1) + "() => Func<Func<T1, T2, T3, U>, Func<T4, U>, Func<T1, T2, T3, T4, U>>")]
        public void L_Merge_F3_F1()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F3_F1
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Merge_F4_F) + "() => Func<Func<T1, T2, T3, T4, U>, Func<U>, Func<T1, T2, T3, T4, U>>")]
        public void L_Merge_F4_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Merge_F4_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A) + "() => Func<Action<T1>, T1, Action>")]
        public void L_Supply_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A) + "() => Func<Action<T1, T2>, T1, Action<T2>>")]
        public void L_Supply_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A2) + "() => Func<Action<T1, T2>, T2, Action<T1>>")]
        public void L_Supply_A2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A) + "() => Func<Action<T1, T2, T3>, T1, Action<T2, T3>>")]
        public void L_Supply_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A2) + "() => Func<Action<T1, T2, T3>, T2, Action<T1, T3>>")]
        public void L_Supply_A2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A3) + "() => Func<Action<T1, T2, T3>, T3, Action<T1, T2>>")]
        public void L_Supply_A3()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A3
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A) + "() => Func<Action<T1, T2, T3, T4>, T1, Action<T2, T3, T4>>")]
        public void L_Supply_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A2) + "() => Func<Action<T1, T2, T3, T4>, T2, Action<T1, T3, T4>>")]
        public void L_Supply_A2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A3) + "() => Func<Action<T1, T2, T3, T4>, T3, Action<T1, T2, T4>>")]
        public void L_Supply_A3()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A3
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_A4) + "() => Func<Action<T1, T2, T3, T4>, T4, Action<T1, T2, T3>>")]
        public void L_Supply_A4()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_A4
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F) + "() => Func<Func<T1, U>, T1, Func<U>>")]
        public void L_Supply_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F) + "() => Func<Func<T1, T2, U>, T1, Func<T2, U>>")]
        public void L_Supply_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F2) + "() => Func<Func<T1, T2, U>, T2, Func<T1, U>>")]
        public void L_Supply_F2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F) + "() => Func<Func<T1, T2, T3, U>, T1, Func<T2, T3, U>>")]
        public void L_Supply_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F2) + "() => Func<Func<T1, T2, T3, U>, T2, Func<T1, T3, U>>")]
        public void L_Supply_F2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F3) + "() => Func<Func<T1, T2, T3, U>, T3, Func<T1, T2, U>>")]
        public void L_Supply_F3()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F3
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F) + "() => Func<Func<T1, T2, T3, T4, U>, T1, Func<T2, T3, T4, U>>")]
        public void L_Supply_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F2) + "() => Func<Func<T1, T2, T3, T4, U>, T2, Func<T1, T3, T4, U>>")]
        public void L_Supply_F2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F3) + "() => Func<Func<T1, T2, T3, T4, U>, T3, Func<T1, T2, T4, U>>")]
        public void L_Supply_F3()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F3
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Supply_F4) + "() => Func<Func<T1, T2, T3, T4, U>, T4, Func<T1, T2, T3, U>>")]
        public void L_Supply_F4()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Supply_F4
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_A) + "() => Func<Action<T1, T2, T3>, Action<U1, U2, U3>>")]
        public void L_Cast_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_A) + "() => Func<Action<T1, T2, T3, T4>, Action<U1, U2, U3, U4>>")]
        public void L_Cast_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_F) + "() => Func<Func<U1>, Func<U2>>")]
        public void L_Cast_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_F) + "() => Func<Func<T1, U1>, Func<T2, U2>>")]
        public void L_Cast_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_F) + "() => Func<Func<T1, T2, U1>, Func<T3, T4, U2>>")]
        public void L_Cast_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_F) + "() => Func<Func<T1, T2, T3, U1>, Func<T4, T5, T6, U2>>")]
        public void L_Cast_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_F) + "() => Func<Func<T1, T2, T3, T4, U1>, Func<T5, T6, T7, T8, U2>>")]
        public void L_Cast_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A) + "() => Func<Action, Action[], Action>")]
        public void Then_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A) + "() => Func<Action<T1>, Action<T1>[], Action<T1>>")]
        public void Then_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A) + "() => Func<Action<T1, T2>, Action<T1, T2>[], Action<T1, T2>>")]
        public void Then_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A) + "() => Func<Action<T1, T2, T3>, Action<T1, T2, T3>[], Action<T1, T2, T3>>")]
        public void Then_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A) + "() => Func<Action<T1, T2, T3, T4>, Action<T1, T2, T3, T4>[], Action<T1, T2, T3, T4>>")]
        public void Then_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A_F) + "() => Func<Action, Func<U>[], Func<U>>")]
        public void Then_A_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A_F) + "() => Func<Action<T1>, Func<T1, U>[], Func<T1, U>>")]
        public void Then_A_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A_F) + "() => Func<Action<T1, T2>, Func<T1, T2, U>[], Func<T1, T2, U>>")]
        public void Then_A_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A_F) + "() => Func<Action<T1, T2, T3>, Func<T1, T2, T3, U>[], Func<T1, T2, T3, U>>")]
        public void Then_A_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_A_F) + "() => Func<Action<T1, T2, T3, T4>, Func<T1, T2, T3, T4, U>[], Func<T1, T2, T3, T4, U>>")]
        public void Then_A_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_A_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_F) + "() => Func<Func<U>, Action[], Func<U>>")]
        public void Then_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_F) + "() => Func<Func<T1, U>, Action<T1>[], Func<T1, U>>")]
        public void Then_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_F) + "() => Func<Func<T1, T2, U>, Action<T1, T2>[], Func<T1, T2, U>>")]
        public void Then_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_F) + "() => Func<Func<T1, T2, T3, U>, Action<T1, T2, T3>[], Func<T1, T2, T3, U>>")]
        public void Then_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Then_F) + "() => Func<Func<T1, T2, T3, T4, U>, Action<T1, T2, T3, T4>[], Func<T1, T2, T3, T4, U>>")]
        public void Then_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Then_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Then_F_F) + "() => Func<Func<U>, Func<U>[], Func<U>>")]
        public void L_Then_F_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Then_F_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Then_F_F) + "() => Func<Func<T1, U>, Func<T1, U>[], Func<T1, U>>")]
        public void L_Then_F_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Then_F_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Then_F_F) + "() => Func<Func<T1, T2, U>, Func<T1, T2, U>[], Func<T1, T2, U>>")]
        public void L_Then_F_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Then_F_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Then_F_F) + "() => Func<Func<T1, T2, T3, U>, Func<T1, T2, T3, U>[], Func<T1, T2, T3, U>>")]
        public void L_Then_F_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Then_F_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Then_F_F) + "() => Func<Func<T1, T2, T3, T4, U>, Func<T1, T2, T3, T4, U>[], Func<T1, T2, T3, T4, U>>")]
        public void L_Then_F_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Then_F_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A) + "() => Func<Action<T1>, Action[], Action<T1>>")]
        public void L_ThenMissing_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A) + "() => Func<Action<T1, T2>, Action<T1>[], Action<T1, T2>>")]
        public void L_ThenMissing_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A2) + "() => Func<Action<T1, T2>, Action[], Action<T1, T2>>")]
        public void L_ThenMissing_A2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A) + "() => Func<Action<T1, T2, T3>, Action<T1, T2>[], Action<T1, T2, T3>>")]
        public void L_ThenMissing_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A2) + "() => Func<Action<T1, T2, T3>, Action<T1>[], Action<T1, T2, T3>>")]
        public void L_ThenMissing_A2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A3) + "() => Func<Action<T1, T2, T3>, Action[], Action<T1, T2, T3>>")]
        public void L_ThenMissing_A3()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A3
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A) + "() => Func<Action<T1, T2, T3, T4>, Action<T1, T2, T3>[], Action<T1, T2, T3, T4>>")]
        public void L_ThenMissing_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A2) + "() => Func<Action<T1, T2, T3, T4>, Action<T1, T2>[], Action<T1, T2, T3, T4>>")]
        public void L_ThenMissing_A2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A3) + "() => Func<Action<T1, T2, T3, T4>, Action<T1>[], Action<T1, T2, T3, T4>>")]
        public void L_ThenMissing_A3()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A3
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A4) + "() => Func<Action<T1, T2, T3, T4>, Action[], Action<T1, T2, T3, T4>>")]
        public void L_ThenMissing_A4()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A4
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F) + "() => Func<Action<T1>, Func<U>[], Func<T1, U>>")]
        public void L_ThenMissing_A_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F) + "() => Func<Action<T1, T2>, Func<T1, U>[], Func<T1, T2, U>>")]
        public void L_ThenMissing_A_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F) + "() => Func<Action<T1, T2, T3>, Func<T1, T2, U>[], Func<T1, T2, T3, U>>")]
        public void L_ThenMissing_A_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F2) + "() => Func<Action<T1, T2>, Func<U>[], Func<T1, T2, U>>")]
        public void L_ThenMissing_A_F2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F3) + "() => Func<Action<T1, T2, T3>, Func<U>[], Func<T1, T2, T3, U>>")]
        public void L_ThenMissing_A_F3()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F3
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F2) + "() => Func<Action<T1, T2, T3>, Func<T1, U>[], Func<T1, T2, T3, U>>")]
        public void L_ThenMissing_A_F2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F) + "() => Func<Action<T1, T2, T3, T4>, Func<T1, T2, T3, U>[], Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_A_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F2) + "() => Func<Action<T1, T2, T3, T4>, Func<T1, T2, U>[], Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_A_F2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F3) + "() => Func<Action<T1, T2, T3, T4>, Func<T1, U>[], Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_A_F3()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F3
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_A_F4) + "() => Func<Action<T1, T2, T3, T4>, Func<U>[], Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_A_F4()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_A_F4
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A) + "() => Func<Func<T1, U>, Action[], Func<T1, U>>")]
        public void L_ThenMissing_F_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A) + "() => Func<Func<T1, T2, U>, Action<T1>[], Func<T1, T2, U>>")]
        public void L_ThenMissing_F_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A2) + "() => Func<Func<T1, T2, U>, Action[], Func<T1, T2, U>>")]
        public void L_ThenMissing_F_A2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A) + "() => Func<Func<T1, T2, T3, U>, Action<T1, T2>[], Func<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A2) + "() => Func<Func<T1, T2, T3, U>, Action<T1>[], Func<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_A2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A3) + "() => Func<Func<T1, T2, T3, U>, Action[], Func<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_A3()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A3
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A) + "() => Func<Func<T1, T2, T3, T4, U>, Action<T1, T2, T3>[], Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A2) + "() => Func<Func<T1, T2, T3, T4, U>, Action<T1, T2>[], Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_A2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A3) + "() => Func<Func<T1, T2, T3, T4, U>, Action<T1>[], Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_A3()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A3
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_A4) + "() => Func<Func<T1, T2, T3, T4, U>, Action[], Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_A4()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_A4
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F) + "() => Func<Func<T1, U>, Func<U>[], Func<T1, U>>")]
        public void L_ThenMissing_F_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F) + "() => Func<Func<T1, T2, U>, Func<T1, U>[], Func<T1, T2, U>>")]
        public void L_ThenMissing_F_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F2) + "() => Func<Func<T1, T2, U>, Func<U>[], Func<T1, T2, U>>")]
        public void L_ThenMissing_F_F2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F2) + "() => Func<Func<T1, T2, T3, U>, Func<T1, U>[], Func<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_F2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F3) + "() => Func<Func<T1, T2, T3, U>, Func<U>[], Func<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_F3()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F3
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F) + "() => Func<Func<T1, T2, T3, U>, Func<T1, T2, U>[], Func<T1, T2, T3, U>>")]
        public void L_ThenMissing_F_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_ThenMissing_F_F) + "() => Func<Func<T1, T2, T3, T4, U>, Func<T1, T2, T3, U>[], Func<T1, T2, T3, T4, U>>")]
        public void L_ThenMissing_F_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_ThenMissing_F_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Defaults_A) + "() => Func<Action<T1, T2>, T1, T2, Action<T1, T2>>")]
        public void L_Defaults_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Defaults_A) + "() => Func<Action<T1, T2, T3>, T1, T2, T3, Action<T1, T2, T3>>")]
        public void L_Defaults_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Defaults_A) + "() => Func<Action<T1, T2, T3, T4>, T1, T2, T3, T4, Action<T1, T2, T3, T4>>")]
        public void L_Defaults_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Defaults_F) + "() => Func<Func<T1, T2, U>, T1, T2, Func<T1, T2, U>>")]
        public void L_Defaults_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Defaults_F) + "() => Func<Func<T1, T2, T3, U>, T1, T2, T3, Func<T1, T2, T3, U>>")]
        public void L_Defaults_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Defaults_F) + "() => Func<Func<T1, T2, T3, T4, U>, T1, T2, T3, T4, Func<T1, T2, T3, T4, U>>")]
        public void L_Defaults_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Defaults_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_A) + "() => Func<Action<T1>, String, Action<T1>>")]
        public void L_Require_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_A) + "() => Func<Action<T1, T2>, String, Action<T1, T2>>")]
        public void L_Require_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require2_A) + "() => Func<Action<T1, T2>, String, Action<T1, T2>>")]
        public void L_Require2_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_A) + "() => Func<Action<T1, T2, T3>, String, Action<T1, T2, T3>>")]
        public void L_Require_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require2_A) + "() => Func<Action<T1, T2, T3>, String, Action<T1, T2, T3>>")]
        public void L_Require2_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require3_A) + "() => Func<Action<T1, T2, T3>, String, Action<T1, T2, T3>>")]
        public void L_Require3_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require3_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_A) + "() => Func<Action<T1, T2, T3, T4>, String, Action<T1, T2, T3, T4>>")]
        public void L_Require_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require2_A) + "() => Func<Action<T1, T2, T3, T4>, String, Action<T1, T2, T3, T4>>")]
        public void L_Require2_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require3_A) + "() => Func<Action<T1, T2, T3, T4>, String, Action<T1, T2, T3, T4>>")]
        public void L_Require3_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require3_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require4_A) + "() => Func<Action<T1, T2, T3, T4>, String, Action<T1, T2, T3, T4>>")]
        public void L_Require4_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require4_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_F) + "() => Func<Func<T1, U>, String, Func<T1, U>>")]
        public void L_Require_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_F) + "() => Func<Func<T1, T2, U>, String, Func<T1, T2, U>>")]
        public void L_Require_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require2_F) + "() => Func<Func<T1, T2, U>, String, Func<T1, T2, U>>")]
        public void L_Require2_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_F) + "() => Func<Func<T1, T2, T3, U>, String, Func<T1, T2, T3, U>>")]
        public void L_Require_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require2_F) + "() => Func<Func<T1, T2, T3, U>, String, Func<T1, T2, T3, U>>")]
        public void L_Require2_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require3_F) + "() => Func<Func<T1, T2, T3, U>, String, Func<T1, T2, T3, U>>")]
        public void L_Require3_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require3_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require_F) + "() => Func<Func<T1, T2, T3, T4, U>, String, Func<T1, T2, T3, T4, U>>")]
        public void L_Require_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require2_F) + "() => Func<Func<T1, T2, T3, T4, U>, String, Func<T1, T2, T3, T4, U>>")]
        public void L_Require2_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require2_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require3_F) + "() => Func<Func<T1, T2, T3, T4, U>, String, Func<T1, T2, T3, T4, U>>")]
        public void L_Require3_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require3_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Require4_F) + "() => Func<Func<T1, T2, T3, T4, U>, String, Func<T1, T2, T3, T4, U>>")]
        public void L_Require4_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Require4_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RequireAll_A) + "() => Func<Action<T1, T2>, String, String, Action<T1, T2>>")]
        public void L_RequireAll_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RequireAll_A) + "() => Func<Action<T1, T2, T3>, String, String, String, Action<T1, T2, T3>>")]
        public void L_RequireAll_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RequireAll_A) + "() => Func<Action<T1, T2, T3, T4>, String, String, String, String, Action<T1, T2, T3, T4>>")]
        public void L_RequireAll_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RequireAll_F) + "() => Func<Func<T1, T2, U>, String, String, Func<T1, T2, U>>")]
        public void L_RequireAll_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RequireAll_F) + "() => Func<Func<T1, T2, T3, U>, String, String, String, Func<T1, T2, T3, U>>")]
        public void L_RequireAll_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RequireAll_F) + "() => Func<Func<T1, T2, T3, T4, U>, String, String, String, String, Func<T1, T2, T3, T4, U>>")]
        public void L_RequireAll_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RequireAll_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_A) + "() => Func<Action<U>, Func<U, U>>")]
        public void L_Yield_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_A) + "() => Func<Action<U, T1>, Func<U, T1, U>>")]
        public void L_Yield_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield2_A) + "() => Func<Action<T1, U>, Func<T1, U, U>>")]
        public void L_Yield2_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_A) + "() => Func<Action<U, T1, T2>, Func<U, T1, T2, U>>")]
        public void L_Yield_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield2_A) + "() => Func<Action<T1, U, T2>, Func<T1, U, T2, U>>")]
        public void L_Yield2_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield3_A) + "() => Func<Action<T1, T2, U>, Func<T1, T2, U, U>>")]
        public void L_Yield3_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield3_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_A) + "() => Func<Action<U, T1, T2, T3>, Func<U, T1, T2, T3, U>>")]
        public void L_Yield_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield2_A) + "() => Func<Action<T1, U, T2, T3>, Func<T1, U, T2, T3, U>>")]
        public void L_Yield2_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield3_A) + "() => Func<Action<T1, T2, U, T3>, Func<T1, T2, U, T3, U>>")]
        public void L_Yield3_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield3_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield4_A) + "() => Func<Action<T1, T2, T3, U>, Func<T1, T2, T3, U, U>>")]
        public void L_Yield4_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield4_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_F) + "() => Func<Func<U, U>, Func<U, U>>")]
        public void L_Yield_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_F) + "() => Func<Func<U, T1, U>, Func<U, T1, U>>")]
        public void L_Yield_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield2_F) + "() => Func<Func<T1, U, U>, Func<T1, U, U>>")]
        public void L_Yield2_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_F) + "() => Func<Func<U, T1, T2, U>, Func<U, T1, T2, U>>")]
        public void L_Yield_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield2_F) + "() => Func<Func<T1, U, T2, U>, Func<T1, U, T2, U>>")]
        public void L_Yield2_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield3_F) + "() => Func<Func<T1, T2, U, U>, Func<T1, T2, U, U>>")]
        public void L_Yield3_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield3_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield_F) + "() => Func<Func<U, T1, T2, T3, U>, Func<U, T1, T2, T3, U>>")]
        public void L_Yield_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield2_F) + "() => Func<Func<T1, U, T2, T3, U>, Func<T1, U, T2, T3, U>>")]
        public void L_Yield2_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield2_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield3_F) + "() => Func<Func<T1, T2, U, T3, U>, Func<T1, T2, U, T3, U>>")]
        public void L_Yield3_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield3_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Yield4_F) + "() => Func<Func<T1, T2, T3, U, U>, Func<T1, T2, T3, U, U>>")]
        public void L_Yield4_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Yield4_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_A) + "() => Func<Func<Action>, Action>")]
        public void L_Execute_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_A) + "() => Func<Func<Action<T1>>, Action<T1>>")]
        public void L_Execute_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_A) + "() => Func<Func<Action<T1, T2>>, Action<T1, T2>>")]
        public void L_Execute_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_A) + "() => Func<Func<Action<T1, T2, T3>>, Action<T1, T2, T3>>")]
        public void L_Execute_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_A) + "() => Func<Func<Action<T1, T2, T3, T4>>, Action<T1, T2, T3, T4>>")]
        public void L_Execute_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_F) + "() => Func<Func<Func<U>>, Func<U>>")]
        public void L_Execute_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_F) + "() => Func<Func<Func<T1, U>>, Func<T1, U>>")]
        public void L_Execute_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_F) + "() => Func<Func<Func<T1, T2, U>>, Func<T1, T2, U>>")]
        public void L_Execute_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_F) + "() => Func<Func<Func<T1, T2, T3, U>>, Func<T1, T2, T3, U>>")]
        public void L_Execute_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Execute_F) + "() => Func<Func<Func<T1, T2, T3, T4, U>>, Func<T1, T2, T3, T4, U>>")]
        public void L_Execute_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Execute_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_A) + "() => Func<Action<T1>, Action<U1>>")]
        public void L_Cast_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cast_A) + "() => Func<Action<T1, T2>, Action<U1, U2>>")]
        public void L_Cast_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cast_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Do) + "() => Func<Func<U>, Action>")]
        public void L_Do()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Do
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Cache) + "() => Func<Func<U>, String, Func<U>>")]
        public void L_Cache()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Cache
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Cache) + "(Object&, Func<T>) => T")]
        public void Cache()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Cache
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.Cache) + "(T&, Func<T>) => T")]
        public void Cache()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.Cache
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.GetCacheData) + "(String) => Dictionary<String, CacheData>")]
        public void GetCacheData()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.GetCacheData
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.ClearCache) + "(String)")]
        public void ClearCache()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.ClearCache
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_A) + "() => Func<Action<T1>, Func<T1>, Action<T1>>")]
        public void L_SetFunc_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_F) + "() => Func<Func<T1, U>, Func<T1>, Func<T1, U>>")]
        public void L_SetFunc_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_A2) + "() => Func<Action<T1, T2>, Func<T2>, Action<T1, T2>>")]
        public void L_SetFunc_A2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_A2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_F2) + "() => Func<Func<T1, T2, U>, Func<T2>, Func<T1, T2, U>>")]
        public void L_SetFunc_F2()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_F2
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_A3) + "() => Func<Action<T1, T2, T3>, Func<T3>, Action<T1, T2, T3>>")]
        public void L_SetFunc_A3()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_A3
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_F3) + "() => Func<Func<T1, T2, T3, U>, Func<T3>, Func<T1, T2, T3, U>>")]
        public void L_SetFunc_F3()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_F3
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_A4) + "() => Func<Action<T1, T2, T3, T4>, Func<T4>, Action<T1, T2, T3, T4>>")]
        public void L_SetFunc_A4()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_A4
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_SetFunc_F4) + "() => Func<Func<T1, T2, T3, T4, U>, Func<T4>, Func<T1, T2, T3, T4, U>>")]
        public void L_SetFunc_F4()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_SetFunc_F4
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set_A) + "() => Func<Action<T1>, T1, Action<T1>>")]
        public void L_Set_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set_F) + "() => Func<Func<T1, U>, T1, Func<T1, U>>")]
        public void L_Set_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set2_A) + "() => Func<Action<T1, T2>, T2, Action<T1, T2>>")]
        public void L_Set2_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set2_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set2_F) + "() => Func<Func<T1, T2, U>, T2, Func<T1, T2, U>>")]
        public void L_Set2_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set2_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set3_A) + "() => Func<Action<T1, T2, T3>, T3, Action<T1, T2, T3>>")]
        public void L_Set3_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set3_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set3_F) + "() => Func<Func<T1, T2, T3, U>, T3, Func<T1, T2, T3, U>>")]
        public void L_Set3_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set3_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set4_A) + "() => Func<Action<T1, T2, T3, T4>, T4, Action<T1, T2, T3, T4>>")]
        public void L_Set4_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set4_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Set4_F) + "() => Func<Func<T1, T2, T3, T4, U>, T4, Func<T1, T2, T3, T4, U>>")]
        public void L_Set4_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Set4_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_A) + "() => Func<Action, U, Func<U>>")]
        public void L_Return_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_A) + "() => Func<Action<T1>, U, Func<T1, U>>")]
        public void L_Return_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_A) + "() => Func<Action<T1, T2>, U, Func<T1, T2, U>>")]
        public void L_Return_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_A) + "() => Func<Action<T1, T2, T3>, U, Func<T1, T2, T3, U>>")]
        public void L_Return_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_A) + "() => Func<Action<T1, T2, T3, T4>, U, Func<T1, T2, T3, T4, U>>")]
        public void L_Return_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_F) + "() => Func<Func<U>, U, Func<U>>")]
        public void L_Return_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_F) + "() => Func<Func<T1, U>, U, Func<T1, U>>")]
        public void L_Return_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_F) + "() => Func<Func<T1, T2, U>, U, Func<T1, T2, U>>")]
        public void L_Return_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_F) + "() => Func<Func<T1, T2, T3, U>, U, Func<T1, T2, T3, U>>")]
        public void L_Return_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Return_F) + "() => Func<Func<T1, T2, T3, T4, U>, U, Func<T1, T2, T3, T4, U>>")]
        public void L_Return_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Return_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Rotate_A) + "() => Func<Action<T1, T2>, Action<T2, T1>>")]
        public void L_Rotate_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Rotate_A) + "() => Func<Action<T1, T2, T3>, Action<T3, T1, T2>>")]
        public void L_Rotate_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Rotate_A) + "() => Func<Action<T1, T2, T3, T4>, Action<T4, T1, T2, T3>>")]
        public void L_Rotate_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Rotate_F) + "() => Func<Func<T1, T2, U>, Func<T2, T1, U>>")]
        public void L_Rotate_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Rotate_F) + "() => Func<Func<T1, T2, T3, U>, Func<T3, T1, T2, U>>")]
        public void L_Rotate_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Rotate_F) + "() => Func<Func<T1, T2, T3, T4, U>, Func<T4, T1, T2, T3, U>>")]
        public void L_Rotate_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Rotate_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RotateBack_A) + "() => Func<Action<T1, T2>, Action<T2, T1>>")]
        public void L_RotateBack_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RotateBack_A) + "() => Func<Action<T1, T2, T3>, Action<T2, T3, T1>>")]
        public void L_RotateBack_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RotateBack_A) + "() => Func<Action<T1, T2, T3, T4>, Action<T2, T3, T4, T1>>")]
        public void L_RotateBack_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RotateBack_F) + "() => Func<Func<T1, T2, U>, Func<T2, T1, U>>")]
        public void L_RotateBack_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RotateBack_F) + "() => Func<Func<T1, T2, T3, U>, Func<T2, T3, T1, U>>")]
        public void L_RotateBack_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_RotateBack_F) + "() => Func<Func<T1, T2, T3, T4, U>, Func<T2, T3, T4, T1, U>>")]
        public void L_RotateBack_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_RotateBack_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_A) + "() => Func<Action<T1>, T1, Action<T1>>")]
        public void L_Default_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_A) + "() => Func<Action<T1, T2>, T1, Action<T1, T2>>")]
        public void L_Default_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default2_A) + "() => Func<Action<T1, T2>, T2, Action<T1, T2>>")]
        public void L_Default2_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_A) + "() => Func<Action<T1, T2, T3>, T1, Action<T1, T2, T3>>")]
        public void L_Default_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default2_A) + "() => Func<Action<T1, T2, T3>, T2, Action<T1, T2, T3>>")]
        public void L_Default2_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default3_A) + "() => Func<Action<T1, T2, T3>, T3, Action<T1, T2, T3>>")]
        public void L_Default3_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default3_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_A) + "() => Func<Action<T1, T2, T3, T4>, T1, Action<T1, T2, T3, T4>>")]
        public void L_Default_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default2_A) + "() => Func<Action<T1, T2, T3, T4>, T2, Action<T1, T2, T3, T4>>")]
        public void L_Default2_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default3_A) + "() => Func<Action<T1, T2, T3, T4>, T3, Action<T1, T2, T3, T4>>")]
        public void L_Default3_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default3_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default4_A) + "() => Func<Action<T1, T2, T3, T4>, T4, Action<T1, T2, T3, T4>>")]
        public void L_Default4_A()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default4_A
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_F) + "() => Func<Func<T1, U>, T1, Func<T1, U>>")]
        public void L_Default_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_F) + "() => Func<Func<T1, T2, U>, T1, Func<T1, T2, U>>")]
        public void L_Default_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default2_F) + "() => Func<Func<T1, T2, U>, T2, Func<T1, T2, U>>")]
        public void L_Default2_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_F) + "() => Func<Func<T1, T2, T3, U>, T1, Func<T1, T2, T3, U>>")]
        public void L_Default_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default2_F) + "() => Func<Func<T1, T2, T3, U>, T2, Func<T1, T2, T3, U>>")]
        public void L_Default2_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default3_F) + "() => Func<Func<T1, T2, T3, U>, T3, Func<T1, T2, T3, U>>")]
        public void L_Default3_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default3_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default_F) + "() => Func<Func<T1, T2, T3, T4, U>, T1, Func<T1, T2, T3, T4, U>>")]
        public void L_Default_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default2_F) + "() => Func<Func<T1, T2, T3, T4, U>, T2, Func<T1, T2, T3, T4, U>>")]
        public void L_Default2_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default2_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default3_F) + "() => Func<Func<T1, T2, T3, T4, U>, T3, Func<T1, T2, T3, T4, U>>")]
        public void L_Default3_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default3_F
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Logic)+ "." + nameof(L.Logic.L_Default4_F) + "() => Func<Func<T1, T2, T3, T4, U>, T4, Func<T1, T2, T3, T4, U>>")]
        public void L_Default4_F()
        {
            // TODO: Implement method test LCore.Extensions.L.Logic.L_Default4_F
        }

    }
}
