// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.Numbers;
namespace L_Tests.LCore.Numbers
{
    ///<summary>
    /// Covering class: LCore.Numbers.FloatNumber
    ///
    ///LUnit has Autogenerated 8 method stubs:
    ///</summary>
    public partial class FloatNumberTester
    {
        [Fact]
        [Trait(Traits.TargetMember,"LCore.Numbers.FloatNumber.op_Implicit(Single) => FloatNumber")]
        public void op_Implicit()
        {
            // TODO: Implement method test LCore.Numbers.FloatNumber.op_Implicit
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Numbers)+ "." + nameof(FloatNumber)+ "." + nameof(FloatNumber.GetValuePrecision) + "() => Number")]
        public void GetValuePrecision()
        {
            // TODO: Implement method test LCore.Numbers.FloatNumber.GetValuePrecision
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Numbers)+ "." + nameof(FloatNumber)+ "." + nameof(FloatNumber.Add) + "(Single, Single) => Single")]
        public void Add()
        {
            // TODO: Implement method test LCore.Numbers.FloatNumber.Add
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Numbers)+ "." + nameof(FloatNumber)+ "." + nameof(FloatNumber.Subtract) + "(Single, Single) => Single")]
        public void Subtract()
        {
            // TODO: Implement method test LCore.Numbers.FloatNumber.Subtract
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Numbers)+ "." + nameof(FloatNumber)+ "." + nameof(FloatNumber.Multiply) + "(Single, Single) => Single")]
        public void Multiply()
        {
            // TODO: Implement method test LCore.Numbers.FloatNumber.Multiply
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Numbers)+ "." + nameof(FloatNumber)+ "." + nameof(FloatNumber.Divide) + "(Single, Single) => Object")]
        public void Divide()
        {
            // TODO: Implement method test LCore.Numbers.FloatNumber.Divide
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Numbers)+ "." + nameof(FloatNumber)+ "." + nameof(FloatNumber.New) + "(Single) => Number<Single>")]
        public void New()
        {
            // TODO: Implement method test LCore.Numbers.FloatNumber.New
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Numbers)+ "." + nameof(FloatNumber)+ "." + nameof(FloatNumber.ToString) + "() => String")]
        public new void ToString()
        {
            // TODO: Implement method test LCore.Numbers.FloatNumber.ToString
        }

    }
}
