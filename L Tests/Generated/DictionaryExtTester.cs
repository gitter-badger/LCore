using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.Extensions;
/*
Covering class: DictionaryExt

LUnit has Autogenerated 23 method stubs:
*/
namespace L_Tests.LCore.Extensions
    {
    public partial class DictionaryExtTester
        {
        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, T2>) => List<Tuple<T1, T2>>")]
        public void Flatten()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, IEnumerable<T2>>) => List<Tuple<T1, T2>>")]
        public void Flatten()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, T3>>) => List<Tuple<T1, T2, T3>>")]
        public void Flatten()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, IEnumerable<T3>>>) => List<Tuple<T1, T2, T3>>")]
        public void Flatten()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, Dictionary<T3, T4>>>) => List<Tuple<T1, T2, T3, T4>>")]
        public void Flatten()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, Dictionary<T3, IEnumerable<T4>>>>) => List<Tuple<T1, T2, T3, T4>>")]
        public void Flatten()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, Dictionary<T3, Dictionary<T4, T5>>>>) => List<Tuple<T1, T2, T3, T4, T5>>")]
        public void Flatten()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, Dictionary<T3, Dictionary<T4, IEnumerable<T5>>>>>) => List<Tuple<T1, T2, T3, T4, T5>>")]
        public void Flatten()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, Dictionary<T3, Dictionary<T4, Dictionary<T5, T6>>>>>) => List<Tuple<T1, T2, T3, T4, T5, T6>>")]
        public void Flatten()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, Dictionary<T3, Dictionary<T4, Dictionary<T5, IEnumerable<T6>>>>>>) => List<Tuple<T1, T2, T3, T4, T5, T6>>")]
        public void Flatten()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, Dictionary<T3, Dictionary<T4, Dictionary<T5, Dictionary<T6, T7>>>>>>) => List<Tuple<T1, T2, T3, T4, T5, T6, T7>>")]
        public void Flatten()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, Dictionary<T3, Dictionary<T4, Dictionary<T5, Dictionary<T6, IEnumerable<T7>>>>>>>) => List<Tuple<T1, T2, T3, T4, T5, T6, T7>>")]
        public void Flatten()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, Dictionary<T3, Dictionary<T4, Dictionary<T5, Dictionary<T6, Dictionary<T7, T8>>>>>>>) => List<Tuple<T1, T2, T3, T4, T5, T6, T7, T8>>")]
        public void Flatten()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.Flatten) + "(Dictionary<T1, Dictionary<T2, Dictionary<T3, Dictionary<T4, Dictionary<T5, Dictionary<T6, Dictionary<T7, IEnumerable<T8>>>>>>>>) => List<Tuple<T1, T2, T3, T4, T5, T6, T7, T8>>")]
        public void Flatten()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flatten
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.Flip) + "(Dictionary<TKey, TValue>) => Dictionary<TValue, TKey>")]
        public void Flip()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.Flip
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.SafeRemove) + "(Dictionary<TKey, TValue>, TKey)")]
        public void SafeRemove()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.SafeRemove
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable<Tuple<TKey, TValue>>) => Dictionary<TKey, List<TValue>>")]
        public void ToDictionary()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable<Tuple<TKey, TKey2, TValue>>) => Dictionary<TKey, Dictionary<TKey2, List<TValue>>>")]
        public void ToDictionary()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable<Tuple<TKey, TKey2, TKey3, TValue>>) => Dictionary<TKey, Dictionary<TKey2, Dictionary<TKey3, List<TValue>>>>")]
        public void ToDictionary()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable<Tuple<TKey, TKey2, TKey3, TKey4, TValue>>) => Dictionary<TKey, Dictionary<TKey2, Dictionary<TKey3, Dictionary<TKey4, List<TValue>>>>>")]
        public void ToDictionary()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable<Tuple<TKey, TKey2, TKey3, TKey4, TKey5, TValue>>) => Dictionary<TKey, Dictionary<TKey2, Dictionary<TKey3, Dictionary<TKey4, Dictionary<TKey5, List<TValue>>>>>>")]
        public void ToDictionary()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable<Tuple<TKey, TKey2, TKey3, TKey4, TKey5, TKey6, TValue>>) => Dictionary<TKey, Dictionary<TKey2, Dictionary<TKey3, Dictionary<TKey4, Dictionary<TKey5, Dictionary<TKey6, List<TValue>>>>>>>")]
        public void ToDictionary()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.Extensions) + "." + nameof(DictionaryExt) + "." + nameof(DictionaryExt.ToDictionary) + "(IEnumerable<Tuple<TKey, TKey2, TKey3, TKey4, TKey5, TKey6, TKey7, TValue>>) => Dictionary<TKey, Dictionary<TKey2, Dictionary<TKey3, Dictionary<TKey4, Dictionary<TKey5, Dictionary<TKey6, Dictionary<TKey7, List<TValue>>>>>>>>")]
        public void ToDictionary()
            {
            // TODO: Implement method test LCore.Extensions.DictionaryExt.ToDictionary
            }

        }
    }
