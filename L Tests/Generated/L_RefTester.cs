// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.Extensions;
namespace L_Tests.LCore.Extensions
{
    ///<summary>
    /// Covering class: LCore.Extensions.L.Ref
    ///
    ///LUnit has Autogenerated 15 method stubs:
    ///</summary>
    public partial class L_RefTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Ref)+ "." + nameof(L.Ref.Constant) + "(String) => FieldInfo")]
        public void Constant()
        {
            // TODO: Implement method test LCore.Extensions.L.Ref.Constant
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Ref)+ "." + nameof(L.Ref.Constructor) + "(Expression<Func<T>>) => ConstructorInfo")]
        public void Constructor()
        {
            // TODO: Implement method test LCore.Extensions.L.Ref.Constructor
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Ref)+ "." + nameof(L.Ref.FindType) + "(String, Assembly[]) => Type")]
        public void FindType()
        {
            // TODO: Implement method test LCore.Extensions.L.Ref.FindType
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Ref)+ "." + nameof(L.Ref.FindMembers) + "(String, Assembly[]) => MemberInfo[]")]
        public void FindMembers()
        {
            // TODO: Implement method test LCore.Extensions.L.Ref.FindMembers
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Ref)+ "." + nameof(L.Ref.GetNamespaceTypes) + "(String, Type[]) => Type[]")]
        public void GetNamespaceTypes()
        {
            // TODO: Implement method test LCore.Extensions.L.Ref.GetNamespaceTypes
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Ref)+ "." + nameof(L.Ref.GetNamespaceTypes) + "(Type, String, Type[]) => Type[]")]
        public void GetNamespaceTypes()
        {
            // TODO: Implement method test LCore.Extensions.L.Ref.GetNamespaceTypes
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Ref)+ "." + nameof(L.Ref.GetNamespaceTypes) + "(Assembly, String, Type[]) => Type[]")]
        public void GetNamespaceTypes()
        {
            // TODO: Implement method test LCore.Extensions.L.Ref.GetNamespaceTypes
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Ref)+ "." + nameof(L.Ref.Member) + "(Expression<Func<T, Object>>) => MemberInfo")]
        public void Member()
        {
            // TODO: Implement method test LCore.Extensions.L.Ref.Member
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Ref)+ "." + nameof(L.Ref.Method) + "(Expression<Action<T>>) => MethodInfo")]
        public void Method()
        {
            // TODO: Implement method test LCore.Extensions.L.Ref.Method
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Ref)+ "." + nameof(L.Ref.StaticMethod) + "(Expression<Action>) => MethodInfo")]
        public void StaticMethod()
        {
            // TODO: Implement method test LCore.Extensions.L.Ref.StaticMethod
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Ref)+ "." + nameof(L.Ref.Event) + "(String) => EventInfo")]
        public void Event()
        {
            // TODO: Implement method test LCore.Extensions.L.Ref.Event
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Ref)+ "." + nameof(L.Ref.GetAvailableTestAssemblies) + "() => Assembly[]")]
        public void GetAvailableTestAssemblies()
        {
            // TODO: Implement method test LCore.Extensions.L.Ref.GetAvailableTestAssemblies
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Ref)+ "." + nameof(L.Ref.GetPropertyNames) + "() => List<String>")]
        public void GetPropertyNames()
        {
            // TODO: Implement method test LCore.Extensions.L.Ref.GetPropertyNames
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Ref)+ "." + nameof(L.Ref.GetProjectRootPath) + "() => String")]
        public void GetProjectRootPath()
        {
            // TODO: Implement method test LCore.Extensions.L.Ref.GetProjectRootPath
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.Extensions)+ "." + nameof(L)+ "." + nameof(L.Ref)+ "." + nameof(L.Ref.GetSolutionRootPath) + "() => String")]
        public void GetSolutionRootPath()
        {
            // TODO: Implement method test LCore.Extensions.L.Ref.GetSolutionRootPath
        }

    }
}
