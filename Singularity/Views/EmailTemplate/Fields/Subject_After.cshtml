@* Generator: MvcView *@


@using LCore.Extensions;
@using Singularity.Annotations;
@using Singularity.Extensions;

@{

    Dictionary<string, List<ModelMetadata>> BasedMeta = new Dictionary<string, List<ModelMetadata>>();

    ModelContext DbContext = ContextProviderFactory.GetCurrent().GetContext(Session);

    List<TextContent> GlobalTokens = TextContent.FindGlobalTokens(DbContext).List();

    Type ModelUserType = DbContext.UserInfoType;

    Type ModelExportType = typeof(EmailHistory.EmailContext<>);

    // Inject the project's user type so the context matches
    ModelExportType = ModelExportType.MakeGenericType(ModelUserType);

    Dictionary<string, ModelMetadata> AllMeta = ModelExportType.GetMeta(m => !m.HasAttribute<FieldNoTokenAttribute>());

    AllMeta.Keys.Each(k =>
    {
        string BaseKey = "";

        if (AllMeta[k].HasAttribute<IFieldNoToken>())
            {
            return;
            }

        if (k.Contains("."))
            {
            BaseKey = k.Substring(0, k.LastIndexOf('.'));
            }

        if (!BasedMeta.ContainsKey(BaseKey))
            {
            BasedMeta[BaseKey] = new List<ModelMetadata>();
            }

        BasedMeta[BaseKey].Add(AllMeta[k]);
    });
}

@model IViewField

@if (!Model.ViewTypes.Has(ControllerHelper.ViewType.TableCell))
    {
    <div class="field-list-add-drag" target="#Body" position="end" token-braces="true">
        <h3>@Html.TextContent("Singularity_CustomExport_Fields", "Fields")</h3>

        @if (GlobalTokens.Count > 0)
            {
            const string BaseKey = "global-tokens";

            <span class="btn-info btn left method-show-hide" click-fade-toggle=".field-group-@BaseKey.ReplaceAll(".", "" )">
                <glyph class="field-group-@BaseKey.ReplaceAll(".", "" )">&#x2b;</glyph>
                <glyph class="field-group-@BaseKey.ReplaceAll(".", "" )" style=" display: none;">&#x2212;</glyph>
            </span>


            <h4>Global Tokens</h4>

            <div class="field-group-@BaseKey.ReplaceAll(".", "")" style="display:none;">
                @foreach (TextContent Text in GlobalTokens)
                        {
                        string Key = Text.Token;

                    <div class="field-list-row" data-field-name="@Key" title="@Key">
                        <div class="add-button">
                            <glyph>&#x2b;</glyph>
                        </div>
                        <div class="field-name" title="@Html.Raw(Text.Description.Replace("\r\n", "<br>"))">
                            @Text.Token.Humanize()
                        </div>
                        <div class="field-token">
                            <input type="text" readonly value="[@Key]" />
                        </div>
                    </div>
                    }
            </div>
            }

        @foreach (string BaseKey in BasedMeta.Keys)
            {
            <div class="field-group-header-@BaseKey.ReplaceAll(".", "")">
                <span class="btn-info btn left method-show-hide" click-fade-toggle=".field-group-@BaseKey.ReplaceAll(".", "" )">
                    <glyph class="field-group-@BaseKey.ReplaceAll(".", "" )">&#x2b;</glyph>
                    <glyph class="field-group-@BaseKey.ReplaceAll(".", "" )" style=" display: none;">&#x2212;</glyph>
                </span>

                @if (string.IsNullOrEmpty(BaseKey))
                    {
                    <h4>@ModelExportType.GetFriendlyTypeName()</h4>
                    continue;
                    }
                <h4>@BaseKey.ReplaceAll(".", " ")</h4>

                <div class="field-group-@BaseKey.ReplaceAll(".", "")" style="display:none;">
                    @foreach (ModelMetadata Meta in BasedMeta[BaseKey])
                        {
                        string Key = Meta.PropertyName;

                        if (!string.IsNullOrEmpty(BaseKey))
                            {
                            Key = $"{BaseKey}.{Key}";
                            }

                        <div class="field-list-row" data-field-name="@Key" title="@Key">
                            <div class="add-button">
                                <glyph>&#x2b;</glyph>
                            </div>
                            <div class="field-name">
                                @Meta.GetDisplayName().Humanize()
                            </div>
                            <div class="field-token">
                                <input type="text" readonly value="[@Key]" />
                            </div>
                        </div>
                        }
                </div>
            </div>
            }
    </div>
    }