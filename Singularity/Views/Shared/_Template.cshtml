@* Generator: MvcView *@

@using LCore;
@using Singularity;
@using Singularity.Models;
@using Singularity.Controllers;
@using Singularity.Context;
@using Singularity.Routes;
@using Singularity.Extensions;
@using Singularity.Annotations;

@using System.Linq;
@using System.Linq.Expressions;
@using System.Collections;
@using System.Collections.Generic;
@using System.ComponentModel;
@using System.ComponentModel.DataAnnotations;
@using System.ComponentModel.Design;
@using System.Web;
@using System.Web.Mvc;

@{
    String Token = Model.Token ?? "";

    Token = Token.ReplaceAll(" ", "");

    ContextProvider ContextProvider = ContextProviderFactory.GetCurrent();
    ModelContext Context = ContextProvider.GetContext(Session);

    Template Content = Template.FindByToken(Context, Token);

    // Auto-create Template models so they exist before being filled in
    if (Content == null && Model.AutoCreate)
        {
        Content = new Template();
        Content.Active = true;
        Content.Token = Model.Token;
        Content.TemplateHTML = Model.DefaultText;

        Context.GetDBSet<Template>().Add(Content);

        Context.SaveChanges();
        }

    ModelPermissions Permissions = ContextProvider.GetModelPermissions(Session, typeof(Template));

    String Display = Content != null ? Content.TemplateHTML : Model.DefaultText;
    Display = Display ?? "";

    for (int i = 0; i < Model.ContextData.Length; i++)
        {
        Display = Display.ReplaceAll("[" + i + "]", (Model.ContextData[i] ?? "").ToString());
        }

    Display = Display.ReplaceAll("\r\n", "<br>");
}

@model TemplateViewModel

@if (Content != null)
    {
    <span class="text-content-custom">
        @if (Model.ShowText)
            {
            @Html.Raw(Display)
            }
        else
            {
            <span>...</span>
            }
        @if (Permissions.Edit == true)
            {
            <span class="text-content-edit">
                <span onclick="window.location = '@(Url.Controller<TemplateController>()
                    .QS(new Dictionary<String, Object> { { "Token", Token }, { "DefaultText", HttpUtility.HtmlEncode(Model.DefaultText) } })
                    .Action<int, String, Boolean>(c => c.Edit, Content.GetID<int>(), Request.Url.AbsoluteUri, false))'; return false;" class="btn btn-default">
                    <glyph>&#xe065;</glyph>
                </span>
            </span>
            }
    </span>
    }
else
    {
    <span class="text-content-default">
        @if (Model.ShowText)
            {
            @Html.Raw(Display)
            }
        else
            {
            <span>...</span>
            }
        @if (Permissions.Create == true)
            {
            <span class="text-content-create">
                
                <span onclick="window.location = '@(Url.Controller<TemplateController>()
                    .QS(new Dictionary<String, Object> { { "Token", Token }, { "DefaultText", HttpUtility.HtmlEncode(Model.DefaultText) } })
                    .Action(c => c.Create, Request.Url.AbsoluteUri))'; return false;" class="btn btn-default">
                    <glyph>&#xe065;</glyph>
                </span>
            </span>
            }
    </span>
    }
