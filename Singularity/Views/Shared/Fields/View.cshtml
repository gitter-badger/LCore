@* Generator: MvcView *@

@using LCore;
@using Singularity;
@using Singularity.Models;
@using Singularity.Controllers;
@using Singularity.Context;
@using Singularity.Routes;
@using Singularity.Annotations;
@using Singularity.Extensions;
@using System.Collections;
@using System.Collections.Generic;
@using System.ComponentModel;
@using System.ComponentModel.Design;
@using System.Web;
@using System.Web.Mvc;
@using System.Linq;
@using System.Linq.Expressions;
@using System.ComponentModel.DataAnnotations;
@using System.ComponentModel.DataAnnotations.Schema;

@{
    Boolean ShowLabel = Model.ViewTypes.HasAny(new[] {ControllerHelper.ViewType.Create,
        ControllerHelper.ViewType.Edit,
        ControllerHelper.ViewType.Display});
}

@model IViewField


<div class="field @Model.ViewTypes.CollectStr((i,t) => { return t.ToString().ToLower() + "-field ";}) field-@Model.ColumnClass @Model.ModelFieldClasses.Combine(" ")"
     @Html.Raw(Model.ModelFieldHtmlAttributes.Combine(" "))
     data-object-type="@Model.Meta.ModelType"
     data-type-name="@Model.Meta.DataTypeName">

    @if (Model.Meta.HasAttribute<ICustomPartial>() &&
        Model.Meta.GetAttribute<ICustomPartial>().IsActive(Html, Model, Model.ViewTypes))
        {
        Model.Meta.GetAttribute<ICustomPartial>().RenderPartial(Html, Model, Model.ViewTypes);
        }
    else
        {
        if (Model.ViewTypes.Has(ControllerHelper.ViewType.TableCell) &&
            !Model.Meta.HasAttribute<NotMappedAttribute>() &&
            (Model.Meta.ModelType.PreferGeneric().HasInterface<IConvertible>() ||
            Model.Meta.ModelType.HasInterface<IModel>()))
            {
            String Data = (Model.PropertyData ?? "").ToString();

            if (Model.PropertyData is DateTime)
                {
                Data = ((DateTime)Model.PropertyData).ToShortDateString();
                }
            Data = Data.RemoveAll(" 12:00:00 AM");

            if (Model.PropertyData is IModel)
                {
                Data = ((IModel)Model.PropertyData).ToString();
                }

            if (!String.IsNullOrEmpty(Data))
                {
                <span class="manage-view-show-similar"
                      data-field-name="@Model.Meta.PropertyName"
                      data-field-value="@Data"
                      title="View Similar">
                    <glyph>&#xe003;</glyph>
                </span>
                }
            }

        if (ShowLabel)
            {
            String Label = Model.Meta.DisplayName ?? Model.Meta.PropertyName.Humanize();

            @Html.TextContent("Manage_Edit_Field_Label_" + Model.ModelData.GetFriendlyTypeName() + "_" + Label,
                Html.Label(Model.Meta.PropertyName, Label))
            }

        if (Model.PropertyData == null)
            {
            @Html.Partial(ControllerHelper.PartialViews.Field_View_Empty, Model)
            }
        else
            {
            if (Html.ViewExists(ControllerHelper.PartialViews.Field_View_PropertyName(Model.PropertyName)))
                {
                // Override the Edit view for the property.

                @Html.Partial(ControllerHelper.PartialViews.Field_View_PropertyName(Model.PropertyName));
                }
            else if (Model.Meta.AdditionalValues.ContainsKey(FieldStringFormatAttribute.Key) &&
                Model.PropertyData is IFormattable)
                {
                @Html.Partial(ControllerHelper.PartialViews.Field_View_FormatString, Model)
                }
            else if (Model.Meta.ModelType == typeof(Boolean) || Model.Meta.ModelType == typeof(Boolean?))
                {
                @Html.Partial(ControllerHelper.PartialViews.Field_View_Boolean, Model)
                }
            else if (Model.Meta.DataTypeName == DataType.Currency.ToString())
                {
                @Html.Partial(ControllerHelper.PartialViews.Field_View_Currency, Model)
                }
            else if (Model.Meta.ModelType == typeof(int) || Model.Meta.ModelType == typeof(int?))
                {
                @Html.Partial(ControllerHelper.PartialViews.Field_View_Int, Model)
                }
            else if (Model.Meta.ModelType == typeof(DateTime) || Model.Meta.ModelType == typeof(DateTime?))
                {
                @Html.Partial(ControllerHelper.PartialViews.Field_View_DateTime, Model)
                }
            else if (Model.ModelData.TrueModelType().MemberHasAttribute<DisplayColumnAttribute>(true) &&
                Model.ModelData.TrueModelType().MemberGetAttribute<DisplayColumnAttribute>(true).DisplayColumn == Model.Meta.PropertyName)
                {
                @Html.Partial(ControllerHelper.PartialViews.Field_View_DisplayColumn, Model)
                }
            else if (Model.Meta.ModelType.HasInterface<IModel>(false))
                {
                @Html.Partial(ControllerHelper.PartialViews.Field_View_IModel, Model)
                }
            else if (Model.Meta.ModelType.HasInterface<IEnumerable>() &&
                Model.Meta.ModelType.IsGenericType &&
                Model.Meta.ModelType.GetGenericArguments()[0].HasInterface<IModel>())
                {
                @Html.Partial(ControllerHelper.PartialViews.Field_View_IModelCollection, Model)
                }
            else if (Model.Meta.ModelType.PreferGeneric().IsEnum)
                {
                @Html.Partial(ControllerHelper.PartialViews.Field_View_Enum, Model)
                }
            else if (Html.ViewExists(ControllerHelper.PartialViews.Field_View_PropertyType(Model.Meta.ModelType)))
                {
                @Html.Partial(ControllerHelper.PartialViews.Field_View_PropertyType(Model.Meta.ModelType), Model)
                }
            else if (Html.ViewExists(ControllerHelper.PartialViews.Field_View_DataTypeName(Model.Meta.DataTypeName)))
                {
                @Html.Partial(ControllerHelper.PartialViews.Field_View_DataTypeName(Model.Meta.DataTypeName), Model)
                }
            else if (Model.Meta.ModelType == typeof(String))
                {
                @Html.Partial(ControllerHelper.PartialViews.Field_View_String, Model)
                }
            else if (Model.Meta.ModelType == typeof(String[,]))
                {
                @Html.Partial(ControllerHelper.PartialViews.Field_View_StringMatrix, Model)
                }
            else if (Model.Meta.ModelType == typeof(String[][]))
                {
                @Html.Partial(ControllerHelper.PartialViews.Field_View_StringMultiArray, Model)
                }
            else
                {
                @Html.Partial(ControllerHelper.PartialViews.Field_View_Unknown, Model)
                }
            }
        }
</div>
