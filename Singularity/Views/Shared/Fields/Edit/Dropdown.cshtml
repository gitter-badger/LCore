@* Generator: MvcView *@
@using Singularity.Extensions;
@using Singularity.Annotations;

@{
    FieldType_Dropdown FieldAttr = Model.Meta.GetAttribute<FieldType_Dropdown>();

    bool Required = Model.Meta.IsRequired;

    string EmptyValue = FieldAttr.EmptyValue;
    string EmptyKey = FieldAttr.EmptyKey;

    List<SelectListItem> Items = FieldAttr.KeyValues(ViewContext).Select(KeyValue => new SelectListItem
        {
        Text = KeyValue.Key,
        Value = KeyValue.Value,
        Selected = (Model.PropertyData ?? "").ToString() == KeyValue.Value
        }).ToList();
}

@model IViewField

@if (FieldAttr.MultiSelect)
    {
    <div class="option-checks">

        <input name="@Model.Meta.PropertyName" type="hidden" value="" />

        @foreach (SelectListItem i in Items)
            {
            <div class="list-check">
                <input type="checkbox"
                       id="@(Model.Meta.PropertyName)_@(i.Value)"
                       name="@Model.Meta.PropertyName"
                       value="@i.Value"
                       @((Model.PropertyData ?? "").ToString().Contains(i.Value) ? Html.Raw("checked=\"true\"") : Html.Raw(""))>
                <label for="@(Model.Meta.PropertyName)_@(i.Value)">
                    @i.Text
                </label>
            </div>
            }
    </div>
    }
else
    {
    <select name="@Model.Meta.PropertyName" id="@Model.Meta.PropertyName">
        @if (!Required)
            {
            <option value="@EmptyValue" @((string)Model.PropertyData == EmptyValue ? "selected" : "")>
                @EmptyKey
            </option>

            }
        @foreach (SelectListItem Item in Items)
            {
            <option value="@Item.Value" @(Item.Selected ? "selected" : "")>
                @Item.Text
            </option>
            }
    </select>
    }