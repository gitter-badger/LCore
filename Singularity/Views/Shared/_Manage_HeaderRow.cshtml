@* Generator: MvcView *@

@using LCore;
@using Singularity;
@using Singularity.Models;
@using Singularity.Controllers;
@using System.Linq;
@using System.Linq.Expressions;
@using System.Collections;
@using System.Collections.Generic;
@using System.ComponentModel;
@using System.ComponentModel.DataAnnotations;
@using System.ComponentModel.DataAnnotations.Schema;
@using System.ComponentModel.Design;
@using System.Web;
@using System.Web.Mvc;

@model ManageViewModel

@{
    IEnumerable<System.Web.ModelBinding.ModelMetadata> Fields = null;

    if (Model.ModelType.HasInterface(typeof(IFieldGroups), true))
        {
        Fields = (Model.ModelType.New() as IFieldGroups).GetFieldGroup(Context, ControllerHelper.ViewType.TableCell);
        }
    else
        {
        Fields = FieldGroups.GetFieldGroup(Context, Model.ModelType, ControllerHelper.ViewType.TableCell);
        }
}

<thead>
    <tr>
        @if (ViewContext.Controller is ManageController &&
            ((ManageController)ViewContext.Controller).OverridePermissions.View == true &&
            ControllerHelper.AllowView(Session, Model.ModelType))
            {
            <td class="view-cell center">
                <div>
                    View
                </div>
            </td>
            }

        @foreach (System.Web.ModelBinding.ModelMetadata Meta in Fields)
            {
            String ColumnTitle = Meta.DisplayName ?? Meta.PropertyName.Humanize();
            String ColumnClass = Meta.PropertyName.ToUrlSlug();

            <td class="@(Model.OverrideSort == Meta.PropertyName ? "sort-column" : "") @ColumnClass">
                @if (false && Meta.ModelType.HasInterface(typeof(IModel), true))
                    {
                    // No sorting relational fields for now.

                    @ColumnTitle
                    }
                else if (Meta.HasAttribute<NotMappedAttribute>())
                    {
                    // No DB column: no sorting

                    @ColumnTitle
                    }
                else if (Meta.PropertyName.Contains("."))
                    {
                    foreach (String s in Meta.PropertyName.Split("."))
                        {
                        @s.Humanize()
                        @( new HtmlString("&nbsp;"))
                        }
                    }
                else
                    {
                    <a href="@Url.Action(Model.Controller.ManageActionName, Model.Controller.Name, Model.Route_SortColumn(Meta.PropertyName))">
                        @ColumnTitle

                        @if (Model.OverrideSort == Meta.PropertyName)
                            {
                            if (Model.OverrideSortDirection == "ASC")
                                {
                                <span class="glyphicons glyphicons-up-arrow">&#xe093;</span>
                                }
                            else
                                {
                                <span class="glyphicons glyphicons-down-arrow">&#xe094;</span>
                                }
                            }
                    </a>
                    }
            </td>
            }

        @if (ViewContext.Controller is ManageController &&
            ((ManageController)ViewContext.Controller).OverridePermissions.Edit == true &&
            ControllerHelper.AllowEdit(Session, Model.ModelType))
            {
            <td class="edit-cell">
                <div>
                    Edit
                </div>
            </td>
            }

        @if (ViewContext.Controller is ManageController &&
            ((ManageController)ViewContext.Controller).OverridePermissions.Deactivate == true &&
            ControllerHelper.AllowDeactivate(Session, Model.ModelType))
            {
            <td class="deactivate-cell">
                <div>
                    @(Model.ShowInactiveRecords ? "Restore" : "Delete")
                </div>
            </td>
            }
    </tr>
</thead>