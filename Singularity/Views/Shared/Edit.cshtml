@* Generator: MvcView *@

@using LCore;
@using Singularity;
@using Singularity.Models;
@using Singularity.Controllers;
@using Singularity.Context;
@using System.Linq;
@using System.Linq.Expressions;
@using System.Collections;
@using System.Collections.Generic;
@using System.ComponentModel;
@using System.ComponentModel.DataAnnotations;
@using System.ComponentModel.DataAnnotations.Schema;
@using System.ComponentModel.Design;
@using System.Web;
@using System.Web.Mvc;

@{
    ViewBag.Create = !Model.HasID();

    ViewBag.Title = (ViewBag.Create ? "Create" : "Edit") + " " + Model.GetFriendlyTypeName() + ": " + Model.ToString();
    Layout = "~/Views/Shared/_Layout.cshtml";

    ControllerHelper.ViewType ViewType = ViewBag.Create ? ControllerHelper.ViewType.Create : ControllerHelper.ViewType.Edit;

    IEnumerable<System.Web.ModelBinding.ModelMetadata> Fields = null;

    if (Model is IFieldGroups)
        {
        Fields = ((IFieldGroups)Model).GetFieldGroup(Context, ViewType);
        }
    else
        {
        Fields = FieldGroups.GetFieldGroup(Context, Model.TrueModelType(), ViewType);
        }
}

@model IModel

<div class="@(ViewBag.Create ? "create" : "edit") wide-form"
     focus-first="input[type=text]">

    @if (!String.IsNullOrEmpty(ViewBag.ReturnURL))
        {
        <a class="btn btn-default right btn-warning" href="@ViewBag.ReturnURL">
            <glyph>&#xe091;</glyph>
            Cancel
        </a>
        }

    <h1>
        @(ViewBag.Create ? "Create" : "Edit") @Model.GetFriendlyTypeName()
    </h1>

    <h2>
        @Model.ToString()
    </h2>

    @using (Html.BeginForm(ViewBag.Create ? (String)ViewBag.CreateActionName : (String)ViewBag.EditActionName, (String)ViewBag.ControllerName, (Object)ViewBag.Route_Edit, FormMethod.Post, new { @class = "edit-form" }))
        {
        Boolean RequiredFields = false;

        Dictionary<String, List<System.Web.ModelBinding.ModelMetadata>> TabGroups = Fields.Group((m) =>
        {
            if (m.AdditionalValues.ContainsKey(FieldTabAttribute.Key))
                return (String)m.AdditionalValues[FieldTabAttribute.Key];
            else
                return "";
        });

        Boolean IsTabView = TabGroups.Keys.Count > 1;

        <div class="@(ViewBag.Create ? "create" : "edit")-fields @(IsTabView ? "tab-view" : "")">

            @Html.ValidationSummary(true)


            @if (IsTabView)
                {
                <div class="tab-container">
                    <ul>
                        @for (int i = 0; i < TabGroups.Keys.Count; i++)
                            {
                            <li>
                                <a href="#tab-@(i+1)">
                                    @TabGroups.Keys.List()[i]
                                </a>
                            </li>
                            }
                    </ul>

                    @{
                int j = 0;
                    }

                    @foreach (String s in TabGroups.Keys)
                        {
                        List<System.Web.ModelBinding.ModelMetadata> TabFields = TabGroups[s];

                        <div id="tab-@(j+1)">

                            @foreach (System.Web.ModelBinding.ModelMetadata Meta in TabFields)
                                {
                                ViewField Field = new ViewField(Context, Model.TrueModelType(), Meta.PropertyName, Model, ViewType);

                                if (Meta.IsRequired)
                                    {
                                    RequiredFields = true;
                                    }

                                @Html.Partial(ControllerHelper.PartialViews.Field, Field)
                                }
                        </div>
                            j++;
                        }
                </div>
                }
            else
                {
                foreach (System.Web.ModelBinding.ModelMetadata Meta in Fields)
                    {
                    ViewField Field = new ViewField(Context, Model.TrueModelType(), Meta.PropertyName, Model, ViewType);

                    if (Meta.IsRequired)
                        {
                        RequiredFields = true;
                        }

                    @Html.Partial(ControllerHelper.PartialViews.Field, Field)
                    }
                }


        </div>

        if (ViewBag.Create &&
            ViewBag.AllowAdminRandomize &&
            ContextProviderFactory.GetCurrent().CurrentUser(Session).IsAdmin == true)
            {
            <div id="randomize-fields" class="btn btn-default left"
                 key-bind-click="Ctrl+R"
                 key-bind-click-name="Randomize">
                <span class="glyphicon pointer">
                    &#xe115;
                </span>
                Randomize
            </div>
            }


        if (ViewContext.Controller is ManageController &&
            ((ManageController)ViewContext.Controller).OverridePermissions.Deactivate == true &&
            ControllerHelper.AllowDeactivate(Session, Model.TrueModelType()) && !ViewBag.Create)
            {
            <div class="left">
                <a href="@Url.Action((String)ViewBag.DeleteActionName,
                    (String)ViewBag.ControllerName, new { id = Model.GetID(), ReturnURL = ViewBag.ReturnURL })"
                   id="DeleteButton"
                   key-bind-click="Ctrl+Delete"
                   key-bind-click-name="Delete"
                   class="btn btn-default btn-danger">
                    <span class="glyphicon pointer">
                        &#xe020; Delete
                    </span>
                </a>
            </div>
            }

        if (!String.IsNullOrEmpty(ViewBag.ReturnURL))
            {
            <span class="right">

                <a class="btn btn-default btn-warning"
                   href="@ViewBag.ReturnURL"
                   id="CancelButton"
                   key-bind-click="Esc"
                   key-bind-click-name="Cancel">
                    <glyph>&#xe091;</glyph>
                    Cancel
                </a>
                <a class="btn btn-default btn-success pointer"
                   onclick="$('form').submit();"
                   id="SaveButton"
                   key-bind-click="Ctrl+S"
                   key-bind-click-name="Save">
                    <glyph>&#xe173;</glyph>
                    Save
                </a>
            </span>
            }

        if (RequiredFields)
            {
            <div class="required-fields">
                * Some fields are required
            </div>
            }
        }
</div>