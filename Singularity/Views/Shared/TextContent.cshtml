@* Generator: MvcView *@


@using LCore.Extensions;
@using Singularity.Extensions;

@{

    string Token = Model.Token ?? "";

    Token = Token.ReplaceAll(" ", "");

    var ContextProvider = ContextProviderFactory.GetCurrent();
    var Context = ContextProvider.GetContext(Session);

    var Content = TextContent.FindByToken(Context, Token);

    // Auto-create TextContent models so they exist before being filled in
    if (Content == null && Model.AutoCreate)
        {
        Content = new TextContent
            {
            Active = true,
            Token = Model.Token,
            Text = Model.DefaultText
            };

        Context.GetDBSet<TextContent>().Add(Content);

        try
            {
            Context.SaveChanges();
            }
        catch
            {

            }
        }

    var Permissions = ContextProvider.GetModelPermissions(Session, typeof(TextContent));

    string Display = Content != null ? Content.Text : Model.DefaultText;
    Display = Display ?? "";

    for (int Index = 0; Index < Model.ContextData.Length; Index++)
        {
        Display = Display.ReplaceAll($"[{Index}]", (Model.ContextData[Index] ?? "").ToString());
        }

    Display = Display.ReplaceAll("\r\n", "<br>");
}
@model TextContentViewModel

@try
    {
    if (Content != null)
        {
        <span class="text-content-custom">
            @if (Model.ShowText)
                {
                @Html.Raw(Display)
                }
            else
                {
                <span>...</span>
                }
            @if (Permissions != null && Permissions.Edit == true)
                {
                <span class="text-content-edit @(Model.ShowText ? "" : "no-text" )">

                    <span onclick="window.location = '@(Url.Controller<TextContentController>()
                    .QS(new Dictionary<string, object> { { "Token", Token }, { "DefaultText", HttpUtility.HtmlEncode(Model.DefaultText) } })
                    .Action(Controller => Controller.Edit, Content.GetID<int>(), Request.Url?.AbsoluteUri, false))'; return false;" class="btn btn-default">
                        <glyph>&#xe065;</glyph>
                    </span>
                </span>
                }
        </span>
        }
    else
        {
        <span class="text-content-default">
            @if (Model.ShowText)
                {
                @Html.Raw(Display)
                }
            else
                {
                <span>...</span>
                }
            @if (Permissions != null && Permissions.Create == true)
                {
                <span class="text-content-create @(Model.ShowText ? "" : "no-text")">


                    <span onclick="window.location = '@(Url.Controller<TextContentController>()
                    .QS(new Dictionary<string, object> { { "Token", Token }, { "DefaultText", HttpUtility.HtmlEncode(Model.DefaultText) } })
                    .Action(Controller => Controller.Create, Request.Url?.AbsoluteUri))'; return false;" class="btn btn-default">
                        <glyph>&#xe065;</glyph>
                    </span>
                </span>
                }
        </span>
        }
    }
catch
    {
    }