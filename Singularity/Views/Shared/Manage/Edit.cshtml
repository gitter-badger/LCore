@* Generator: MvcView *@


@using LCore.Extensions;
@using Singularity.Extensions;

@{
    if (ViewBag.Create == null)
        {
        ViewBag.Create = false;
        }

    var ViewType = ViewBag.Create == true ? ControllerHelper.ViewType.Create : ControllerHelper.ViewType.Edit;

    var Groups = Model as IFieldGroups;
    IEnumerable<ModelMetadata> Fields = Groups != null ? Groups.GetFieldGroup(Context, ViewType) : FieldGroups.GetFieldGroup(Context, Model.TrueModelType(), ViewType);
}

@model IModel

<div class="@(ViewBag.Create ? "create" : "edit") wide-form"
     focus-first="input[type=text]">

    <div class="view-updating-shade" style="display:none;">
        <div class="view-updating-icon spin">
            <glyph>&#xe031;</glyph>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(ViewBag.ReturnURL))
        {
        <a class="btn btn-default right btn-warning" href="@ViewBag.ReturnURL">
            <glyph>&#xe091;</glyph>
            Cancel
        </a>
        }

    <h1>
        @Html.TextContent($"Manage_{(ViewBag.Create ? "Create" : "Edit")}_Header_{Model.GetFriendlyTypeName()}",
            $"{(ViewBag.Create ? "Create" : "Edit")} {Model.GetFriendlyTypeName()}")
    </h1>

    <h2>
        @Html.TextContent($"Manage_{(ViewBag.Create ? "Create" : "Edit")}_ModelHeader_{Model.GetFriendlyTypeName()}", "[0]", new object[] { Model.ToString() })
    </h2>

    @using (Html.BeginForm(ViewBag.Create ?
                                            nameof(ManageController.Create) :
                                            nameof(ManageController.Edit),
                                        (string)ViewBag.ControllerName,
                                        (object)ViewBag.Route_Edit, FormMethod.Post, new { @class = "edit-form" }))
        {

        bool RequiredFields = false;

        string LastTab = "";

        Dictionary<string, List<ModelMetadata>> TabGroups = Fields.Group(Meta =>
        {
            if (Meta.AdditionalValues.ContainsKey(FieldTabAttribute.Key))
                {
                LastTab = (string)Meta.AdditionalValues[FieldTabAttribute.Key];
                return LastTab;
                }
            return LastTab;
        });

        bool IsTabView = TabGroups.Keys.Count > 1;

        <div class="@(ViewBag.Create ? "create" : "edit")-fields @(IsTabView ? "tab-view" : "")">

            @Html.ValidationSummary(true)

            @if (IsTabView)
                {
                <div class="tab-container">
                    <ul>
                        @for (int Index = 0; Index < TabGroups.Keys.Count; Index++)
                            {
                            string Key = TabGroups.Keys.List()[Index];

                            <li>
                                <a href="#tab-@(Index + 1)">
                                    @Html.TextContent($"Manage_{(ViewBag.Create ? "Create" : "Edit")}_Tab_{Model.GetFriendlyTypeName()}_{Key}", Key)
                                </a>
                            </li>
                            }
                    </ul>

                    @{
                        int Index2 = 0;
                    }

                    @foreach (string Str in TabGroups.Keys)
                        {
                        List<ModelMetadata> TabFields = TabGroups[Str];

                        <div id="tab-@(Index2 + 1)">

                            @foreach (var Meta in TabFields)
                                {
                                var Field = new ViewField(ViewContext, Model.TrueModelType(), Meta.PropertyName, Model, ViewType);

                                if (Meta.IsRequired)
                                    {
                                    RequiredFields = true;
                                    }

                                @Html.ViewField(Field)
                                }
                        </div>
                        Index2++;
                        }
                </div>
                            }
                        else
                            {
                            foreach (var Meta in Fields)
                                {
                                var Field = new ViewField(ViewContext, Model.TrueModelType(), Meta.PropertyName, Model, ViewType);

                                if (Meta.IsRequired)
                                    {
                                    RequiredFields = true;
                                    }

                                @Html.ViewField(Field)
                                }
                            }


        </div>

                        if (ViewBag.Create &&
                            ViewBag.AllowAdminRandomize &&
                            ContextProviderFactory.GetCurrent().CurrentUser(Session).IsAdmin)
                            {
                            <div id="randomize-fields" class="btn btn-default left"
                                 key-bind-click="Ctrl+R"
                                 key-bind-click-name="Randomize">
                                <span class="glyphicon pointer">
                                    &#xe115;
                                </span>
                                Randomize
                            </div>
                            }

                        if (ViewContext.AllowDeactivate(Model.TrueModelType()) && !ViewBag.Create)
                            {
                            <div class="left">
                                <a href="@(Url.Controller<ManageController>()
                    .Action((Expression<Func<ManageController, Func<int, string, ActionResult>>>)(Controller => Controller.Delete),
                    Model.GetID<int>(), ViewBag.ReturnURL))"
                                   id="DeleteButton"
                                   key-bind-click="Ctrl+Delete"
                                   key-bind-click-name="Delete"
                                   class="btn btn-default btn-danger">
                                    <span class="glyphicon pointer">
                                        &#xe020; Delete
                                    </span>
                                </a>
                            </div>
                            }

                        if (!string.IsNullOrEmpty(ViewBag.ReturnURL))
                            {
                            <span class="right">

                                <a class="btn btn-default btn-warning"
                                   href="@ViewBag.ReturnURL"
                                   id="CancelButton"
                                   key-bind-click="Esc"
                                   key-bind-click-name="Cancel">
                                    <glyph>&#xe091;</glyph>
                                    Cancel
                                </a>
                                @if (!ViewBag.Create)
                                    {
                                    <button class="btn btn-default btn-success pointer"
                                            onclick="$('form').submit();"
                                            id="UpdateButton"
                                            name="UpdateButton"
                                            value="Update"
                                            key-bind-click="Ctrl+U"
                                            key-bind-click-name="Update">
                                        <glyph>&#xe031;</glyph>
                                        Update
                                    </button>
                                    }
                                <a class="btn btn-default btn-success pointer"
                                   onclick="$('form').submit();"
                                   id="SaveButton"
                                   key-bind-click="Ctrl+S"
                                   key-bind-click-name="Save">
                                    <glyph>&#xe173;</glyph>
                                    Save
                                </a>
                            </span>
                            }

                        if (RequiredFields)
                            {
                            <div class="required-fields">
                                * Some fields are required
                            </div>
                                }
                            }
</div>