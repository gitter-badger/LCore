@* Generator: MvcView *@

@using LCore.Extensions;

@{
    var EnumType = Model.Meta.ModelType.IsEnum
        ? Model.Meta.ModelType
        : Model.Meta.ModelType.GetGenericArguments()[0];

    var Values = Enum.GetValues(EnumType);

    IEnumerable<Enum> Enums = Values.List<Enum>();
}

@model IViewField

@if (EnumType.HasAttribute<FlagsAttribute>(true))
    {
    <span class="enum-checks">

        <input name="@Model.Meta.PropertyName" type="hidden" value="" />

        @foreach (var Item in Enums)
            {
            <span class="enum-check">
                <input type="checkbox"
                       id="@(Model.Meta.PropertyName)_@(Item.ToString())"
                       name="@Model.Meta.PropertyName"
                       value="@Item.ToString()"
                       @((Model.PropertyData ?? "").ToString().Contains(Item.ToString())
                             ? Html.Raw("checked=\"true\"")
                             : Html.Raw(""))>
                <label for="@(Model.Meta.PropertyName)_@(Item.ToString())">
                    @Item.GetFriendlyName()
                </label>
            </span>
            }
    </span>
    }
else
    {
    List<SelectListItem> Items = Enums.Convert(Enum => new SelectListItem
        {
        Text = Enum.GetFriendlyName(),
        Value = Enum.ToString(),
        Selected = (Model.PropertyData ?? "").ToString() == Enum.ToString()
        });

    Items.Sort(i => (IComparable) i.Text);

    <select name="@Model.Meta.PropertyName" id="@Model.Meta.PropertyName">
        @foreach (var Item in Items)
            {
            <option value="@Item.Value" selected="@Item.Selected">
                @Item.Text
            </option>
            }
    </select>
/*
@Html.DropDownList(Model.Meta.PropertyName, Items, new { @class = "select-list" })
*/
    }