#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.Design;
    using System.IO;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Mvc.Routing;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using LCore.Extensions;
    using Singularity;
    
    #line 6 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
    using Singularity.Annotations;
    
    #line default
    #line hidden
    using Singularity.Context;
    using Singularity.Controllers;
    using Singularity.Extensions;
    using Singularity.Models;
    
    #line 5 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
    using Singularity.Routes;
    
    #line default
    #line hidden
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/Shared/Manage/Fields/Field.cshtml")]
    public partial class _Views_Shared_Manage_Fields_Field_cshtml : System.Web.Mvc.WebViewPage<IViewField>
    {
        public _Views_Shared_Manage_Fields_Field_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n\r\n\r\n");

WriteLiteral("\r\n");

WriteLiteral("\r\n");

            
            #line 10 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
 try
    {

    if (Model.ViewTypes.Has(ControllerHelper.ViewType.TableCell))
        {
        
            
            #line default
            #line hidden
            
            #line 15 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
   Write(Html.Raw($"<td class=\"{Model.ColumnClass}\">"));

            
            #line default
            #line hidden
            
            #line 15 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
                                                        
        }

    if (Html.ViewExists(PartialViews.Manage.Fields.PropertyName_Before(Model.PropertyName)))
        {
        // Display the Before view, if it exists.
        
            
            #line default
            #line hidden
            
            #line 21 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
   Write(Html.Partial(PartialViews.Manage.Fields.PropertyName_Before(Model.PropertyName), Model));

            
            #line default
            #line hidden
            
            #line 21 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
                                                                                                
        }

    if (Html.ViewExists(PartialViews.Manage.Fields.PropertyType_Before(Model.FieldType)))
        {
        // Display the Before view, if it exists.
        
            
            #line default
            #line hidden
            
            #line 27 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
   Write(Html.Partial(PartialViews.Manage.Fields.PropertyType_Before(Model.FieldType), Model));

            
            #line default
            #line hidden
            
            #line 27 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
                                                                                             
        }

    foreach (var Type in Model.ViewTypes)
        {
        if (Html.ViewExists(PartialViews.Manage.Fields.ViewType_Before(Type)))
            {
            // Display the After view, if it exists.
            
            
            #line default
            #line hidden
            
            #line 35 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
       Write(Html.Partial(PartialViews.Manage.Fields.ViewType_Before(Type), Model));

            
            #line default
            #line hidden
            
            #line 35 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
                                                                                  
            }
        }

    if (Html.ViewExists(PartialViews.Manage.Fields.PropertyName(Model.PropertyName)))
        {
        // Override both View and Edit views for the property.
        
            
            #line default
            #line hidden
            
            #line 42 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
   Write(Html.Partial(PartialViews.Manage.Fields.PropertyName(Model.PropertyName), Model));

            
            #line default
            #line hidden
            
            #line 42 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
                                                                                         
        }
    else
        {
        bool OverridenView = false;

        foreach (var Type in Model.ViewTypes)
            {
            // Change this field override. It doesnt make sense.

            if (Html.ViewExists($"Fields/{Model.FieldType.Name}_{Type}"))
                {
                // Display the custom Type view
                
            
            #line default
            #line hidden
            
            #line 55 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
           Write(Html.Partial($"Fields/{Model.FieldType.Name}_{Type}"));

            
            #line default
            #line hidden
            
            #line 55 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
                                                                      
                OverridenView = true;
                }
            }

        List<IFieldPartial> PartialAttributes = Model.Meta.GetAttributes<IFieldPartial>() ?? new List<IFieldPartial>();

        foreach (var FieldBefore in PartialAttributes)
            {
            if (FieldBefore.IsActive(Html, Model, Model.ViewTypes))
                {
                FieldBefore.RenderPartial_Before(Html, Model, Model.ViewTypes);
                }
            }

        if (OverridenView)
            {
            }
        else if (Model.ViewTypes.HasAny(ControllerHelper.ViewType.Display, ControllerHelper.ViewType.TableCell) ||
            Model.Meta.IsReadOnly)
            {
            
            
            #line default
            #line hidden
            
            #line 76 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
       Write(Html.Partial(PartialViews.Manage.Fields.View.FieldView, Model));

            
            #line default
            #line hidden
            
            #line 76 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
                                                                           
            }
        else if (Model.ViewTypes.HasAny(ControllerHelper.ViewType.Edit, ControllerHelper.ViewType.Create))
            {
            
            
            #line default
            #line hidden
            
            #line 80 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
       Write(Html.Partial(PartialViews.Manage.Fields.Edit.FieldEdit, Model));

            
            #line default
            #line hidden
            
            #line 80 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
                                                                           
            }

        PartialAttributes.Reverse();

        foreach (var FieldAfter in PartialAttributes)
            {
            if (FieldAfter.IsActive(Html, Model, Model.ViewTypes))
                {
                FieldAfter.RenderPartial_After(Html, Model, Model.ViewTypes);
                }
            }
        }

    if (Html.ViewExists(PartialViews.Manage.Fields.PropertyType_After(Model.FieldType)))
        {
        // Display the Before view, if it exists.
        
            
            #line default
            #line hidden
            
            #line 97 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
   Write(Html.Partial(PartialViews.Manage.Fields.PropertyType_After(Model.FieldType), Model));

            
            #line default
            #line hidden
            
            #line 97 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
                                                                                            
        }

    foreach (var Type in Model.ViewTypes)
        {
        if (Html.ViewExists(PartialViews.Manage.Fields.ViewType_After(Type)))
            {
            // Display the After view, if it exists.
            
            
            #line default
            #line hidden
            
            #line 105 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
       Write(Html.Partial(PartialViews.Manage.Fields.ViewType_After(Type), Model));

            
            #line default
            #line hidden
            
            #line 105 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
                                                                                 
            }
        }

    if (Html.ViewExists(PartialViews.Manage.Fields.PropertyName_After(Model.PropertyName)))
        {
        // Display the After view, if it exists.
        
            
            #line default
            #line hidden
            
            #line 112 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
   Write(Html.Partial(PartialViews.Manage.Fields.PropertyName_After(Model.PropertyName), Model));

            
            #line default
            #line hidden
            
            #line 112 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
                                                                                               
        }

    if (Model.ViewTypes.Has(ControllerHelper.ViewType.TableCell))
        {
        
            
            #line default
            #line hidden
            
            #line 117 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
   Write(Html.Raw("</td>"));

            
            #line default
            #line hidden
            
            #line 117 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
                          
        }
    }
catch (Exception Ex)
    {
    ControllerHelper.HandleError(Context, Ex);

    if (Model.ViewTypes.Has(ControllerHelper.ViewType.TableCell))
        {
        
            
            #line default
            #line hidden
            
            #line 126 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
   Write(Html.Raw("<td>"));

            
            #line default
            #line hidden
            
            #line 126 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
                         
        }

        
            
            #line default
            #line hidden
            
            #line 129 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
   Write(Html.Partial(PartialViews.Manage.Fields.Error, Ex));

            
            #line default
            #line hidden
            
            #line 129 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
                                                           

    if (Model.ViewTypes.Has(ControllerHelper.ViewType.TableCell))
        {
        
            
            #line default
            #line hidden
            
            #line 133 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
   Write(Html.Raw("</td>"));

            
            #line default
            #line hidden
            
            #line 133 "..\..\Views\Shared\Manage\Fields\Field.cshtml"
                          
        }
    }

            
            #line default
            #line hidden
        }
    }
}
#pragma warning restore 1591
