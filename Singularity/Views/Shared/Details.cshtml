@* Generator: MvcView *@

@using LCore;
@using Singularity;
@using Singularity.Models;
@using Singularity.Controllers;
@using Singularity.Context;
@using Singularity.Routes;
@using Singularity.Extensions;
@using Singularity.Annotations;
@using System.Linq;
@using System.Linq.Expressions;
@using System.Collections;
@using System.Collections.Generic;
@using System.ComponentModel;
@using System.ComponentModel.DataAnnotations;
@using System.ComponentModel.DataAnnotations.Schema;
@using System.ComponentModel.Design;
@using System.Web;
@using System.Web.Mvc;

@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";

    ControllerHelper.ViewType ViewType = ControllerHelper.ViewType.Display;

    IEnumerable<ModelMetadata> Fields = null;

    if (Model is IFieldGroups)
        {
        Fields = ((IFieldGroups)Model).GetFieldGroup(Context, ViewType);
        }
    else
        {
        Fields = FieldGroups.GetFieldGroup(Context, Model.TrueModelType(), ViewType);
        }
}

@model IModel

<div class="details wide-form">

    @if (!String.IsNullOrEmpty(ViewBag.ReturnURL))
        {
        if (ViewContext.AllowEdit(Model.TrueModelType()))
            {
            <a class="btn-default right"
               href="@(Url.Controller<ManageController>().Action(c => c.Edit, Model.GetID<int>(), Request.Url.AbsoluteUri, false))">
                <glyph>&#xe065;</glyph>
                Edit
            </a>
            }

            <a class="btn-default right" href="@ViewBag.ReturnURL">
                <glyph>&#xe091;</glyph>
                Back
            </a>
        }

    <h1>
        @Model.GetFriendlyTypeName() Details
    </h1>

    <h2>
        @Model.ToString()
    </h2>

    @foreach (ModelMetadata Meta in Fields)
        {
        String ColumnClass = Meta.PropertyName.ToUrlSlug();

        ViewField Field = new ViewField(ViewContext, Model.TrueModelType(), Meta.PropertyName, Model, ViewType);

        @Html.ViewField(Field)
        }

    @if (!String.IsNullOrEmpty(ViewBag.ReturnURL))
        {
        if (ViewContext.AllowEdit(Model.TrueModelType()))
            {
            <a class="btn-default right" 
               href="@(Url.Controller<ManageController>().Action(c => c.Edit, Model.GetID<int>(), Request.Url.AbsoluteUri, false))"
               key-bind-click="Ctrl+E"
               key-bind-click-name="Edit">
                <glyph>&#xe065;</glyph>
                Edit
            </a>
            }

            <a class="btn-default right"
               href="@ViewBag.ReturnURL"
               key-bind-click="Esc"
               key-bind-click-name="Back">
                <glyph>&#xe091;</glyph>
                Back
            </a>
        }
</div>