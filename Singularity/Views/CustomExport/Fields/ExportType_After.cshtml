@* Generator: MvcView *@


@using LCore.Extensions;
@using Singularity.Extensions;

@{
    var Export = (CustomExport)Model.ModelData;

    Type ModelExportType = null;

    if (Export.ExportType != null)
        {
        try
            {
            ModelExportType = L.Ref.FindType(Export.ExportType);
            }
        catch
            {

            }
        }

    var BasedMeta = new Dictionary<string, List<ModelMetadata>>();

    Dictionary<string, ModelMetadata> AllMeta = ModelExportType == null ?
        new Dictionary<string, ModelMetadata>() :
        ModelExportType.GetMeta();

    AllMeta.Keys.Each(k =>
    {
        string BaseKey = "";

        if (k.Contains("."))
            {
            BaseKey = k.Substring(0, k.LastIndexOf('.'));
            }

        if (!BasedMeta.ContainsKey(BaseKey))
            {
            BasedMeta[BaseKey] = new List<ModelMetadata>();
            }

        BasedMeta[BaseKey].Add(AllMeta[k]);
    });
}

@model IViewField

@if (!Model.ViewTypes.HasAny(ControllerHelper.ViewType.TableCell))
    {
    if (ModelExportType != null)
        {
        <div class="field-list-add" target="#Fields" position="end">
            <h3>@Html.TextContent("Singularity_CustomExport_Fields", "Fields")</h3>

            @foreach (string BaseKey in BasedMeta.Keys)
                {
                <span class="btn-info btn left method-show-hide" click-fade-toggle=".field-group-@BaseKey.ReplaceAll(".", "")">
                    <glyph class="field-group-@BaseKey.ReplaceAll(".", "")">&#x2b;</glyph>
                    <glyph class="field-group-@BaseKey.ReplaceAll(".", "")" style=" display: none;">&#x2212;</glyph>
                </span>

                if (string.IsNullOrEmpty(BaseKey))
                    {
                    <h4>@ModelExportType.GetFriendlyTypeName()</h4>
                    continue;
                    }
                <h4>@BaseKey.ReplaceAll(".", " ")</h4>

                if (BasedMeta.ContainsKey(BaseKey))
                    {
                    <div class="field-group-@BaseKey.ReplaceAll(".", "")" style="display:none;">
                        @foreach (var Meta in BasedMeta[BaseKey])
                            {
                            string Key = Meta.PropertyName;

                            if (!string.IsNullOrEmpty(BaseKey))
                                {
                                Key = $"{BaseKey}.{Key}";
                                }

                            <div class="field-list-row" data-field-name="@Key" title="@Key">
                                <div class="add-button">
                                    <glyph>&#x2b;</glyph>
                                </div>
                                <div class="field-name">
                                    @Meta.GetDisplayName().Humanize()
                                </div>
                            </div>
                            }
                    </div>
                    }
                }
        </div>
        }
    }