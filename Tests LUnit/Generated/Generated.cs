/*
Covering Assembly: LUnit

Cover application using naming conventions.

LUnit has Autogenerated 8 Classes and 125 Methods:
*/
using LCore.LUnit;
using LCore.LUnit.Assert;
using LCore.LUnit.Fluent;
using Xunit;
using Xunit.Abstractions;

namespace LUnit_Tests.LCore.LUnit
    {
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester))]
    public partial class AssemblyTesterTester : XUnitOutputTester
        {
        public AssemblyTesterTester(ITestOutputHelper Output) : base(Output) { }

        ~AssemblyTesterTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.AssemblyStatus))]
        public void AssemblyStatus()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.AssemblyStatus
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.AssemblyMissingCoverage))]
        public void AssemblyMissingCoverage()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.AssemblyMissingCoverage
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.TestFailure01))]
        public void TestFailure01()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure01
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.TestFailure02))]
        public void TestFailure02()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure02
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.TestFailure03))]
        public void TestFailure03()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure03
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.TestFailure04))]
        public void TestFailure04()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure04
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.TestFailure05))]
        public void TestFailure05()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure05
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.TestFailure06))]
        public void TestFailure06()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure06
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.TestFailure07))]
        public void TestFailure07()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure07
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.TestFailure08))]
        public void TestFailure08()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure08
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.TestFailure09))]
        public void TestFailure09()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure09
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.TestFailure10))]
        public void TestFailure10()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure10
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(MultiTestReporter))]
    public partial class MultiTestReporterTester : XUnitOutputTester
        {
        public MultiTestReporterTester(ITestOutputHelper Output) : base(Output) { }

        ~MultiTestReporterTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(MultiTestReporter) + "." + nameof(MultiTestReporter.TestFailure01))]
        public void TestFailure01()
            {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure01
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(MultiTestReporter) + "." + nameof(MultiTestReporter.TestFailure02))]
        public void TestFailure02()
            {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure02
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(MultiTestReporter) + "." + nameof(MultiTestReporter.TestFailure03))]
        public void TestFailure03()
            {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure03
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(MultiTestReporter) + "." + nameof(MultiTestReporter.TestFailure04))]
        public void TestFailure04()
            {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure04
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(MultiTestReporter) + "." + nameof(MultiTestReporter.TestFailure05))]
        public void TestFailure05()
            {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure05
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(MultiTestReporter) + "." + nameof(MultiTestReporter.TestFailure06))]
        public void TestFailure06()
            {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure06
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(MultiTestReporter) + "." + nameof(MultiTestReporter.TestFailure07))]
        public void TestFailure07()
            {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure07
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(MultiTestReporter) + "." + nameof(MultiTestReporter.TestFailure08))]
        public void TestFailure08()
            {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure08
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(MultiTestReporter) + "." + nameof(MultiTestReporter.TestFailure09))]
        public void TestFailure09()
            {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure09
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(MultiTestReporter) + "." + nameof(MultiTestReporter.TestFailure10))]
        public void TestFailure10()
            {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure10
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestAttribute))]
    public partial class TestAttributeTester : XUnitOutputTester
        {
        public TestAttributeTester(ITestOutputHelper Output) : base(Output) { }

        ~TestAttributeTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestAttribute) + "." + nameof(TestAttribute.RunTest))]
        public void RunTest()
            {
            // TODO: Implement method test LCore.LUnit.TestAttribute.RunTest
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestAttribute) + "." + nameof(TestAttribute.GenericTypes))]
        public void get_GenericTypes()
            {
            // TODO: Implement method test LCore.LUnit.TestAttribute.get_GenericTypes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestAttribute) + "." + nameof(TestAttribute.GenericTypes))]
        public void set_GenericTypes()
            {
            // TODO: Implement method test LCore.LUnit.TestAttribute.set_GenericTypes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestAttribute) + "." + nameof(TestAttribute.GenericTypes))]
        public void GenericTypes()
            {
            // TODO: Implement method test LCore.LUnit.TestAttribute.GenericTypes
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.LUnit))]
    public partial class LUnitTester : XUnitOutputTester
        {
        public LUnitTester(ITestOutputHelper Output) : base(Output) { }

        ~LUnitTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.LUnit) + "." + nameof(global::LCore.LUnit.LUnit.FixParameterTypes))]
        public void FixParameterTypes()
            {
            // TODO: Implement method test LCore.LUnit.LUnit.FixParameterTypes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.LUnit) + "." + nameof(global::LCore.LUnit.LUnit.FixObject))]
        public void FixObject()
            {
            // TODO: Implement method test LCore.LUnit.LUnit.FixObject
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.LUnit) + "." + nameof(global::LCore.LUnit.LUnit.GetMethodDelegate))]
        public void GetMethodDelegate()
            {
            // TODO: Implement method test LCore.LUnit.LUnit.GetMethodDelegate
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.LUnit) + "." + nameof(global::LCore.LUnit.LUnit.GetCheckMethod))]
        public void GetCheckMethod()
            {
            // TODO: Implement method test LCore.LUnit.LUnit.GetCheckMethod
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.LUnit) + "." + nameof(global::LCore.LUnit.LUnit.GetCheckMethodArg))]
        public void GetCheckMethodArg()
            {
            // TODO: Implement method test LCore.LUnit.LUnit.GetCheckMethodArg
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestExt))]
    public partial class TestExtTester : XUnitOutputTester
        {
        public TestExtTester(ITestOutputHelper Output) : base(Output) { }

        ~TestExtTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestExt) + "." + nameof(TestExt.GetTestMembers))]
        public void GetTestMembers()
            {
            // TODO: Implement method test LCore.LUnit.TestExt.GetTestMembers
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestExt) + "." + nameof(TestExt.RunTest))]
        public void RunTest_ITestResultAttribute_MethodInfo()
            {
            // TODO: Implement method test LCore.LUnit.TestExt.RunTest
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestExt) + "." + nameof(TestExt.RunTest))]
        public void RunTest_ITestFailsAttribute_MethodInfo()
            {
            // TODO: Implement method test LCore.LUnit.TestExt.RunTest
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestExt) + "." + nameof(TestExt.RunTest))]
        public void RunTest_ITestSucceedsAttribute_MethodInfo()
            {
            // TODO: Implement method test LCore.LUnit.TestExt.RunTest
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestExt) + "." + nameof(TestExt.RunTest))]
        public void RunTest_ITestSourceAttribute_MethodInfo()
            {
            // TODO: Implement method test LCore.LUnit.TestExt.RunTest
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestExt) + "." + nameof(TestExt.RunTest))]
        public void RunTest_IValidateAttribute_MemberInfo()
            {
            // TODO: Implement method test LCore.LUnit.TestExt.RunTest
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestExt) + "." + nameof(TestExt.GetTestData))]
        public void GetTestData()
            {
            // TODO: Implement method test LCore.LUnit.TestExt.GetTestData
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestExt) + "." + nameof(TestExt.GetTargetingName))]
        public void GetTargetingName()
            {
            // TODO: Implement method test LCore.LUnit.TestExt.GetTargetingName
            }

        }
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TypeTests))]
    public partial class TypeTestsTester : XUnitOutputTester
        {
        public TypeTestsTester(ITestOutputHelper Output) : base(Output) { }

        ~TypeTestsTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TypeTests) + "." + nameof(TypeTests.TestAttributes))]
        public void get_TestAttributes()
            {
            // TODO: Implement method test LCore.LUnit.TypeTests.get_TestAttributes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TypeTests) + "." + nameof(TypeTests.CoveragePercent))]
        public void get_CoveragePercent()
            {
            // TODO: Implement method test LCore.LUnit.TypeTests.get_CoveragePercent
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TypeTests) + "." + nameof(TypeTests.TestsPresent))]
        public void get_TestsPresent()
            {
            // TODO: Implement method test LCore.LUnit.TypeTests.get_TestsPresent
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TypeTests) + "." + nameof(TypeTests.UnitTestCount))]
        public void get_UnitTestCount()
            {
            // TODO: Implement method test LCore.LUnit.TypeTests.get_UnitTestCount
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TypeTests) + "." + nameof(TypeTests.TestsMissing))]
        public void get_TestsMissing()
            {
            // TODO: Implement method test LCore.LUnit.TypeTests.get_TestsMissing
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TypeTests) + "." + nameof(TypeTests.MembersPresent))]
        public void get_MembersPresent()
            {
            // TODO: Implement method test LCore.LUnit.TypeTests.get_MembersPresent
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TypeTests) + "." + nameof(TypeTests.TestAttributes))]
        public void TestAttributes()
            {
            // TODO: Implement method test LCore.LUnit.TypeTests.TestAttributes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TypeTests) + "." + nameof(TypeTests.CoveragePercent))]
        public void CoveragePercent()
            {
            // TODO: Implement method test LCore.LUnit.TypeTests.CoveragePercent
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TypeTests) + "." + nameof(TypeTests.TestsPresent))]
        public void TestsPresent()
            {
            // TODO: Implement method test LCore.LUnit.TypeTests.TestsPresent
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TypeTests) + "." + nameof(TypeTests.UnitTestCount))]
        public void UnitTestCount()
            {
            // TODO: Implement method test LCore.LUnit.TypeTests.UnitTestCount
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TypeTests) + "." + nameof(TypeTests.TestsMissing))]
        public void TestsMissing()
            {
            // TODO: Implement method test LCore.LUnit.TypeTests.TestsMissing
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TypeTests) + "." + nameof(TypeTests.MembersPresent))]
        public void MembersPresent()
            {
            // TODO: Implement method test LCore.LUnit.TypeTests.MembersPresent
            }

        }
    }

namespace LUnit_Tests.LCore.LUnit.Assert
    {
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt))]
    public partial class AssertionExtTester : XUnitOutputTester
        {
        public AssertionExtTester(ITestOutputHelper Output) : base(Output) { }

        ~AssertionExtTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes))]
        public void AssertSucceedes_MethodInfo_Object_ObjectArray()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes))]
        public void AssertSucceedes_MethodInfo_Object_ObjectArray_Func_1Array()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes))]
        public void AssertSucceedes_MethodInfo_Object_ObjectArray_Func_2Array()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes))]
        public void AssertSucceedes_Action()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes))]
        public void AssertSucceedes_Action_1_T1()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes))]
        public void AssertSucceedes_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes))]
        public void AssertSucceedes_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes))]
        public void AssertSucceedes_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes))]
        public void AssertSucceedes_Func_1()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes))]
        public void AssertSucceedes_Func_2_T1()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes))]
        public void AssertSucceedes_Func_3_T1_T2()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes))]
        public void AssertSucceedes_Func_4_T1_T2_T3()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes))]
        public void AssertSucceedes_Func_5_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails))]
        public void AssertFails_MethodInfo_ObjectArray_Object_Func_1Array()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails))]
        public void AssertFails_MethodInfo_ObjectArray_Object_Type_Func_1Array()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails))]
        public void AssertFails_Action()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails))]
        public void AssertFails_Action_1_T1()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails))]
        public void AssertFails_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails))]
        public void AssertFails_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails))]
        public void AssertFails_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails))]
        public void AssertFails_Func_1()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails))]
        public void AssertFails_Func_2_T1()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails))]
        public void AssertFails_Func_3_T1_T2()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails))]
        public void AssertFails_Func_4_T1_T2_T3()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails))]
        public void AssertFails_Func_5_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertResult))]
        public void AssertResult_MethodInfo_Object_ObjectArray_Object_Func_2Array()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertResult))]
        public void AssertResult_MethodInfo_Object_ObjectArray_U_Func_2Array()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertResult))]
        public void AssertResult_Func_1_U()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertResult))]
        public void AssertResult_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertResult))]
        public void AssertResult_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertResult))]
        public void AssertResult_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertResult))]
        public void AssertResult_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSource))]
        public void AssertSource_MethodInfo_Object_ObjectArray_Object_Func_2Array()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSource
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSource))]
        public void AssertSource_MethodInfo_Object_ObjectArray_U_Func_2Array()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSource
            }

        }
    }

namespace LUnit_Tests.LCore.LUnit.Fluent
    {
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt))]
    public partial class FluentExtTester : XUnitOutputTester
        {
        public FluentExtTester(ITestOutputHelper Output) : base(Output) { }

        ~FluentExtTester() { }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed))]
        public void ShouldSucceed_MethodInfo_Object_ObjectArray()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed))]
        public void ShouldSucceed_MethodInfo_Object_ObjectArray_Func_1Array()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed))]
        public void ShouldSucceed_MethodInfo_Object_ObjectArray_Func_2Array()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed))]
        public void ShouldSucceed_Action()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed))]
        public void ShouldSucceed_Action_1_T1()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed))]
        public void ShouldSucceed_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed))]
        public void ShouldSucceed_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed))]
        public void ShouldSucceed_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed))]
        public void ShouldSucceed_Func_1()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed))]
        public void ShouldSucceed_Func_2_T1()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed))]
        public void ShouldSucceed_Func_3_T1_T2()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed))]
        public void ShouldSucceed_Func_4_T1_T2_T3()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed))]
        public void ShouldSucceed_Func_5_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail))]
        public void ShouldFail_MethodInfo_ObjectArray_Object_Func_1Array()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail))]
        public void ShouldFail_MethodInfo_ObjectArray_Object_Type_Func_1Array()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail))]
        public void ShouldFail_Action()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail))]
        public void ShouldFail_Action_1_T1()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail))]
        public void ShouldFail_Action_2_T1_T2()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail))]
        public void ShouldFail_Action_3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail))]
        public void ShouldFail_Action_4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail))]
        public void ShouldFail_Func_1()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail))]
        public void ShouldFail_Func_2_T1()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail))]
        public void ShouldFail_Func_3_T1_T2()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail))]
        public void ShouldFail_Func_4_T1_T2_T3()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail))]
        public void ShouldFail_Func_5_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldBe))]
        public void ShouldBe_MethodInfo_Object_ObjectArray_Object_Func_2Array()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldBe))]
        public void ShouldBe_MethodInfo_Object_ObjectArray_U_Func_2Array()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldBe))]
        public void ShouldBe_Func_1_U()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldBe))]
        public void ShouldBe_Func_2_T1_U()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldBe))]
        public void ShouldBe_Func_3_T1_T2_U()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldBe))]
        public void ShouldBe_Func_4_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldBe))]
        public void ShouldBe_Func_5_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.HaveAttribute))]
        public void HaveAttribute_TypeAssertions_String_ObjectArray_AndConstraint_1()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.HaveAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.HaveAttribute))]
        public void HaveAttribute_TypeAssertions_Boolean_String_ObjectArray_AndConstraint_1()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.HaveAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.NotHaveAttribute))]
        public void NotHaveAttribute_TypeAssertions_String_ObjectArray_AndConstraint_1()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.NotHaveAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.NotHaveAttribute))]
        public void NotHaveAttribute_TypeAssertions_Boolean_String_ObjectArray_AndConstraint_1()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.NotHaveAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldBeTrue))]
        public void ShouldBeTrue()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBeTrue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldBeFalse))]
        public void ShouldBeFalse()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBeFalse
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldBeNull))]
        public void ShouldBeNull_T_String_ObjectArray_AndConstraint_1()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBeNull
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldBeNull))]
        public void ShouldBeNull_Nullable_1_String_ObjectArray_AndConstraint_1()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBeNull
            }

        }
    }
