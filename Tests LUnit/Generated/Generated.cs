/*
Covering Assembly: LUnit

Cover application using naming conventions.

LUnit has Autogenerated 7 Classes and 110 Methods:
*/

using LCore.LUnit;
using LCore.LUnit.Assert;
using LCore.LUnit.Fluent;
using System;
using Xunit;
using Xunit.Abstractions;

namespace LUnit_Tests.LCore.LUnit
    {
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester))]
    public partial class AssemblyTesterTester : XUnitOutputTester, IDisposable
        {
        public AssemblyTesterTester(ITestOutputHelper Output) : base(Output) {}

        public void Dispose() {}

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.AssemblyStatus) + "()")]
        public void AssemblyStatus()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.AssemblyStatus
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.AssemblyMissingCoverage) + "()")]
        public void AssemblyMissingCoverage()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.AssemblyMissingCoverage
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.TestFailure01) + "()")]
        public void TestFailure01()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure01
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.TestFailure02) + "()")]
        public void TestFailure02()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure02
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.TestFailure03) + "()")]
        public void TestFailure03()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure03
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.TestFailure04) + "()")]
        public void TestFailure04()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure04
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.TestFailure05) + "()")]
        public void TestFailure05()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure05
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.TestFailure06) + "()")]
        public void TestFailure06()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure06
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.TestFailure07) + "()")]
        public void TestFailure07()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure07
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.TestFailure08) + "()")]
        public void TestFailure08()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure08
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.TestFailure09) + "()")]
        public void TestFailure09()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure09
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(AssemblyTester) + "." + nameof(AssemblyTester.TestFailure10) + "()")]
        public void TestFailure10()
            {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure10
            }
        }

    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(MultiTestReporter))]
    public partial class MultiTestReporterTester : XUnitOutputTester, IDisposable
        {
        public MultiTestReporterTester(ITestOutputHelper Output) : base(Output) {}

        public void Dispose() {}

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(MultiTestReporter) + "." + nameof(MultiTestReporter.TestFailure01) + "()")]
        public void TestFailure01()
            {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure01
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(MultiTestReporter) + "." + nameof(MultiTestReporter.TestFailure02) + "()")]
        public void TestFailure02()
            {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure02
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(MultiTestReporter) + "." + nameof(MultiTestReporter.TestFailure03) + "()")]
        public void TestFailure03()
            {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure03
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(MultiTestReporter) + "." + nameof(MultiTestReporter.TestFailure04) + "()")]
        public void TestFailure04()
            {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure04
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(MultiTestReporter) + "." + nameof(MultiTestReporter.TestFailure05) + "()")]
        public void TestFailure05()
            {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure05
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(MultiTestReporter) + "." + nameof(MultiTestReporter.TestFailure06) + "()")]
        public void TestFailure06()
            {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure06
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(MultiTestReporter) + "." + nameof(MultiTestReporter.TestFailure07) + "()")]
        public void TestFailure07()
            {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure07
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(MultiTestReporter) + "." + nameof(MultiTestReporter.TestFailure08) + "()")]
        public void TestFailure08()
            {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure08
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(MultiTestReporter) + "." + nameof(MultiTestReporter.TestFailure09) + "()")]
        public void TestFailure09()
            {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure09
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(MultiTestReporter) + "." + nameof(MultiTestReporter.TestFailure10) + "()")]
        public void TestFailure10()
            {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure10
            }
        }

    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestAttribute))]
    public partial class TestAttributeTester : XUnitOutputTester, IDisposable
        {
        public TestAttributeTester(ITestOutputHelper Output) : base(Output) {}

        public void Dispose() {}

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestAttribute) + "." + nameof(TestAttribute.RunTest) + "(MethodInfo)")]
        public void RunTest()
            {
            // TODO: Implement method test LCore.LUnit.TestAttribute.RunTest
            }
        }

    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.LUnit))]
    public partial class LUnitTester : XUnitOutputTester, IDisposable
        {
        public LUnitTester(ITestOutputHelper Output) : base(Output) {}

        public void Dispose() {}

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.LUnit) + "." + nameof(global::LCore.LUnit.LUnit.FixParameterTypes) + "(MethodInfo, Object[])")]
        public void FixParameterTypes()
            {
            // TODO: Implement method test LCore.LUnit.LUnit.FixParameterTypes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.LUnit) + "." + nameof(global::LCore.LUnit.LUnit.FixObject) + "(MethodInfo, Type, Object&)")]
        public void FixObject()
            {
            // TODO: Implement method test LCore.LUnit.LUnit.FixObject
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.LUnit) + "." + nameof(global::LCore.LUnit.LUnit.GetMethodDelegate) + "(MethodInfo, Type, String) => Object")]
        public void GetMethodDelegate()
            {
            // TODO: Implement method test LCore.LUnit.LUnit.GetMethodDelegate
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.LUnit) + "." + nameof(global::LCore.LUnit.LUnit.GetCheckMethod) + "(MethodInfo, String) => Func`1<Boolean>")]
        public void GetCheckMethod()
            {
            // TODO: Implement method test LCore.LUnit.LUnit.GetCheckMethod
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.LUnit) + "." + nameof(global::LCore.LUnit.LUnit.GetCheckMethodArg) + "(MethodInfo, String) => Func`2<Object, Boolean>")]
        public void GetCheckMethodArg()
            {
            // TODO: Implement method test LCore.LUnit.LUnit.GetCheckMethodArg
            }
        }

    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestExt))]
    public partial class TestExtTester : XUnitOutputTester, IDisposable
        {
        public TestExtTester(ITestOutputHelper Output) : base(Output) {}

        public void Dispose() {}

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestExt) + "." + nameof(TestExt.GetTestMembers) + "(Type) => Dictionary`2<MemberInfo, List`1<ILUnitAttribute>>")]
        public void GetTestMembers()
            {
            // TODO: Implement method test LCore.LUnit.TestExt.GetTestMembers
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestExt) + "." + nameof(TestExt.RunTest) + "(ITestResultAttribute, MethodInfo)")]
        public void RunTest_ITestResultAttribute_MethodInfo()
            {
            // TODO: Implement method test LCore.LUnit.TestExt.RunTest
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestExt) + "." + nameof(TestExt.RunTest) + "(ITestFailsAttribute, MethodInfo)")]
        public void RunTest_ITestFailsAttribute_MethodInfo()
            {
            // TODO: Implement method test LCore.LUnit.TestExt.RunTest
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestExt) + "." + nameof(TestExt.RunTest) + "(ITestSucceedsAttribute, MethodInfo)")]
        public void RunTest_ITestSucceedsAttribute_MethodInfo()
            {
            // TODO: Implement method test LCore.LUnit.TestExt.RunTest
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestExt) + "." + nameof(TestExt.RunTest) + "(ITestSourceAttribute, MethodInfo)")]
        public void RunTest_ITestSourceAttribute_MethodInfo()
            {
            // TODO: Implement method test LCore.LUnit.TestExt.RunTest
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestExt) + "." + nameof(TestExt.RunTest) + "(IValidateAttribute, MemberInfo)")]
        public void RunTest_IValidateAttribute_MemberInfo()
            {
            // TODO: Implement method test LCore.LUnit.TestExt.RunTest
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestExt) + "." + nameof(TestExt.GetTestData) + "(Type) => TypeTests")]
        public void GetTestData()
            {
            // TODO: Implement method test LCore.LUnit.TestExt.GetTestData
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(TestExt) + "." + nameof(TestExt.GetTargetingName) + "(MemberInfo, String, String, String) => Tuple`3<String, String, String>")]
        public void GetTargetingName()
            {
            // TODO: Implement method test LCore.LUnit.TestExt.GetTargetingName
            }
        }
    }

namespace LUnit_Tests.LCore.LUnit.Assert
    {
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt))]
    public partial class AssertionExtTester : XUnitOutputTester, IDisposable
        {
        public AssertionExtTester(ITestOutputHelper Output) : base(Output) {}

        public void Dispose() {}

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes) + "(MethodInfo, Object, Object[])")]
        public void AssertSucceedes_MethodInfo_Object_Object()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes) + "(MethodInfo, Object, Object[], Func`1[])")]
        public void AssertSucceedes_MethodInfo_Object_Object_Func_1()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes) + "(MethodInfo, Object, Object[], Func`2[])")]
        public void AssertSucceedes_MethodInfo_Object_Object_Func_2()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes) + "(Action)")]
        public void AssertSucceedes_Action()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes) + "(Action`1<T1>, T1)")]
        public void AssertSucceedes_Action_1_T1_T1()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes) + "(Action`2<T1, T2>, T1, T2)")]
        public void AssertSucceedes_Action_2_T1_T2_T1_T2()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes) + "(Action`3<T1, T2, T3>, T1, T2, T3)")]
        public void AssertSucceedes_Action_3_T1_T2_T3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes) + "(Action`4<T1, T2, T3, T4>, T1, T2, T3, T4)")]
        public void AssertSucceedes_Action_4_T1_T2_T3_T4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes) + "(Func`1<U>)")]
        public void AssertSucceedes_Func_1_U()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes) + "(Func`2<T1, U>, T1)")]
        public void AssertSucceedes_Func_2_T1_U_T1()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes) + "(Func`3<T1, T2, U>, T1, T2)")]
        public void AssertSucceedes_Func_3_T1_T2_U_T1_T2()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes) + "(Func`4<T1, T2, T3, U>, T1, T2, T3)")]
        public void AssertSucceedes_Func_4_T1_T2_T3_U_T1_T2_T3()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSucceedes) + "(Func`5<T1, T2, T3, T4, U>, T1, T2, T3, T4)")]
        public void AssertSucceedes_Func_5_T1_T2_T3_T4_U_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails) + "(MethodInfo, Object[], Object, Func`1[])")]
        public void AssertFails_MethodInfo_Object_Object_Func_1()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails) + "(MethodInfo, Object[], Object, Type, Func`1[])")]
        public void AssertFails_MethodInfo_Object_Object_Type_Func_1()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails) + "(Action)")]
        public void AssertFails_Action()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails) + "(Action`1<T1>, T1)")]
        public void AssertFails_Action_1_T1_T1()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails) + "(Action`2<T1, T2>, T1, T2)")]
        public void AssertFails_Action_2_T1_T2_T1_T2()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails) + "(Action`3<T1, T2, T3>, T1, T2, T3)")]
        public void AssertFails_Action_3_T1_T2_T3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails) + "(Action`4<T1, T2, T3, T4>, T1, T2, T3, T4)")]
        public void AssertFails_Action_4_T1_T2_T3_T4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails) + "(Func`1<U>)")]
        public void AssertFails_Func_1_U()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails) + "(Func`2<T1, U>, T1)")]
        public void AssertFails_Func_2_T1_U_T1()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails) + "(Func`3<T1, T2, U>, T1, T2)")]
        public void AssertFails_Func_3_T1_T2_U_T1_T2()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails) + "(Func`4<T1, T2, T3, U>, T1, T2, T3)")]
        public void AssertFails_Func_4_T1_T2_T3_U_T1_T2_T3()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertFails) + "(Func`5<T1, T2, T3, T4, U>, T1, T2, T3, T4)")]
        public void AssertFails_Func_5_T1_T2_T3_T4_U_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertResult) + "(MethodInfo, Object, Object[], Object, Func`2[])")]
        public void AssertResult_MethodInfo_Object_Object_Object_Func_2()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertResult) + "(MethodInfo, Object, Object[], U, Func`2[])")]
        public void AssertResult_MethodInfo_Object_Object_U_Func_2()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertResult) + "(Func`1<U>, U)")]
        public void AssertResult_Func_1_U_U()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertResult) + "(Func`2<T1, U>, T1, U)")]
        public void AssertResult_Func_2_T1_U_T1_U()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertResult) + "(Func`3<T1, T2, U>, T1, T2, U)")]
        public void AssertResult_Func_3_T1_T2_U_T1_T2_U()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertResult) + "(Func`4<T1, T2, T3, U>, T1, T2, T3, U)")]
        public void AssertResult_Func_4_T1_T2_T3_U_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertResult) + "(Func`5<T1, T2, T3, T4, U>, T1, T2, T3, T4, U)")]
        public void AssertResult_Func_5_T1_T2_T3_T4_U_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertResult
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSource) + "(MethodInfo, Object, Object[], Object, Func`2[])")]
        public void AssertSource_MethodInfo_Object_Object_Object_Func_2()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSource
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Assert) + "." + nameof(AssertionExt) + "." + nameof(AssertionExt.AssertSource) + "(MethodInfo, Object, Object[], U, Func`2[])")]
        public void AssertSource_MethodInfo_Object_Object_U_Func_2()
            {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSource
            }
        }
    }

namespace LUnit_Tests.LCore.LUnit.Fluent
    {
    [Trait(Traits.TargetClass, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt))]
    public partial class FluentExtTester : XUnitOutputTester, IDisposable
        {
        public FluentExtTester(ITestOutputHelper Output) : base(Output) {}

        public void Dispose() {}

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed) + "(MethodInfo, Object, Object[])")]
        public void ShouldSucceed_MethodInfo_Object_Object()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed) + "(MethodInfo, Object, Object[], Func`1[])")]
        public void ShouldSucceed_MethodInfo_Object_Object_Func_1()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed) + "(MethodInfo, Object, Object[], Func`2[])")]
        public void ShouldSucceed_MethodInfo_Object_Object_Func_2()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed) + "(Action)")]
        public void ShouldSucceed_Action()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed) + "(Action`1<T1>, T1)")]
        public void ShouldSucceed_Action_1_T1_T1()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed) + "(Action`2<T1, T2>, T1, T2)")]
        public void ShouldSucceed_Action_2_T1_T2_T1_T2()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed) + "(Action`3<T1, T2, T3>, T1, T2, T3)")]
        public void ShouldSucceed_Action_3_T1_T2_T3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed) + "(Action`4<T1, T2, T3, T4>, T1, T2, T3, T4)")]
        public void ShouldSucceed_Action_4_T1_T2_T3_T4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed) + "(Func`1<U>)")]
        public void ShouldSucceed_Func_1_U()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed) + "(Func`2<T1, U>, T1)")]
        public void ShouldSucceed_Func_2_T1_U_T1()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed) + "(Func`3<T1, T2, U>, T1, T2)")]
        public void ShouldSucceed_Func_3_T1_T2_U_T1_T2()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed) + "(Func`4<T1, T2, T3, U>, T1, T2, T3)")]
        public void ShouldSucceed_Func_4_T1_T2_T3_U_T1_T2_T3()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldSucceed) + "(Func`5<T1, T2, T3, T4, U>, T1, T2, T3, T4)")]
        public void ShouldSucceed_Func_5_T1_T2_T3_T4_U_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail) + "(MethodInfo, Object[], Object, Func`1[])")]
        public void ShouldFail_MethodInfo_Object_Object_Func_1()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail) + "(MethodInfo, Object[], Object, Type, Func`1[])")]
        public void ShouldFail_MethodInfo_Object_Object_Type_Func_1()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail) + "(Action)")]
        public void ShouldFail_Action()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail) + "(Action`1<T1>, T1)")]
        public void ShouldFail_Action_1_T1_T1()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail) + "(Action`2<T1, T2>, T1, T2)")]
        public void ShouldFail_Action_2_T1_T2_T1_T2()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail) + "(Action`3<T1, T2, T3>, T1, T2, T3)")]
        public void ShouldFail_Action_3_T1_T2_T3_T1_T2_T3()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail) + "(Action`4<T1, T2, T3, T4>, T1, T2, T3, T4)")]
        public void ShouldFail_Action_4_T1_T2_T3_T4_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail) + "(Func`1<U>)")]
        public void ShouldFail_Func_1_U()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail) + "(Func`2<T1, U>, T1)")]
        public void ShouldFail_Func_2_T1_U_T1()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail) + "(Func`3<T1, T2, U>, T1, T2)")]
        public void ShouldFail_Func_3_T1_T2_U_T1_T2()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail) + "(Func`4<T1, T2, T3, U>, T1, T2, T3)")]
        public void ShouldFail_Func_4_T1_T2_T3_U_T1_T2_T3()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldFail) + "(Func`5<T1, T2, T3, T4, U>, T1, T2, T3, T4)")]
        public void ShouldFail_Func_5_T1_T2_T3_T4_U_T1_T2_T3_T4()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldBe) + "(MethodInfo, Object, Object[], Object, Func`2[])")]
        public void ShouldBe_MethodInfo_Object_Object_Object_Func_2()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldBe) + "(MethodInfo, Object, Object[], U, Func`2[])")]
        public void ShouldBe_MethodInfo_Object_Object_U_Func_2()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldBe) + "(Func`1<U>, U)")]
        public void ShouldBe_Func_1_U_U()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldBe) + "(Func`2<T1, U>, T1, U)")]
        public void ShouldBe_Func_2_T1_U_T1_U()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldBe) + "(Func`3<T1, T2, U>, T1, T2, U)")]
        public void ShouldBe_Func_3_T1_T2_U_T1_T2_U()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldBe) + "(Func`4<T1, T2, T3, U>, T1, T2, T3, U)")]
        public void ShouldBe_Func_4_T1_T2_T3_U_T1_T2_T3_U()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldBe) + "(Func`5<T1, T2, T3, T4, U>, T1, T2, T3, T4, U)")]
        public void ShouldBe_Func_5_T1_T2_T3_T4_U_T1_T2_T3_T4_U()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.HaveAttribute) + "(TypeAssertions, String, Object[]) => AndConstraint`1<TypeAssertions>")]
        public void HaveAttribute_TypeAssertions_String_Object_AndConstraint_1_TypeAssertions()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.HaveAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.HaveAttribute) + "(TypeAssertions, Boolean, String, Object[]) => AndConstraint`1<TypeAssertions>")]
        public void HaveAttribute_TypeAssertions_Boolean_String_Object_AndConstraint_1_TypeAssertions()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.HaveAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.NotHaveAttribute) + "(TypeAssertions, String, Object[]) => AndConstraint`1<TypeAssertions>")]
        public void NotHaveAttribute_TypeAssertions_String_Object_AndConstraint_1_TypeAssertions()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.NotHaveAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.NotHaveAttribute) + "(TypeAssertions, Boolean, String, Object[]) => AndConstraint`1<TypeAssertions>")]
        public void NotHaveAttribute_TypeAssertions_Boolean_String_Object_AndConstraint_1_TypeAssertions()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.NotHaveAttribute
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldBeTrue) + "(Boolean, String, Object[]) => AndConstraint`1<BooleanAssertions>")]
        public void ShouldBeTrue()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBeTrue
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldBeFalse) + "(Boolean, String, Object[]) => AndConstraint`1<BooleanAssertions>")]
        public void ShouldBeFalse()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBeFalse
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldBeNull) + "(T, String, Object[]) => AndConstraint`1<ObjectAssertions>")]
        public void ShouldBeNull_T_String_Object_AndConstraint_1_ObjectAssertions()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBeNull
            }

        [Fact]
        [Trait(Traits.TargetMember, nameof(LCore) + "." + nameof(global::LCore.LUnit) + "." + nameof(global::LCore.LUnit.Fluent) + "." + nameof(FluentExt) + "." + nameof(FluentExt.ShouldBeNull) + "(Nullable`1<T>, String, Object[]) => AndConstraint`1<ObjectAssertions>")]
        public void ShouldBeNull_Nullable_1_T_String_Object_AndConstraint_1_ObjectAssertions()
            {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBeNull
            }
        }
    }