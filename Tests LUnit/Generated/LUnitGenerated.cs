/*
Covering Assembly: LUnit

Cover application using naming conventions.

LUnit has Autogenerated 7 Classes and 52 Methods:
*/
using Xunit.Abstractions;
using Xunit;
using System;
using LCore.LUnit.Fluent;
using LCore.LUnit.Assert;
using LCore.LUnit;

namespace LUnit_Tests.LCore.LUnit
{
    public partial class AssemblyTesterTester : XUnitOutputTester, IDisposable
    {
        public AssemblyTesterTester( ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(AssemblyTester)+ "." + nameof(AssemblyTester.AssemblyStatus) + "()")]
        public void AssemblyStatus()
         {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.AssemblyStatus
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(AssemblyTester)+ "." + nameof(AssemblyTester.AssemblyMissingCoverage) + "()")]
        public void AssemblyMissingCoverage()
         {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.AssemblyMissingCoverage
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(AssemblyTester)+ "." + nameof(AssemblyTester.TestFailure01) + "()")]
        public void TestFailure01()
         {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure01
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(AssemblyTester)+ "." + nameof(AssemblyTester.TestFailure02) + "()")]
        public void TestFailure02()
         {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure02
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(AssemblyTester)+ "." + nameof(AssemblyTester.TestFailure03) + "()")]
        public void TestFailure03()
         {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure03
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(AssemblyTester)+ "." + nameof(AssemblyTester.TestFailure04) + "()")]
        public void TestFailure04()
         {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure04
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(AssemblyTester)+ "." + nameof(AssemblyTester.TestFailure05) + "()")]
        public void TestFailure05()
         {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure05
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(AssemblyTester)+ "." + nameof(AssemblyTester.TestFailure06) + "()")]
        public void TestFailure06()
         {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure06
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(AssemblyTester)+ "." + nameof(AssemblyTester.TestFailure07) + "()")]
        public void TestFailure07()
         {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure07
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(AssemblyTester)+ "." + nameof(AssemblyTester.TestFailure08) + "()")]
        public void TestFailure08()
         {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure08
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(AssemblyTester)+ "." + nameof(AssemblyTester.TestFailure09) + "()")]
        public void TestFailure09()
         {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure09
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(AssemblyTester)+ "." + nameof(AssemblyTester.TestFailure10) + "()")]
        public void TestFailure10()
         {
            // TODO: Implement method test LCore.LUnit.AssemblyTester.TestFailure10
         }
         
    }
    public partial class MultiTestReporterTester : XUnitOutputTester, IDisposable
    {
        public MultiTestReporterTester( ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(MultiTestReporter)+ "." + nameof(MultiTestReporter.TestFailure01) + "()")]
        public void TestFailure01()
         {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure01
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(MultiTestReporter)+ "." + nameof(MultiTestReporter.TestFailure02) + "()")]
        public void TestFailure02()
         {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure02
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(MultiTestReporter)+ "." + nameof(MultiTestReporter.TestFailure03) + "()")]
        public void TestFailure03()
         {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure03
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(MultiTestReporter)+ "." + nameof(MultiTestReporter.TestFailure04) + "()")]
        public void TestFailure04()
         {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure04
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(MultiTestReporter)+ "." + nameof(MultiTestReporter.TestFailure05) + "()")]
        public void TestFailure05()
         {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure05
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(MultiTestReporter)+ "." + nameof(MultiTestReporter.TestFailure06) + "()")]
        public void TestFailure06()
         {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure06
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(MultiTestReporter)+ "." + nameof(MultiTestReporter.TestFailure07) + "()")]
        public void TestFailure07()
         {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure07
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(MultiTestReporter)+ "." + nameof(MultiTestReporter.TestFailure08) + "()")]
        public void TestFailure08()
         {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure08
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(MultiTestReporter)+ "." + nameof(MultiTestReporter.TestFailure09) + "()")]
        public void TestFailure09()
         {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure09
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(MultiTestReporter)+ "." + nameof(MultiTestReporter.TestFailure10) + "()")]
        public void TestFailure10()
         {
            // TODO: Implement method test LCore.LUnit.MultiTestReporter.TestFailure10
         }
         
    }
    public partial class TestAttributeTester : XUnitOutputTester, IDisposable
    {
        public TestAttributeTester( ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(TestAttribute)+ "." + nameof(TestAttribute.RunTest) + "(MethodInfo)")]
        public void RunTest()
         {
            // TODO: Implement method test LCore.LUnit.TestAttribute.RunTest
         }
         
    }
    public partial class LUnitTester : XUnitOutputTester, IDisposable
    {
        public LUnitTester( ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.LUnit)+ "." + nameof(global::LCore.LUnit.LUnit.FixParameterTypes) + "(MethodInfo, Object[])")]
        public void FixParameterTypes()
         {
            // TODO: Implement method test LCore.LUnit.LUnit.FixParameterTypes
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.LUnit)+ "." + nameof(global::LCore.LUnit.LUnit.FixObject) + "(MethodInfo, Type, Object&)")]
        public void FixObject()
         {
            // TODO: Implement method test LCore.LUnit.LUnit.FixObject
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.LUnit)+ "." + nameof(global::LCore.LUnit.LUnit.GetMethodDelegate) + "(MethodInfo, Type, String) => Object")]
        public void GetMethodDelegate()
         {
            // TODO: Implement method test LCore.LUnit.LUnit.GetMethodDelegate
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.LUnit)+ "." + nameof(global::LCore.LUnit.LUnit.GetCheckMethod) + "(MethodInfo, String) => Func<Boolean>")]
        public void GetCheckMethod()
         {
            // TODO: Implement method test LCore.LUnit.LUnit.GetCheckMethod
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.LUnit)+ "." + nameof(global::LCore.LUnit.LUnit.GetCheckMethodArg) + "(MethodInfo, String) => Func<Object, Boolean>")]
        public void GetCheckMethodArg()
         {
            // TODO: Implement method test LCore.LUnit.LUnit.GetCheckMethodArg
         }
         
    }
    public partial class TestExtTester : XUnitOutputTester, IDisposable
    {
        public TestExtTester( ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(TestExt)+ "." + nameof(TestExt.GetTestMembers) + "(Type) => Dictionary<MemberInfo, List<ILUnitAttribute>>")]
        public void GetTestMembers()
         {
            // TODO: Implement method test LCore.LUnit.TestExt.GetTestMembers
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(TestExt)+ "." + nameof(TestExt.RunTest) + "(ITestResultAttribute, MethodInfo)")]
        public void RunTest_ITestResultAttribute_MethodInfo()
         {
            // TODO: Implement method test LCore.LUnit.TestExt.RunTest
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(TestExt)+ "." + nameof(TestExt.RunTest) + "(ITestFailsAttribute, MethodInfo)")]
        public void RunTest_ITestFailsAttribute_MethodInfo()
         {
            // TODO: Implement method test LCore.LUnit.TestExt.RunTest
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(TestExt)+ "." + nameof(TestExt.RunTest) + "(ITestSucceedsAttribute, MethodInfo)")]
        public void RunTest_ITestSucceedsAttribute_MethodInfo()
         {
            // TODO: Implement method test LCore.LUnit.TestExt.RunTest
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(TestExt)+ "." + nameof(TestExt.RunTest) + "(ITestSourceAttribute, MethodInfo)")]
        public void RunTest_ITestSourceAttribute_MethodInfo()
         {
            // TODO: Implement method test LCore.LUnit.TestExt.RunTest
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(TestExt)+ "." + nameof(TestExt.RunTest) + "(IValidateAttribute, MemberInfo)")]
        public void RunTest_IValidateAttribute_MemberInfo()
         {
            // TODO: Implement method test LCore.LUnit.TestExt.RunTest
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(TestExt)+ "." + nameof(TestExt.GetTargetingName) + "(MemberInfo, String, String, String) => Tuple<String, String, String>")]
        public void GetTargetingName()
         {
            // TODO: Implement method test LCore.LUnit.TestExt.GetTargetingName
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(TestExt)+ "." + nameof(TestExt.GetAssemblyMemberTraits) + "(IEnumerable<Assembly>) => List<String>")]
        public void GetAssemblyMemberTraits()
         {
            // TODO: Implement method test LCore.LUnit.TestExt.GetAssemblyMemberTraits
         }
         
    }
}

namespace LUnit_Tests.LCore.LUnit.Assert
{
   public partial class AssertionExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertSucceedes) + "(MethodInfo, Object, Object[], Func<Boolean>[])")]
        public void AssertSucceedes_MethodInfo_Object_Object_Func_Boolean()
         {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertSucceedes) + "(MethodInfo, Object, Object[], Func<Object, Boolean>[])")]
        public void AssertSucceedes_MethodInfo_Object_Object_Func_Object_Boolean()
         {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertSucceedes) + "(MethodInfo, Object, Object[], Func<U, Boolean>[])")]
        public void AssertSucceedes_MethodInfo_Object_Object_Func_U_Boolean()
         {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(MethodInfo, Object[], Object, Func<Boolean>[])")]
        public void AssertFails_MethodInfo_Object_Object_Func_Boolean()
         {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(MethodInfo, Object[], Object, Type, Func<Boolean>[])")]
        public void AssertFails_MethodInfo_Object_Object_Type_Func_Boolean()
         {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertResult) + "(MethodInfo, Object, Object[], Object, Func<Object, Boolean>[])")]
        public void AssertResult_MethodInfo_Object_Object_Object_Func_Object_Boolean()
         {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertResult
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertResult) + "(MethodInfo, Object, Object[], U, Func<Object, Boolean>[])")]
        public void AssertResult_MethodInfo_Object_Object_U_Func_Object_Boolean()
         {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertResult
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertSource) + "(MethodInfo, Object, Object[], Object, Func<Object, Boolean>[])")]
        public void AssertSource_MethodInfo_Object_Object_Object_Func_Object_Boolean()
         {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSource
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertSource) + "(MethodInfo, Object, Object[], U, Func<Object, Boolean>[])")]
        public void AssertSource_MethodInfo_Object_Object_U_Func_Object_Boolean()
         {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSource
         }
         
    }
}

namespace LUnit_Tests.LCore.LUnit.Fluent
{
   public partial class FluentExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldSucceed) + "(MethodInfo, Object, Object[], Func<Boolean>[])")]
        public void ShouldSucceed_MethodInfo_Object_Object_Func_Boolean()
         {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldSucceed) + "(MethodInfo, Object, Object[], Func<Object, Boolean>[])")]
        public void ShouldSucceed_MethodInfo_Object_Object_Func_Object_Boolean()
         {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldSucceed) + "(MethodInfo, Object, Object[], Func<U, Boolean>[])")]
        public void ShouldSucceed_MethodInfo_Object_Object_Func_U_Boolean()
         {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(MethodInfo, Object[], Object, Func<Boolean>[])")]
        public void ShouldFail_MethodInfo_Object_Object_Func_Boolean()
         {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(MethodInfo, Object[], Object, Type, Func<Boolean>[])")]
        public void ShouldFail_MethodInfo_Object_Object_Type_Func_Boolean()
         {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldBe) + "(MethodInfo, Object, Object[], Object, Func<Object, Boolean>[])")]
        public void ShouldBe_MethodInfo_Object_Object_Object_Func_Object_Boolean()
         {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
         }
         
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldBe) + "(MethodInfo, Object, Object[], U, Func<Object, Boolean>[])")]
        public void ShouldBe_MethodInfo_Object_Object_U_Func_Object_Boolean()
         {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
         }
         
    }
}
